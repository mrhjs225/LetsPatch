Loading Change Pool...Loading Class - org.apache.commons.lang3.math.NumberUtils
===buggy===
-statement-
isEmpty
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===Candidate===
-change-
insert
int var0 = var1.method0('-');
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0 var0 = (var1 > 1)? var2[1]:null;]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0();]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1 - var2;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = var1 - var2;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = var1 - var2;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
toCharArray
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
chars=str.toCharArray()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
chars=str.toCharArray()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0('-');
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0 var0 = (var1 > 1)? var2[1]:null;]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
char[] chars=str.toCharArray();

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
createBigDecimal
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
mant
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return str.length() > 0;

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return str.length() > 0;

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
-rightRS-
[]
===buggy===
-statement-
return str.length() > 0;

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
-rightRS-
[]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
0
-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
update
0
to
127
-context-
P:InfixExpression{rightOperand},L:MethodInvocation{leftOperand},R:
-leftRS-
[var0.method0(var1, var2) != 0, Type0 var0 = new Type0(this);, Type0<Type1> var0 = new Type2<Type1>();]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
0
to
127
-context-
P:InfixExpression{rightOperand},L:MethodInvocation{leftOperand},R:
-leftRS-
[var0.method0(var1, var2) != 0, Type0 var0 = new Type0(this);, Type0<Type1> var0 = new Type2<Type1>();]
-rightRS-
[]
result:fail
===buggy===
-statement-
0
-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
update
0
to
2
-context-
P:InfixExpression{rightOperand},L:MethodInvocation{leftOperand},R:
-leftRS-
[var0.method0() <= 0, var0.method0() == 1, Type0<Type1> var0 =
      var1.method0(var2);, Type0<Type1> var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
0
to
2
-context-
P:InfixExpression{rightOperand},L:MethodInvocation{leftOperand},R:
-leftRS-
[var0.method0() <= 0, var0.method0() == 1, Type0<Type1> var0 =
      var1.method0(var2);, Type0<Type1> var0 = method0(var1);]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
start
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return str0 + var0 +
        str1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(!var1.method1(),
        str0), !var0.method0(var1, var2).method1(), var0 == null || var0.method0(), var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return str0 + var0 +
        str1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(!var1.method1(),
        str0), !var0.method0(var1, var2).method1(), var0 == null || var0.method0(), var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1.method1(var2))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return 0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1 + str1), var0.method0(str0
            + var1 + str1 + var2
            + str2
            + str3), var0.method0(str0
            +var1+str1+ var2.method1().var3 
            +str2), var0.method0(str0
          +var1+str1+var2
          +str2), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1), var0.method0(str0
            + str1 + var1 + str2), var0.method0(
              str0 + var1), var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return 0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1 + str1), var0.method0(str0
            + var1 + str1 + var2
            + str2
            + str3), var0.method0(str0
            +var1+str1+ var2.method1().var3 
            +str2), var0.method0(str0
          +var1+str1+var2
          +str2), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1), var0.method0(str0
            + str1 + var1 + str2), var0.method0(
              str0 + var1), var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return var0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return true;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1), var0.method0(str0), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0, var0.method0(), var0.method0(var1), var0.method0(Type0.class), Type0<Type1> var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return true;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1), var0.method0(str0), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0, var0.method0(), var0.method0(var1), var0.method0(Type0.class), Type0<Type1> var0 = var1.method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return var0 >0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[method0().method1(var0, null), method0(), method0() != null, var0 = method0(method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0 >0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[method0().method1(var0, null), method0(), method0() != null, var0 = method0(method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0 >0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[method0().method1(var0, null), method0(), method0() != null, var0 = method0(method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0 >0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[method0().method1(var0, null), method0(), method0() != null, var0 = method0(method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
break;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
break;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 1
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 1
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 1
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 1
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 1
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = true
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[start] == '0' && chars[start + 1] == 'x') {
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  int i=start + 2;
  if (i == sz) {
    return false;
  }
  for (; i < chars.length; i++) {
    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
      return false;
    }
  }
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:PostfixExpression{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:PostfixExpression{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
sz
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:InfixExpression{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:InfixExpression{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:InfixExpression{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:InfixExpression{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:InfixExpression{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
start
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = var1.method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0(method1());, Type0 var0 = var1.method0();]
-rightRS-
[var0.method0(), var0.method0().method1() > 1, boolean var0 = var1.method0().method1() == 1
                                                && !var2.method2();, var0.method0().method1() == 1 && !var1, Type0 var0 = var1.method0(method1());, var0.method0(var1, var2, method1()), final Type0 var0 = var1.method0(method1());, var0.method0(method1(),
            var1.method2(var2),
            var1.method3(Type0.class),
            var1.method4(Type1.class),
            var1.method5(var3)), boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0().method1(0);]
result:fail
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type1(str0 + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 =
      var1.method0(var2.method1()).method2();, var0.method0(var1), var0 = var1.method0(var2.method1(), var3), Type0 var0 = var1.method0(var2);, final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(var2.method1());, for (Type0 var0 : var1.method0()) {
      try {
        if (var2.method1()) {
          var2.method2(str0 + var0);
        }
        var0.method3();
      } catch (Type1 var3) {
        var2.method4(str1
            + str2 + var3.method5());
      }
    }, for (Type0 var0 : var1.method0()) {
      try {
        var0.method1();
      } catch (Type1 var2) {
        var3.method2(str0 + var2.method3());
      }
    }]
-rightRS-
[var0.method0() == null, var0.method0() != null, Type0 var0 = var1.method0();, var0.method0(str0 + var1
            + str1), var0.method0(str0 + var1 + str1), Type0 var0 =
      var1.method0(var2.method1()).method2();, for (Type0 var0 : var1.method0()) {
      try {
        if (var2.method1()) {
          var2.method2(str0 + var0);
        }
        var0.method3();
      } catch (Type1 var3) {
        var2.method4(str1
            + str2 + var3.method5());
      }
    }, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1.method0()) {
      try {
        var0.method1();
      } catch (Type1 var2) {
        var3.method2(str0 + var2.method3());
      }
    }, final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(var2.method1());]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type1(str0 + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 =
      var1.method0(var2.method1()).method2();, var0.method0(var1), var0 = var1.method0(var2.method1(), var3), Type0 var0 = var1.method0(var2);, final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(var2.method1());, for (Type0 var0 : var1.method0()) {
      try {
        if (var2.method1()) {
          var2.method2(str0 + var0);
        }
        var0.method3();
      } catch (Type1 var3) {
        var2.method4(str1
            + str2 + var3.method5());
      }
    }, for (Type0 var0 : var1.method0()) {
      try {
        var0.method1();
      } catch (Type1 var2) {
        var3.method2(str0 + var2.method3());
      }
    }]
-rightRS-
[var0.method0() == null, var0.method0() != null, Type0 var0 = var1.method0();, var0.method0(str0 + var1
            + str1), var0.method0(str0 + var1 + str1), Type0 var0 =
      var1.method0(var2.method1()).method2();, for (Type0 var0 : var1.method0()) {
      try {
        if (var2.method1()) {
          var2.method2(str0 + var0);
        }
        var0.method3();
      } catch (Type1 var3) {
        var2.method4(str1
            + str2 + var3.method5());
      }
    }, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1.method0()) {
      try {
        var0.method1();
      } catch (Type1 var2) {
        var3.method2(str0 + var2.method3());
      }
    }, final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(var2.method1());]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type1(str0 + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 =
      var1.method0(var2.method1()).method2();, var0.method0(var1), var0 = var1.method0(var2.method1(), var3), Type0 var0 = var1.method0(var2);, final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(var2.method1());, for (Type0 var0 : var1.method0()) {
      try {
        if (var2.method1()) {
          var2.method2(str0 + var0);
        }
        var0.method3();
      } catch (Type1 var3) {
        var2.method4(str1
            + str2 + var3.method5());
      }
    }, for (Type0 var0 : var1.method0()) {
      try {
        var0.method1();
      } catch (Type1 var2) {
        var3.method2(str0 + var2.method3());
      }
    }]
-rightRS-
[var0.method0() == null, var0.method0() != null, Type0 var0 = var1.method0();, var0.method0(str0 + var1
            + str1), var0.method0(str0 + var1 + str1), Type0 var0 =
      var1.method0(var2.method1()).method2();, for (Type0 var0 : var1.method0()) {
      try {
        if (var2.method1()) {
          var2.method2(str0 + var0);
        }
        var0.method3();
      } catch (Type1 var3) {
        var2.method4(str1
            + str2 + var3.method5());
      }
    }, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1.method0()) {
      try {
        var0.method1();
      } catch (Type1 var2) {
        var3.method2(str0 + var2.method3());
      }
    }, final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(var2.method1());]
result:fail
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > start + 1) {
  if (chars[start] == '0' && chars[start + 1] == 'x') {
    int i=start + 2;
    if (i == sz) {
      return false;
    }
    for (; i < chars.length; i++) {
      if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
        return false;
      }
    }
    return true;
  }
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
sz=chars.length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
sz=chars.length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
chars.length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[char[] var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
int sz=chars.length;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
hasExp=false
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
hasExp=false
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
false
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
false
to
true
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
false
to
true
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasExp=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
hasDecPoint=false
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
hasDecPoint=false
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
false
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
false
to
true
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
false
to
true
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean hasDecPoint=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
allowSigns=false
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
allowSigns=false
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
false
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
false
to
true
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
false
to
true
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
boolean allowSigns=false;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
foundDigit=false
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
foundDigit=false
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
false
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
false
to
true
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
false
to
true
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===buggy===
-statement-
boolean foundDigit=false;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, char[] var0 = var1.method0();]
===buggy===
-statement-
start=(chars[0] == '-') ? 1 : 0
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
start=(chars[0] == '-') ? 1 : 0
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:NumberLiteral{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===Candidate===
-change-
insert
var0 = var1.method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0(method1());, Type0 var0 = var1.method0();]
-rightRS-
[var0.method0(), var0.method0().method1() > 1, boolean var0 = var1.method0().method1() == 1
                                                && !var2.method2();, var0.method0().method1() == 1 && !var1, Type0 var0 = var1.method0(method1());, var0.method0(var1, var2, method1()), final Type0 var0 = var1.method0(method1());, var0.method0(method1(),
            var1.method2(var2),
            var1.method3(Type0.class),
            var1.method4(Type1.class),
            var1.method5(var3)), boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0().method1(0);]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type1(str0 + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 =
      var1.method0(var2.method1()).method2();, var0.method0(var1), var0 = var1.method0(var2.method1(), var3), Type0 var0 = var1.method0(var2);, final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(var2.method1());, for (Type0 var0 : var1.method0()) {
      try {
        if (var2.method1()) {
          var2.method2(str0 + var0);
        }
        var0.method3();
      } catch (Type1 var3) {
        var2.method4(str1
            + str2 + var3.method5());
      }
    }, for (Type0 var0 : var1.method0()) {
      try {
        var0.method1();
      } catch (Type1 var2) {
        var3.method2(str0 + var2.method3());
      }
    }]
-rightRS-
[var0.method0() == null, var0.method0() != null, Type0 var0 = var1.method0();, var0.method0(str0 + var1
            + str1), var0.method0(str0 + var1 + str1), Type0 var0 =
      var1.method0(var2.method1()).method2();, for (Type0 var0 : var1.method0()) {
      try {
        if (var2.method1()) {
          var2.method2(str0 + var0);
        }
        var0.method3();
      } catch (Type1 var3) {
        var2.method4(str1
            + str2 + var3.method5());
      }
    }, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1.method0()) {
      try {
        var0.method1();
      } catch (Type1 var2) {
        var3.method2(str0 + var2.method3());
      }
    }, final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(var2.method1());]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type1(str0 + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 =
      var1.method0(var2.method1()).method2();, var0.method0(var1), var0 = var1.method0(var2.method1(), var3), Type0 var0 = var1.method0(var2);, final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(var2.method1());, for (Type0 var0 : var1.method0()) {
      try {
        if (var2.method1()) {
          var2.method2(str0 + var0);
        }
        var0.method3();
      } catch (Type1 var3) {
        var2.method4(str1
            + str2 + var3.method5());
      }
    }, for (Type0 var0 : var1.method0()) {
      try {
        var0.method1();
      } catch (Type1 var2) {
        var3.method2(str0 + var2.method3());
      }
    }]
-rightRS-
[var0.method0() == null, var0.method0() != null, Type0 var0 = var1.method0();, var0.method0(str0 + var1
            + str1), var0.method0(str0 + var1 + str1), Type0 var0 =
      var1.method0(var2.method1()).method2();, for (Type0 var0 : var1.method0()) {
      try {
        if (var2.method1()) {
          var2.method2(str0 + var0);
        }
        var0.method3();
      } catch (Type1 var3) {
        var2.method4(str1
            + str2 + var3.method5());
      }
    }, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1.method0()) {
      try {
        var0.method1();
      } catch (Type1 var2) {
        var3.method2(str0 + var2.method3());
      }
    }, final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(var2.method1());]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type1(str0 + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 =
      var1.method0(var2.method1()).method2();, var0.method0(var1), var0 = var1.method0(var2.method1(), var3), Type0 var0 = var1.method0(var2);, final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(var2.method1());, for (Type0 var0 : var1.method0()) {
      try {
        if (var2.method1()) {
          var2.method2(str0 + var0);
        }
        var0.method3();
      } catch (Type1 var3) {
        var2.method4(str1
            + str2 + var3.method5());
      }
    }, for (Type0 var0 : var1.method0()) {
      try {
        var0.method1();
      } catch (Type1 var2) {
        var3.method2(str0 + var2.method3());
      }
    }]
-rightRS-
[var0.method0() == null, var0.method0() != null, Type0 var0 = var1.method0();, var0.method0(str0 + var1
            + str1), var0.method0(str0 + var1 + str1), Type0 var0 =
      var1.method0(var2.method1()).method2();, for (Type0 var0 : var1.method0()) {
      try {
        if (var2.method1()) {
          var2.method2(str0 + var0);
        }
        var0.method3();
      } catch (Type1 var3) {
        var2.method4(str1
            + str2 + var3.method5());
      }
    }, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1.method0()) {
      try {
        var0.method1();
      } catch (Type1 var2) {
        var3.method2(str0 + var2.method3());
      }
    }, final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(var2.method1());]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[]
-rightRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
int start=(chars[0] == '-') ? 1 : 0;

-leftRS-
[boolean var0 = false;]
-rightRS-
[]
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
hasExp
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
hasExp
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
hasExp
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
hasDecPoint
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
hasExp
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
hasExp
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
hasExp
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
hasExp
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (hasDecPoint || hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
hasDecPoint
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
hasExp
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
sz
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
sz
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
sz
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (i == sz) {
  return false;
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (i == sz) {
  return false;
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type0(str0);
    }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type0(str0);
    }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type0(str0);
    }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type0(str0);
    }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type0(str0);
    }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (i == sz) {
  return false;
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (i == sz) {
  return false;
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (i == sz) {
  return false;
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
if (i == sz) {
  return false;
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (i == sz) {
  return false;
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (i == sz) {
  return false;
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (i == sz) {
  return false;
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (i == sz) {
  return false;
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (i == sz) {
  return false;
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
i
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
sz
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
chars.length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
assert var0 <= var1 :
      str0 + var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
assert var0 <= var1 :
      str0 + var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
assert var0 <= var1 :
      str0 + var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (i < chars.length) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (chars[i] >= '0' && chars[i] <= '9') {
    return true;
  }
  if (chars[i] == 'e' || chars[i] == 'E') {
    return false;
  }
  if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    return foundDigit;
  }
  if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
    return foundDigit;
  }
  if (chars[i] == 'l' || chars[i] == 'L') {
    return foundDigit && !hasExp;
  }
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (chars[i] == 'e' || chars[i] == 'E') {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[i] == 'e' || chars[i] == 'E') {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] == 'e' || chars[i] == 'E') {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] == 'e' || chars[i] == 'E') {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[i] == 'e' || chars[i] == 'E') {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[i] == 'e' || chars[i] == 'E') {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] == 'e' || chars[i] == 'E') {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] == 'e' || chars[i] == 'E') {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (chars[i] == '.') {
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[i] == '.') {
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] == '.') {
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] == '.') {
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[i] == '.') {
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[i] == '.') {
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] == '.') {
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] == '.') {
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (hasDecPoint || hasExp) {
    return false;
  }
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
  if (chars[i] >= '0' && chars[i] <= '9') {
    foundDigit=true;
    allowSigns=false;
  }
 else   if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
      return false;
    }
    hasDecPoint=true;
  }
 else   if (chars[i] == 'e' || chars[i] == 'E') {
    if (hasExp) {
      return false;
    }
    if (!foundDigit) {
      return false;
    }
    hasExp=true;
    allowSigns=true;
  }
 else   if (chars[i] == '+' || chars[i] == '-') {
    if (!allowSigns) {
      return false;
    }
    allowSigns=false;
    foundDigit=false;
  }
 else {
    return false;
  }
  i++;
}

-leftRS-
[int var0 = (var1[0] == '-') ? 1 : 0;, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
i
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:InfixExpression{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:InfixExpression{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:InfixExpression{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:InfixExpression{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:InfixExpression{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
sz
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
sz
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
sz
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
allowSigns
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
allowSigns
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
allowSigns
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 <= 0 || var1)
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
i
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
sz
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
sz
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (!allowSigns) {
  return false;
}

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===buggy===
-statement-
if (!allowSigns) {
  return false;
}

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!allowSigns) {
  return false;
}

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
if (!allowSigns) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!allowSigns) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!allowSigns) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!allowSigns) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!allowSigns) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!allowSigns) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (!allowSigns) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!allowSigns) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!allowSigns) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!allowSigns) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (!foundDigit) {
  return false;
}

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===buggy===
-statement-
if (!foundDigit) {
  return false;
}

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!foundDigit) {
  return false;
}

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===buggy===
-statement-
if (!foundDigit) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!foundDigit) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!foundDigit) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!foundDigit) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
(chars[i] < '0' || chars[i] > '9')
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
(var0 ? 1 << 10 : 0)
-context-
P:InfixExpression{leftOperand},L:,R:ParenthesizedExpression{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 ? 1 << 10 : 0)
-context-
P:InfixExpression{leftOperand},L:,R:ParenthesizedExpression{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 ? 1 << 10 : 0)
-context-
P:InfixExpression{leftOperand},L:,R:ParenthesizedExpression{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 ? 1 << 10 : 0)
-context-
P:InfixExpression{leftOperand},L:,R:ParenthesizedExpression{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = (var1 < var2 - 1);
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0().method1(var0, var1[++var2]), method0(), var0 = var1.method0(method1()), Type0 var0 = var1.method0(method1());, var0.method0(var1), var0[var1].method0(str0), var0.method0(str0), var0[var1].method0(str0) || (var0[var1].method0(str1)), Type0 var0 = var1[++var2];, for (Type0 var0 : var1) {
            var2.method0(var0);
          }, this.var0 = var0, for (int var0 = 0; var0 < var1; var0++) { // parse command line
      if (var2[var0].method0(str0)) {
        Type0 var3 = var2[++var0];
        var4 = new Type2(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str2)) {
        Type0 var3 = var2[++var0];
        var4 = new Type4(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str3)) {
        Type0 var3 = var2[++var0];
        var4 = new Type5(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str4)) {
        var4 = new Type6();
      } else if (var2[var0].method0(str5)) {
        method2().method3(var5, var2[++var0]);
      } else if (var2[var0].method0(str6)) {
        method2().method3(var6, var2[++var0]);
      } else if (var2[var0].method0(str7)) {
        var7 = true;
        method2().method3(var8, var2[++var0]);
      } else if (var2[var0].method0(str8)) {
        method2().method4(var9, true);
      } else if (var2[var0].method0(str9) || (var2[var0].method0(str10))) {
        var10 = true;
      } else if (var2[var0].method0(str1)) {
        method1();
        return -1;
      } else {
        method1();
        var11.method5(var12);
        return -1;
      }
    }, for(int var0=0; var0 < var1; ++var0) {
            var2.method0(var3.method1(var0) + str0 + var4[var0]);
          }, method0().method1(var0, true)]
result:fail
===Candidate===
-change-
insert
boolean var0 = (var1 < var2 - 1);
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0().method1(var0, var1[++var2]), method0(), var0 = var1.method0(method1()), Type0 var0 = var1.method0(method1());, var0.method0(var1), var0[var1].method0(str0), var0.method0(str0), var0[var1].method0(str0) || (var0[var1].method0(str1)), Type0 var0 = var1[++var2];, for (Type0 var0 : var1) {
            var2.method0(var0);
          }, this.var0 = var0, for (int var0 = 0; var0 < var1; var0++) { // parse command line
      if (var2[var0].method0(str0)) {
        Type0 var3 = var2[++var0];
        var4 = new Type2(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str2)) {
        Type0 var3 = var2[++var0];
        var4 = new Type4(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str3)) {
        Type0 var3 = var2[++var0];
        var4 = new Type5(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str4)) {
        var4 = new Type6();
      } else if (var2[var0].method0(str5)) {
        method2().method3(var5, var2[++var0]);
      } else if (var2[var0].method0(str6)) {
        method2().method3(var6, var2[++var0]);
      } else if (var2[var0].method0(str7)) {
        var7 = true;
        method2().method3(var8, var2[++var0]);
      } else if (var2[var0].method0(str8)) {
        method2().method4(var9, true);
      } else if (var2[var0].method0(str9) || (var2[var0].method0(str10))) {
        var10 = true;
      } else if (var2[var0].method0(str1)) {
        method1();
        return -1;
      } else {
        method1();
        var11.method5(var12);
        return -1;
      }
    }, for(int var0=0; var0 < var1; ++var0) {
            var2.method0(var3.method1(var0) + str0 + var4[var0]);
          }, method0().method1(var0, true)]
result:fail
===Candidate===
-change-
insert
boolean var0 = (var1 < var2 - 1);
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0().method1(var0, var1[++var2]), method0(), var0 = var1.method0(method1()), Type0 var0 = var1.method0(method1());, var0.method0(var1), var0[var1].method0(str0), var0.method0(str0), var0[var1].method0(str0) || (var0[var1].method0(str1)), Type0 var0 = var1[++var2];, for (Type0 var0 : var1) {
            var2.method0(var0);
          }, this.var0 = var0, for (int var0 = 0; var0 < var1; var0++) { // parse command line
      if (var2[var0].method0(str0)) {
        Type0 var3 = var2[++var0];
        var4 = new Type2(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str2)) {
        Type0 var3 = var2[++var0];
        var4 = new Type4(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str3)) {
        Type0 var3 = var2[++var0];
        var4 = new Type5(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str4)) {
        var4 = new Type6();
      } else if (var2[var0].method0(str5)) {
        method2().method3(var5, var2[++var0]);
      } else if (var2[var0].method0(str6)) {
        method2().method3(var6, var2[++var0]);
      } else if (var2[var0].method0(str7)) {
        var7 = true;
        method2().method3(var8, var2[++var0]);
      } else if (var2[var0].method0(str8)) {
        method2().method4(var9, true);
      } else if (var2[var0].method0(str9) || (var2[var0].method0(str10))) {
        var10 = true;
      } else if (var2[var0].method0(str1)) {
        method1();
        return -1;
      } else {
        method1();
        var11.method5(var12);
        return -1;
      }
    }, for(int var0=0; var0 < var1; ++var0) {
            var2.method0(var3.method1(var0) + str0 + var4[var0]);
          }, method0().method1(var0, true)]
result:fail
===buggy===
-statement-
if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (hasExp) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
hasExp
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  foundDigit=true;
  allowSigns=false;
}
 else if (chars[i] == '.') {
  if (hasDecPoint || hasExp) {
    return false;
  }
  hasDecPoint=true;
}
 else if (chars[i] == 'e' || chars[i] == 'E') {
  if (hasExp) {
    return false;
  }
  if (!foundDigit) {
    return false;
  }
  hasExp=true;
  allowSigns=true;
}
 else if (chars[i] == '+' || chars[i] == '-') {
  if (!allowSigns) {
    return false;
  }
  allowSigns=false;
  foundDigit=false;
}
 else {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:WhileStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:WhileStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] >= '0' && chars[i] <= '9') {
  foundDigit=true;
  allowSigns=false;
}
 else if (chars[i] == '.') {
  if (hasDecPoint || hasExp) {
    return false;
  }
  hasDecPoint=true;
}
 else if (chars[i] == 'e' || chars[i] == 'E') {
  if (hasExp) {
    return false;
  }
  if (!foundDigit) {
    return false;
  }
  hasExp=true;
  allowSigns=true;
}
 else if (chars[i] == '+' || chars[i] == '-') {
  if (!allowSigns) {
    return false;
  }
  allowSigns=false;
  foundDigit=false;
}
 else {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = (Type0)var1;
-context-
P:WhileStatement{statements},L:IfStatement{statements},R:PostfixExpression{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = (Type0)var1;
-context-
P:WhileStatement{statements},L:IfStatement{statements},R:PostfixExpression{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = (Type0)var1;
-context-
P:WhileStatement{statements},L:IfStatement{statements},R:PostfixExpression{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = (Type0)var1;
-context-
P:WhileStatement{statements},L:IfStatement{statements},R:PostfixExpression{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
  return foundDigit;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
i=start + 2
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
i=start + 2
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = new Type0(var0)
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
var0 = new Type0(var0)
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();]
result:fail
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type0(str0);
    }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type0(str0);
    }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type0(str0);
    }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type0(str0);
    }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int i=start + 2;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
start
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (chars[i] == 'l' || chars[i] == 'L') {
  return foundDigit && !hasExp;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
chars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (chars[i] == 'l' || chars[i] == 'L') {
  return foundDigit && !hasExp;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (chars[i] == 'l' || chars[i] == 'L') {
  return foundDigit && !hasExp;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] == 'l' || chars[i] == 'L') {
  return foundDigit && !hasExp;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (chars[i] == 'l' || chars[i] == 'L') {
  return foundDigit && !hasExp;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return foundDigit && !hasExp;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return foundDigit && !hasExp;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return foundDigit && !hasExp;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return foundDigit && !hasExp;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return foundDigit && !hasExp;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return foundDigit && !hasExp;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return foundDigit && !hasExp;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return foundDigit && !hasExp;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return foundDigit && !hasExp;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
NumberFormatException
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:InfixExpression{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:InfixExpression{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
" is not a valid number."
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
throw new NumberFormatException(str + " is not a valid number.");

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
throw new NumberFormatException(str + " is not a valid number.");

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
throw new NumberFormatException(str + " is not a valid number.");

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
throw new NumberFormatException(str + " is not a valid number.");

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = (Type0)var1
-context-
P:IfStatement{statements},L:,R:ThrowStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = (Type0)var1
-context-
P:IfStatement{statements},L:,R:ThrowStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = (Type0)var1
-context-
P:IfStatement{statements},L:,R:ThrowStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
throw new NumberFormatException(str + " is not a valid number.");

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
" is not a valid number."
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int i=start;

-leftRS-
[]
-rightRS-
[boolean var0 = false;]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
i=start
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
i=start
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
NumberFormatException
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
NumberFormatException
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
catch (NumberFormatException e) {
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
catch (NumberFormatException e) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException e) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException e) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException e) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException e) {
}

-leftRS-
[method0(var0), Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException e) {
}

-leftRS-
[method0(var0), Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===buggy===
-statement-
catch (NumberFormatException e) {
}

-leftRS-
[method0(var0), Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException e) {
}

-leftRS-
[method0(var0), Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException e) {
}

-leftRS-
[method0(var0), Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException e) {
}

-leftRS-
[method0(var0), Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
NumberFormatException
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
NumberFormatException
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
-rightRS-
[]
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
-rightRS-
[]
===buggy===
-statement-
NumberFormatException
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return foundDigit;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return foundDigit;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return foundDigit;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return foundDigit;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return foundDigit;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return foundDigit;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return foundDigit;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return foundDigit;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return foundDigit;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
throw new NumberFormatException("A blank string is not a valid number");

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
throw new NumberFormatException("A blank string is not a valid number");

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
throw new NumberFormatException("A blank string is not a valid number");

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
throw new NumberFormatException("A blank string is not a valid number");

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = (Type0)var1
-context-
P:IfStatement{statements},L:,R:ThrowStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
throw new NumberFormatException("A blank string is not a valid number");

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"A blank string is not a valid number"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
str0
to
str0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
NumberFormatException
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:InfixExpression{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:InfixExpression{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
" is not a valid number."
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
" is not a valid number."
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
NumberFormatException
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:InfixExpression{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:InfixExpression{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
" is not a valid number."
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
" is not a valid number."
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
chars.length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return foundDigit;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }]
===buggy===
-statement-
isAllZeros
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
isAllZeros
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
allZeros=isAllZeros(mant) && isAllZeros(exp)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
allZeros=isAllZeros(mant) && isAllZeros(exp)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
isAllZeros(exp)
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
isAllZeros(exp)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
isAllZeros(mant)
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
isAllZeros(mant)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
isAllZeros(mant)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
isAllZeros(mant)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
mant
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
exp
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
isInfinite
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
floatValue
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
f.isInfinite()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
f.isInfinite()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
f.isInfinite()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
f.isInfinite()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
f.floatValue()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
f.floatValue()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
f.floatValue()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
f.floatValue()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = var1
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = var0, this.var0 == var1
          && this.var2 == var3
          && this.var4 == var5
          && this.var6 == var6]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = var0, this.var0 == var1
          && this.var2 == var3
          && this.var4 == var5
          && this.var6 == var6]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = var0, this.var0 == var1
          && this.var2 == var3
          && this.var4 == var5
          && this.var6 == var6]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0,
                                var1.method1(var2))
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return var0;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = true
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
f
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
f
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
f
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
f
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
isInfinite
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
floatValue
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
d.isInfinite()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
d.isInfinite()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
d.isInfinite()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
d.isInfinite()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
d.floatValue()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
d.floatValue()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
d.floatValue()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
d.floatValue()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(0, var1.method1() - 1);]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = var1
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = var0, this.var0 == var1
          && this.var2 == var3
          && this.var4 == var5
          && this.var6 == var6]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = var0, this.var0 == var1
          && this.var2 == var3
          && this.var4 == var5
          && this.var6 == var6]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = var0, this.var0 == var1
          && this.var2 == var3
          && this.var4 == var5
          && this.var6 == var6]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0,
                                var1.method1(var2))
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return var0;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = true
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return d;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
d
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
d
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
d
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
d
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
isInfinite
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
floatValue
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
f.isInfinite()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
f.isInfinite()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
f.isInfinite()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
f.isInfinite()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
f.floatValue()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
f.floatValue()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
f.floatValue()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
f.floatValue()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
-rightRS-
[]
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = var1
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = var0, this.var0 == var1
          && this.var2 == var3
          && this.var4 == var5
          && this.var6 == var6]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = var0, this.var0 == var1
          && this.var2 == var3
          && this.var4 == var5
          && this.var6 == var6]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = var0, this.var0 == var1
          && this.var2 == var3
          && this.var4 == var5
          && this.var6 == var6]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0,
                                var1.method1(var2))
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return var0;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = true
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return f;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
f
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
f
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
f
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
f
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
createFloat
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
f=NumberUtils.createFloat(numeric)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
f=NumberUtils.createFloat(numeric)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=NumberUtils.createFloat(numeric);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
numeric
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
createDouble
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
d=NumberUtils.createDouble(numeric)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
d=NumberUtils.createDouble(numeric)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=NumberUtils.createDouble(numeric);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
numeric
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
substring
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
substring
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
exp
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
expPos
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
substring
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
substring
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
exp
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
expPos
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
createFloat
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
f=createFloat(str)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
f=createFloat(str)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Float
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Float f=createFloat(str);

-leftRS-
[]
-rightRS-
[var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
createDouble
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
d=createDouble(str)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
d=createDouble(str)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===Candidate===
-change-
insert
if(var0) {
        var1 = new Type0();
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 != null, this.var0 = (Type0)var1.method0(), other.properties]
-rightRS-
[!var0.method0(var1), null == var0 || str0.method0(var0), str0.method0(var0), !str0.method0(var0.method1()), str0.method0(var0.method1()), str0.method0(var0.method1()) && var0.method2(), var0 = str0.method0(((Type0)var1.method1()).method2()), !var0.method0(var1.method1(var2)), Type0 var0 = null;, var0.method0(str0), var0.method0(str0 + var1)]
result:fail
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
===buggy===
-statement-
Double d=createDouble(str);

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), var0.method0() == 0.0D && !var1]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
createInteger
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
createBigDecimal
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return createBigDecimal(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createBigDecimal(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createBigDecimal(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createBigDecimal(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createBigDecimal(numeric);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
return createBigDecimal(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createBigDecimal(numeric);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return createBigDecimal(numeric);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
return createBigDecimal(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
numeric
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
createInteger
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
return createInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
createLong
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return createLong(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createLong(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createLong(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createLong(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createLong(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
return createLong(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createLong(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return createLong(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
return createLong(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos < decPos || expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===buggy===
-statement-
if (expPos < decPos || expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos < decPos || expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
decPos
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
decPos
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
decPos
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos < decPos || expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos < decPos || expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos < decPos || expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos < decPos || expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos < decPos || expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos < decPos || expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (expPos < decPos || expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos < decPos || expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos < decPos || expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos < decPos || expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
expPos
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
expPos
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
decPos
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
createBigInteger
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
expPos
-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:InfixExpression{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:InfixExpression{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:InfixExpression{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length());
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1)]
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length());
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1)]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length());
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1)]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length());
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1)]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length());
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length());
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length());
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length());
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length());
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length());
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length());
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length());
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length());
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length());
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[Type0 var0;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===buggy===
-statement-
if (expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[Type0 var0;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[Type0 var0;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
if (expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > str.length()) {
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
expPos
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException(str + " is not a valid number.");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
substring
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
substring
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
dec
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
decPos + 1
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
decPos + 1
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
null
-context-
P:MethodInvocation{arguments},L:InfixExpression{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
null
-context-
P:MethodInvocation{arguments},L:InfixExpression{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
decPos + 1
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 && var1.method0()
-context-
P:MethodInvocation{arguments},L:InfixExpression{arguments},R:
-leftRS-
[for (Type0 var0: var1) {
            if (var2.method0()) {
              var2.method1(str0 + var0.method2() + str1);
            }
            Type1 var3 =
              var4.method3(var5, var0,
                var6.method4(var7) &&
                var0.method5(), var6.method4(
                    var8) && var0.method5());
            method6(var9, var3,
                var10, var6);

            if (method7(var5, var0)) {
              if (var2.method0()) {
                var2.method1(str2 + var0.method2());
              }
              method8(var9, var0, var10,
                  var6);
            }
          }, Type0 var0 =
            var1.method0(var2, var3,
              var4.method1(var5), 
              var4.method1(var6));, Type0 var0 =
              var1.method0(var2, var3,
                var4.method1(var5) &&
                var3.method2(), var4.method1(
                    var6) && var3.method2());, Type0 var0 =
          var1.method0(var2, var3,
            var4.method1(var5) && var3.method2(), 
            var4.method1(var6) && var3.method2());, !var0 || var1.method0(), boolean var0 = var1.method0().method1() == 1
                                                && !var2.method2();, var0 && var1.method0(), var0.method0() && method1(var1, var0).var2 > 0, var0.method0().method1(var1) && 
        var0.method2() && var2, !var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 && var1.method0()
-context-
P:MethodInvocation{arguments},L:InfixExpression{arguments},R:
-leftRS-
[for (Type0 var0: var1) {
            if (var2.method0()) {
              var2.method1(str0 + var0.method2() + str1);
            }
            Type1 var3 =
              var4.method3(var5, var0,
                var6.method4(var7) &&
                var0.method5(), var6.method4(
                    var8) && var0.method5());
            method6(var9, var3,
                var10, var6);

            if (method7(var5, var0)) {
              if (var2.method0()) {
                var2.method1(str2 + var0.method2());
              }
              method8(var9, var0, var10,
                  var6);
            }
          }, Type0 var0 =
            var1.method0(var2, var3,
              var4.method1(var5), 
              var4.method1(var6));, Type0 var0 =
              var1.method0(var2, var3,
                var4.method1(var5) &&
                var3.method2(), var4.method1(
                    var6) && var3.method2());, Type0 var0 =
          var1.method0(var2, var3,
            var4.method1(var5) && var3.method2(), 
            var4.method1(var6) && var3.method2());, !var0 || var1.method0(), boolean var0 = var1.method0().method1() == 1
                                                && !var2.method2();, var0 && var1.method0(), var0.method0() && method1(var1, var0).var2 > 0, var0.method0().method1(var1) && 
        var0.method2() && var2, !var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
decPos + 1
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:MethodInvocation{arguments},L:InfixExpression{arguments},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:MethodInvocation{arguments},L:InfixExpression{arguments},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
decPos + 1
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:InfixExpression{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:InfixExpression{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:InfixExpression{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:InfixExpression{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:InfixExpression{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
decPos
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
substring
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
substring
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
dec
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
decPos
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
mant
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, Type0 var0;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, Type0 var0;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, Type0 var0;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, Type0 var0;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
dec
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
exp
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return str0 + var0 +
        str1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(!var1.method1(),
        str0), !var0.method0(var1, var2).method1(), var0 == null || var0.method0(), var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return new Type0(var0, var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = var0, var0.method0(), method0(), Type0 var0 = method0(method1()).method2();, this.var0 = var1.method0().method1(var2, var3), var0 = var1.method0().method1(var2, var3), var0
      ? new Type0(new Type1(this, var1, var2))
      : method0().method1(var1, var2)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1.method1(var2))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return 0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1 + str1), var0.method0(str0
            + var1 + str1 + var2
            + str2
            + str3), var0.method0(str0
            +var1+str1+ var2.method1().var3 
            +str2), var0.method0(str0
          +var1+str1+var2
          +str2), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1), var0.method0(str0
            + str1 + var1 + str2), var0.method0(
              str0 + var1), var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return 0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1 + str1), var0.method0(str0
            + var1 + str1 + var2
            + str2
            + str3), var0.method0(str0
            +var1+str1+ var2.method1().var3 
            +str2), var0.method0(str0
          +var1+str1+var2
          +str2), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1), var0.method0(str0
            + str1 + var1 + str2), var0.method0(
              str0 + var1), var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return var0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return true;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1), var0.method0(str0), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0, var0.method0(), var0.method0(var1), var0.method0(Type0.class), Type0<Type1> var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return true;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1), var0.method0(str0), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0, var0.method0(), var0.method0(var1), var0.method0(Type0.class), Type0<Type1> var0 = var1.method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return var0 >0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[method0().method1(var0, null), method0(), method0() != null, var0 = method0(method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0 >0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[method0().method1(var0, null), method0(), method0() != null, var0 = method0(method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
break;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
break;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 1
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 1
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 1
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 1
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 1
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = true
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (dec == null && exp == null) {
  try {
    return createInteger(str);
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    return createLong(str);
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigInteger(str);
}
 else {
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
  try {
    Float f=createFloat(str);
    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
      return f;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  try {
    Double d=createDouble(str);
    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
      return d;
    }
  }
 catch (  NumberFormatException nfe) {
  }
  return createBigDecimal(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
if (expPos > -1) {
  if (expPos < decPos || expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  dec=str.substring(decPos + 1,expPos);
}
 else {
  dec=str.substring(decPos + 1);
}

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1())]
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===buggy===
-statement-
if (expPos > -1) {
  if (expPos < decPos || expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  dec=str.substring(decPos + 1,expPos);
}
 else {
  dec=str.substring(decPos + 1);
}

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1())]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1) {
  if (expPos < decPos || expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  dec=str.substring(decPos + 1,expPos);
}
 else {
  dec=str.substring(decPos + 1);
}

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1())]
===buggy===
-statement-
if (expPos > -1) {
  if (expPos < decPos || expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  dec=str.substring(decPos + 1,expPos);
}
 else {
  dec=str.substring(decPos + 1);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1) {
  if (expPos < decPos || expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  dec=str.substring(decPos + 1,expPos);
}
 else {
  dec=str.substring(decPos + 1);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1) {
  if (expPos < decPos || expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  dec=str.substring(decPos + 1,expPos);
}
 else {
  dec=str.substring(decPos + 1);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1) {
  if (expPos < decPos || expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  dec=str.substring(decPos + 1,expPos);
}
 else {
  dec=str.substring(decPos + 1);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1) {
  if (expPos < decPos || expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  dec=str.substring(decPos + 1,expPos);
}
 else {
  dec=str.substring(decPos + 1);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1) {
  if (expPos < decPos || expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  dec=str.substring(decPos + 1,expPos);
}
 else {
  dec=str.substring(decPos + 1);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (expPos > -1) {
  if (expPos < decPos || expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  dec=str.substring(decPos + 1,expPos);
}
 else {
  dec=str.substring(decPos + 1);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1) {
  if (expPos < decPos || expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  dec=str.substring(decPos + 1,expPos);
}
 else {
  dec=str.substring(decPos + 1);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1) {
  if (expPos < decPos || expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  dec=str.substring(decPos + 1,expPos);
}
 else {
  dec=str.substring(decPos + 1);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1) {
  if (expPos < decPos || expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  dec=str.substring(decPos + 1,expPos);
}
 else {
  dec=str.substring(decPos + 1);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[method0(var0)]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[method0(var0)]
-rightRS-
[]
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[method0(var0)]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[method0(var0)]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[method0(var0)]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[method0(var0)]
-rightRS-
[]
===buggy===
-statement-
NumberFormatException
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
        return null;
      }
-context-
P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
-leftRS-
[try {
      Type0 var0 = null;
      Type0 var1 = null;
      Type0 var2 = var3.method0();
      if (var2 != null) {
        int var4 = var2.method1(':');
        if (var4 != -1) {
          var0 = var2.method2(0, var4);
          var1 = var2.method2(var4 + 1);
        } else {
          var0 = var2;
        }
      }
      if (var0 == null) {
        var0 = method3().method4(str0);
      }
      if (var1 == null) {
        var1 = method3().method4(str1);
      }
      if (var0 == null && var1 == null) {
        throw new Type1(str2 +
                                           str3 +
                                           str4 +
                                           str5 +
                                           str6 +
                                           str7 +                         
                                           str8);
      } else if (var0 == null) {
        throw new Type1(str2 +
                                           str9 +
                                           str10 +
                                           str11);
      } else if (var1 == null) {
        throw new Type1(str2 +
                                           str12 +
                                           str13 +
                                           str14);         
      }
      Type2 var5 =
        new Type2(var0, var1);
      this.var6 = new Type3(var5);
    } catch (Type4 var7) {
      if (var7.method5() instanceof Type5) {
        throw (Type5) var7.method5();
      }
      throw new Type6(var7);
    }, try {
      return var0.method0(var1, var2);
    } catch (Type0 var3) {
      if (str0.method1(var3.method2())) {
        return null;
      }
    }, try {
        Type0 var0 = method0(var1);
        Type1[] var2 = var3.method1(var4, var0, null);
        Type2<Type3> var5 = new Type4<Type3>();
        for (int var6 = 0; var6 < var7; var6++) {
          var5.method2(method3(var2[var6].method4()));
        }
        return var5;
      } catch (Type5 var8) {
        if (var8.method5() instanceof Type6) {
          throw (Type6) var8.method5();
        }
        throw new Type7(var8);
      }, try {
        var0.method0(var1, var2);
      } catch (Type0 var3) {
        if (var3.method1() instanceof Type1) {
          throw (Type1) var3.method1();
        }
        throw new Type2(var3);
      }, try {
        Type0 var0 = var1.method0(var2, var3);
        return var0.method1();
      } catch (Type1 var4) {
        if (str0.method2(var4.method3())) {
          return null;
        }
        if (var4.method4() instanceof Type2) {
          throw (Type2) var4.method4();
        }
        throw new Type3(var4);
      }, try {
        return var0.method0(var1, str0);
      } catch (Type0 var2) {
        // Should never happen since every implementation of the Java Platform
        // is required to support UTF-8.
        // See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
        throw new Type1(var2);
      }, var0.method0(var1.method1()), str0.method0(var0.method1()), var0.method0() instanceof Type0, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[method0(var0)]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[method0(var0)]
-rightRS-
[]
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===Candidate===
-change-
insert
catch (Type0 var0) {
      }
-context-
P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
-leftRS-
[method0(), var0.method0()]
-rightRS-
[FSNamesystem.LOG, var0.method0(var1, var2), try {
        method0();
        method1();
        if (var0 != null) {
          var0.method2();
        }
      } catch (Type1 var1) {
        var2.method3(str0, var1);
        var3.method4(var2, var0);
      }, try {
            var0.method0(var1);
          } catch (Type0 var2) {
            // Deliberately ignore
          }, var0.method0(method1().method2() + str0, var1), var0.method0(str0, var1), this.var0 = new Type0(var1, this, var2), this.var0]
result:fail
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[method0(var0)]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[method0(var0)]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[method0(var0)]
-rightRS-
[]
===buggy===
-statement-
catch (NumberFormatException nfe) {
}

-leftRS-
[method0(var0)]
-rightRS-
[]
===buggy===
-statement-
NumberFormatException
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return null;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return d;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return d;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return d;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return d;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return d;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return d;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return d;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return d;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return d;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return f;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
isAllZeros
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
isAllZeros
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
allZeros=isAllZeros(mant) && isAllZeros(exp)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
allZeros=isAllZeros(mant) && isAllZeros(exp)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
isAllZeros(exp)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
isAllZeros(exp)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
isAllZeros(mant)
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
isAllZeros(mant)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
isAllZeros(mant)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
isAllZeros(mant)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(var2);]
-rightRS-
[Type0 var0 = var1.method0(var2);, boolean var0 =  var1.method0(var2);, var0.method0(var1), Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0)]
-rightRS-
[]
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0)]
-rightRS-
[]
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0)]
-rightRS-
[]
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0)]
-rightRS-
[]
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0)]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0)]
-rightRS-
[]
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0)]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0)]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0)]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0)]
-rightRS-
[]
===buggy===
-statement-
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0)]
-rightRS-
[]
===buggy===
-statement-
mant
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
exp
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
isDigit
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
lastChar
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = var1
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = str0 + var1 +
          str1;, Type0 var0 = str0 + var1 + str1;, Type0 var0 = str0 + var1;, var0.method0(str0 + var1 + str1), var0.method0(var1), var0.method0(str0 + var1 +
        str1), var0.method0(str0 + var1 +
          str1), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 +
          str2), var0.method0(str0 + var1.method1() +
            str1 + var2.method2() + str2), var0.method0(str0), var0.method0(str0 + var1 + str1 +
        var2 + str2), var0.method0(str0 +
                str1 +
                var1.method1(var2) + str2), var0.method0(str0 + var1 + str1 +
              str2), var0.method0(str0 + var1 +
              str1), var0.method0(str0 + var1 +
        str1 + var2)]
-rightRS-
[Type0 var0 = str0 + var1 +
          str1;, Type0 var0 = str0 + var1 + str1;, Type0 var0 = str0 + var1;, method0(new Type1(true, var0)), method0(new Type1(false, var0 + str0 +
          var1.method1(var2))), method0(new Type1(false, str0 + var0.method1(var1))), method0(new Type1(false, str0))]
result:fail
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return 0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1 + str1), var0.method0(str0
            + var1 + str1 + var2
            + str2
            + str3), var0.method0(str0
            +var1+str1+ var2.method1().var3 
            +str2), var0.method0(str0
          +var1+str1+var2
          +str2), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1), var0.method0(str0
            + str1 + var1 + str2), var0.method0(
              str0 + var1), var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return 0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1 + str1), var0.method0(str0
            + var1 + str1 + var2
            + str2
            + str3), var0.method0(str0
            +var1+str1+ var2.method1().var3 
            +str2), var0.method0(str0
          +var1+str1+var2
          +str2), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1), var0.method0(str0
            + str1 + var1 + str2), var0.method0(
              str0 + var1), var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1 - 1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[final int var0 = var1.method0().var2 - 1;, final int var0 = var1 - 1;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = var1 - 1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[final int var0 = var1.method0().var2 - 1;, final int var0 = var1 - 1;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = var1 - 1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[final int var0 = var1.method0().var2 - 1;, final int var0 = var1 - 1;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0>var1) {
      var0 = var1;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0>var1) {
      var0 = var1;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0>var1) {
      var0 = var1;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1[var2-1];
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1), var0.method0(str0
            + var1 + str1 + var2
            + str2
            + str3), var0.method0(str0
            +var1+str1+ var2.method1().var3 
            +str2), var0.method0(str0
          +var1+str1+var2
          +str2), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1), var0.method0(str0
            + str1 + var1 + str2), var0.method0(
              str0 + var1), var0.method0()]
result:fail
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return new Type0(var0, var1, var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = var0, var0.method0(), method0(), Type0 var0 = method0(method1()).method2();, this.var0 = var1.method0().method1(var2, var3), var0 = var1.method0().method1(var2, var3), var0
      ? new Type0(new Type1(this, var1, var2))
      : method0().method1(var1, var2)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return new Type0(var0, var1, var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = var0, var0.method0(), method0(), Type0 var0 = method0(method1()).method2();, this.var0 = var1.method0().method1(var2, var3), var0 = var1.method0().method1(var2, var3), var0
      ? new Type0(new Type1(this, var1, var2))
      : method0().method1(var1, var2)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!Character.isDigit(lastChar) && lastChar != '.') {
  if (expPos > -1 && expPos < str.length() - 1) {
    exp=str.substring(expPos + 1,str.length() - 1);
  }
 else {
    exp=null;
  }
  String numeric=str.substring(0,str.length() - 1);
  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
case 'l':
case 'L':
    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
      try {
        return createLong(numeric);
      }
 catch (      NumberFormatException nfe) {
      }
      return createBigInteger(numeric);
    }
  throw new NumberFormatException(str + " is not a valid number.");
case 'f':
case 'F':
try {
  Float f=NumberUtils.createFloat(numeric);
  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
    return f;
  }
}
 catch (NumberFormatException nfe) {
}
case 'd':
case 'D':
try {
Double d=NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
  return d;
}
}
 catch (NumberFormatException nfe) {
}
try {
return createBigDecimal(numeric);
}
 catch (NumberFormatException e) {
}
default :
throw new NumberFormatException(str + " is not a valid number.");
}
}
 else {
if (expPos > -1 && expPos < str.length() - 1) {
exp=str.substring(expPos + 1,str.length());
}
 else {
exp=null;
}
if (dec == null && exp == null) {
try {
return createInteger(str);
}
 catch (NumberFormatException nfe) {
}
try {
return createLong(str);
}
 catch (NumberFormatException nfe) {
}
return createBigInteger(str);
}
 else {
boolean allZeros=isAllZeros(mant) && isAllZeros(exp);
try {
Float f=createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
}
}
 catch (NumberFormatException nfe) {
}
try {
Double d=createDouble(str);
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
}
}
 catch (NumberFormatException nfe) {
}
return createBigDecimal(str);
}
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
startsWith
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
startsWith
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.startsWith("-0x")
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.startsWith("-0x")
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
str.startsWith("0x")
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.startsWith("0x")
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.startsWith("0x")
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.startsWith("0x")
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
"0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"0x"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"0x"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"0x"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
"0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"0x"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
"-0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"-0x"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"-0x"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"-0x"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
"-0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"-0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"-0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"-0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"-0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"-0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"-0x"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"-0x"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===Candidate===
-change-
insert
int var0 = var1.method0('-');
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0 var0 = (var1 > 1)? var2[1]:null;]
result:fail
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str.startsWith("0x") || str.startsWith("-0x")) {
  return createInteger(str);
}

-leftRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return createInteger(str);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"0x"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
str0
to
str0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"-0x"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
str0
to
str0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
expPos=str.indexOf('e') + str.indexOf('E') + 1
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
expPos=str.indexOf('e') + str.indexOf('E') + 1
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.indexOf('e')
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.indexOf('e')
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.indexOf('e')
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.indexOf('e')
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
var0 = var1.method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0(method1());, Type0 var0 = var1.method0();]
-rightRS-
[var0.method0(), var0.method0().method1() > 1, boolean var0 = var1.method0().method1() == 1
                                                && !var2.method2();, var0.method0().method1() == 1 && !var1, Type0 var0 = var1.method0(method1());, var0.method0(var1, var2, method1()), final Type0 var0 = var1.method0(method1());, var0.method0(method1(),
            var1.method2(var2),
            var1.method3(Type0.class),
            var1.method4(Type1.class),
            var1.method5(var3)), boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0().method1(0);]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, Type0 var0;, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
int expPos=str.indexOf('e') + str.indexOf('E') + 1;

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
lastChar=str.charAt(str.length() - 1)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
lastChar=str.charAt(str.length() - 1)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
charAt
-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
charAt
-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0('-');
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0 var0 = (var1 > 1)? var2[1]:null;]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
-rightRS-
[]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===buggy===
-statement-
char lastChar=str.charAt(str.length() - 1);

-leftRS-
[]
-rightRS-
[Type0 var0;]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
charAt
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str.charAt(i) != '0') {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str.charAt(i) != '0') {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = (var1 < var2 - 1);
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0().method1(var0, var1[++var2]), method0(), var0 = var1.method0(method1()), Type0 var0 = var1.method0(method1());, var0.method0(var1), var0[var1].method0(str0), var0.method0(str0), var0[var1].method0(str0) || (var0[var1].method0(str1)), Type0 var0 = var1[++var2];, for (Type0 var0 : var1) {
            var2.method0(var0);
          }, this.var0 = var0, for (int var0 = 0; var0 < var1; var0++) { // parse command line
      if (var2[var0].method0(str0)) {
        Type0 var3 = var2[++var0];
        var4 = new Type2(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str2)) {
        Type0 var3 = var2[++var0];
        var4 = new Type4(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str3)) {
        Type0 var3 = var2[++var0];
        var4 = new Type5(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str4)) {
        var4 = new Type6();
      } else if (var2[var0].method0(str5)) {
        method2().method3(var5, var2[++var0]);
      } else if (var2[var0].method0(str6)) {
        method2().method3(var6, var2[++var0]);
      } else if (var2[var0].method0(str7)) {
        var7 = true;
        method2().method3(var8, var2[++var0]);
      } else if (var2[var0].method0(str8)) {
        method2().method4(var9, true);
      } else if (var2[var0].method0(str9) || (var2[var0].method0(str10))) {
        var10 = true;
      } else if (var2[var0].method0(str1)) {
        method1();
        return -1;
      } else {
        method1();
        var11.method5(var12);
        return -1;
      }
    }, for(int var0=0; var0 < var1; ++var0) {
            var2.method0(var3.method1(var0) + str0 + var4[var0]);
          }, method0().method1(var0, true)]
result:fail
===Candidate===
-change-
insert
boolean var0 = (var1 < var2 - 1);
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0().method1(var0, var1[++var2]), method0(), var0 = var1.method0(method1()), Type0 var0 = var1.method0(method1());, var0.method0(var1), var0[var1].method0(str0), var0.method0(str0), var0[var1].method0(str0) || (var0[var1].method0(str1)), Type0 var0 = var1[++var2];, for (Type0 var0 : var1) {
            var2.method0(var0);
          }, this.var0 = var0, for (int var0 = 0; var0 < var1; var0++) { // parse command line
      if (var2[var0].method0(str0)) {
        Type0 var3 = var2[++var0];
        var4 = new Type2(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str2)) {
        Type0 var3 = var2[++var0];
        var4 = new Type4(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str3)) {
        Type0 var3 = var2[++var0];
        var4 = new Type5(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str4)) {
        var4 = new Type6();
      } else if (var2[var0].method0(str5)) {
        method2().method3(var5, var2[++var0]);
      } else if (var2[var0].method0(str6)) {
        method2().method3(var6, var2[++var0]);
      } else if (var2[var0].method0(str7)) {
        var7 = true;
        method2().method3(var8, var2[++var0]);
      } else if (var2[var0].method0(str8)) {
        method2().method4(var9, true);
      } else if (var2[var0].method0(str9) || (var2[var0].method0(str10))) {
        var10 = true;
      } else if (var2[var0].method0(str1)) {
        method1();
        return -1;
      } else {
        method1();
        var11.method5(var12);
        return -1;
      }
    }, for(int var0=0; var0 < var1; ++var0) {
            var2.method0(var3.method1(var0) + str0 + var4[var0]);
          }, method0().method1(var0, true)]
result:fail
===buggy===
-statement-
if (str.charAt(i) != '0') {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
if (str.charAt(i) != '0') {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str.charAt(i) != '0') {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str.charAt(i) != '0') {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str.charAt(i) != '0') {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.charAt(i)
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.charAt(i)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.charAt(i)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.charAt(i)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
i
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
valueOf
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Float.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
valueOf
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Double.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
decode
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Integer.decode(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
isBlank
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
isBlank
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isBlank(str)) {
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new NumberFormatException("A blank string is not a valid number");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
String numeric=str.substring(0,str.length() - 1);

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, Type0 var0;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
numeric=str.substring(0,str.length() - 1)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
numeric=str.substring(0,str.length() - 1)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
0
-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
update
0
to
1
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:InfixExpression{arguments}
-leftRS-
[]
-rightRS-
[long var0 = var1.method0(var2.method1());, var0.method0() > 4, int var0 = var1.method0();, var0 = var0.method0(0, var0.method1()-1), Type0 var0 = var1.method0();]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
String numeric=str.substring(0,str.length() - 1);

-leftRS-
[]
-rightRS-
[boolean var0 = method0(var1) && method0(var2);, Type0 var0;]
===buggy===
-statement-
String numeric=str.substring(0,str.length() - 1);

-leftRS-
[]
-rightRS-
[boolean var0 = method0(var1) && method0(var2);, Type0 var0;]
===buggy===
-statement-
String numeric=str.substring(0,str.length() - 1);

-leftRS-
[]
-rightRS-
[boolean var0 = method0(var1) && method0(var2);, Type0 var0;]
===buggy===
-statement-
String numeric=str.substring(0,str.length() - 1);

-leftRS-
[]
-rightRS-
[boolean var0 = method0(var1) && method0(var2);, Type0 var0;]
===buggy===
-statement-
String numeric=str.substring(0,str.length() - 1);

-leftRS-
[]
-rightRS-
[boolean var0 = method0(var1) && method0(var2);, Type0 var0;]
===buggy===
-statement-
String numeric=str.substring(0,str.length() - 1);

-leftRS-
[]
-rightRS-
[boolean var0 = method0(var1) && method0(var2);, Type0 var0;]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
String numeric=str.substring(0,str.length() - 1);

-leftRS-
[]
-rightRS-
[boolean var0 = method0(var1) && method0(var2);, Type0 var0;]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
String numeric=str.substring(0,str.length() - 1);

-leftRS-
[]
-rightRS-
[boolean var0 = method0(var1) && method0(var2);, Type0 var0;]
===buggy===
-statement-
String numeric=str.substring(0,str.length() - 1);

-leftRS-
[]
-rightRS-
[boolean var0 = method0(var1) && method0(var2);, Type0 var0;]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
String numeric=str.substring(0,str.length() - 1);

-leftRS-
[]
-rightRS-
[boolean var0 = method0(var1) && method0(var2);, Type0 var0;]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
String numeric=str.substring(0,str.length() - 1);

-leftRS-
[]
-rightRS-
[boolean var0 = method0(var1) && method0(var2);, Type0 var0;]
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
String numeric=str.substring(0,str.length() - 1);

-leftRS-
[]
-rightRS-
[boolean var0 = method0(var1) && method0(var2);, Type0 var0;]
===buggy===
-statement-
String numeric=str.substring(0,str.length() - 1);

-leftRS-
[]
-rightRS-
[boolean var0 = method0(var1) && method0(var2);, Type0 var0;]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
decPos=str.indexOf('.')
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
decPos=str.indexOf('.')
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[Type0 var0;]
-rightRS-
[]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
int decPos=str.indexOf('.');

-leftRS-
[]
-rightRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
createLong
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return createLong(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createLong(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createLong(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createLong(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createLong(numeric);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
return createLong(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return createLong(numeric);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return createLong(numeric);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:TryStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
return createLong(numeric);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
numeric
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
startsWith
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"--"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"--"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"--"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"--"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
"--"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"--"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"--"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"--"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"--"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"--"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"--"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"--"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str.startsWith("--")) {
  return null;
}

-leftRS-
[]
-rightRS-
[method0(var0), var0.method0(str0), var0.method0(str0) || var0.method0(str1)]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"--"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
str0
to
str0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length() - 1);
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0)]
===buggy===
-statement-
expPos
-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;]
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length() - 1);
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length() - 1);
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length() - 1);
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length() - 1);
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length() - 1);
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length() - 1);
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length() - 1);
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length() - 1);
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length() - 1);
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1 && expPos < str.length() - 1) {
  exp=str.substring(expPos + 1,str.length() - 1);
}
 else {
  exp=null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
for (int i=str.length() - 1; i >= 0; i--) {
  if (str.charAt(i) != '0') {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
for (int i=str.length() - 1; i >= 0; i--) {
  if (str.charAt(i) != '0') {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
for (int i=str.length() - 1; i >= 0; i--) {
  if (str.charAt(i) != '0') {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
for (int i=str.length() - 1; i >= 0; i--) {
  if (str.charAt(i) != '0') {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;]
===buggy===
-statement-
for (int i=str.length() - 1; i >= 0; i--) {
  if (str.charAt(i) != '0') {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
i
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1 - var2;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = var1 - var2;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str == null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str == null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, var0.method0(var1)]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str == null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str == null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str == null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str == null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str == null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[]
-rightRS-
[method0(var0), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1);, boolean var0 = method0(var1) && method0(var2);, Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var3), var0 = var1.method0(var2 + 1), var0 = var1.method0(0, var2), var0 = var1.method0(var2 + 1, var1.method1() - 1), var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0 = var1.method0(var2 + 1, var1.method1()), var0.method0() || (var0.method1() == 0.0F && !var1), var0.method0() || (var0.method1() == 0.0D && !var1), Type0 var0;, int var0 = var1.method0('e') + var1.method0('E') + 1;, try {
                        return method0(var0);
                    } catch (Type0 var1) {
                        // ignore the bad number
                    }, char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, var0.method0() == 0.0F && !var1, var0.method0() == 0.0D && !var1, try {
            return var0.method0(var1);
        } catch (Type0 var2) {
            return var3;
        }, try {
          return var0.method0(var1);
      } catch (Type0 var2) {
          return var3;
      }, try {
                            return method0(var0);
                        } catch (Type0 var1) {
                            //Too big for a long
                        }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0F && !var3))) {
                            //If it's too big for a float or the float value = 0 and the string
                            //has non-zeros in it, then float does not have the precision we want
                            return var0;
                        }

                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                        Type0 var0 = var1.method0(var2);
                        if (!(var0.method1() || (var0.method2() == 0.0D && !var3))) {
                            return var0;
                        }
                    } catch (Type1 var4) {
                        // ignore the bad number
                    }, try {
                    return method0(var0);
                } catch (Type0 var1) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0F && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, try {
                    Type0 var0 = method0(var1);
                    if (!(var0.method1() || (var0.method2() == 0.0D && !var2))) {
                        return var0;
                    }
                } catch (Type1 var3) {
                    // ignore the bad number
                }, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), var0.method0(var1) != '0']
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = var1.method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0(method1());, Type0 var0 = var1.method0();]
-rightRS-
[var0.method0(), var0.method0().method1() > 1, boolean var0 = var1.method0().method1() == 1
                                                && !var2.method2();, var0.method0().method1() == 1 && !var1, Type0 var0 = var1.method0(method1());, var0.method0(var1, var2, method1()), final Type0 var0 = var1.method0(method1());, var0.method0(method1(),
            var1.method2(var2),
            var1.method3(Type0.class),
            var1.method4(Type1.class),
            var1.method5(var3)), boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0().method1(0);]
result:fail
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1[var2-1];
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1), var0.method0(str0
            + var1 + str1 + var2
            + str2
            + str3), var0.method0(str0
            +var1+str1+ var2.method1().var3 
            +str2), var0.method0(str0
          +var1+str1+var2
          +str2), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1), var0.method0(str0
            + str1 + var1 + str2), var0.method0(
              str0 + var1), var0.method0()]
result:fail
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
if (decPos > -1) {
  if (expPos > -1) {
    if (expPos < decPos || expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    dec=str.substring(decPos + 1,expPos);
  }
 else {
    dec=str.substring(decPos + 1);
  }
  mant=str.substring(0,decPos);
}
 else {
  if (expPos > -1) {
    if (expPos > str.length()) {
      throw new NumberFormatException(str + " is not a valid number.");
    }
    mant=str.substring(0,expPos);
  }
 else {
    mant=str;
  }
  dec=null;
}

-leftRS-
[int var0 = var1.method0('.');, int var0 = var1.method0('e') + var1.method0('E') + 1;]
-rightRS-
[]
===buggy===
-statement-
BigInteger
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
null
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
null
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
this
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
this
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
!var0.method0(var1)
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[!var0.method0(var1), !var0.method0() || !var1.method1(var0), var0.method0(var1, var2.method1()), var0.method0(str0 + var1.method1() 
                + str1 + var2.method1()), new Type0(str0 + var0.method0() + str1  + 
            var1.method0() + str2), final Type0 var0 = var1.method0(var2, var3, var4);, var0.method0() && !var0.method1()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
this+var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0.class
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new BigInteger(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
BigDecimal
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
null
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
this
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
this
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
!var0.method0(var1)
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[!var0.method0(var1), !var0.method0() || !var1.method1(var0), var0.method0(var1, var2.method1()), var0.method0(str0 + var1.method1() 
                + str1 + var2.method1()), new Type0(str0 + var0.method0() + str1  + 
            var1.method0() + str2), final Type0 var0 = var1.method0(var2, var3, var4);, var0.method0() && !var0.method1()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
this+var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
this+var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0.class
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return new BigDecimal(str);

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
dec
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (expPos > -1) {
  if (expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  mant=str.substring(0,expPos);
}
 else {
  mant=str;
}

-leftRS-
[]
-rightRS-
[Type0 var0;]
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===Candidate===
-change-
insert
long var0 = var1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1;]
result:fail
===buggy===
-statement-
if (expPos > -1) {
  if (expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  mant=str.substring(0,expPos);
}
 else {
  mant=str;
}

-leftRS-
[]
-rightRS-
[Type0 var0;]
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1, var2);
-context-
P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = str0;, final Type0 var0 = new Type0(var1, var2, var3,
          var4, var5, var6, var7, var8);, var0.method0(var1, var2, null), var0.method0(var1.method1(), var1.method2(),
            var1.method3())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1) {
  if (expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  mant=str.substring(0,expPos);
}
 else {
  mant=str;
}

-leftRS-
[]
-rightRS-
[Type0 var0;]
===buggy===
-statement-
if (expPos > -1) {
  if (expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  mant=str.substring(0,expPos);
}
 else {
  mant=str;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1) {
  if (expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  mant=str.substring(0,expPos);
}
 else {
  mant=str;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1) {
  if (expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  mant=str.substring(0,expPos);
}
 else {
  mant=str;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = false
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1) {
  if (expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  mant=str.substring(0,expPos);
}
 else {
  mant=str;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1) {
  if (expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  mant=str.substring(0,expPos);
}
 else {
  mant=str;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1) {
  if (expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  mant=str.substring(0,expPos);
}
 else {
  mant=str;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (expPos > -1) {
  if (expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  mant=str.substring(0,expPos);
}
 else {
  mant=str;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1) {
  if (expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  mant=str.substring(0,expPos);
}
 else {
  mant=str;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (expPos > -1) {
  if (expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  mant=str.substring(0,expPos);
}
 else {
  mant=str;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:IfStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (expPos > -1) {
  if (expPos > str.length()) {
    throw new NumberFormatException(str + " is not a valid number.");
  }
  mant=str.substring(0,expPos);
}
 else {
  mant=str;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
mant
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
lastChar
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
charAt
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
isDigit
-leftRS-
[for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;, char var0 = var1.method0(var1.method1() - 1);, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
-rightRS-
[]
===buggy===
-statement-
isDigit
-leftRS-
[for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, int var0 = var1;, char var0 = var1.method0(var1.method1() - 1);, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0', !var0.method0(var1.method1(var2))]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(str.charAt(i))) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(str.charAt(i))) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = (var1 < var2 - 1);
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0().method1(var0, var1[++var2]), method0(), var0 = var1.method0(method1()), Type0 var0 = var1.method0(method1());, var0.method0(var1), var0[var1].method0(str0), var0.method0(str0), var0[var1].method0(str0) || (var0[var1].method0(str1)), Type0 var0 = var1[++var2];, for (Type0 var0 : var1) {
            var2.method0(var0);
          }, this.var0 = var0, for (int var0 = 0; var0 < var1; var0++) { // parse command line
      if (var2[var0].method0(str0)) {
        Type0 var3 = var2[++var0];
        var4 = new Type2(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str2)) {
        Type0 var3 = var2[++var0];
        var4 = new Type4(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str3)) {
        Type0 var3 = var2[++var0];
        var4 = new Type5(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str4)) {
        var4 = new Type6();
      } else if (var2[var0].method0(str5)) {
        method2().method3(var5, var2[++var0]);
      } else if (var2[var0].method0(str6)) {
        method2().method3(var6, var2[++var0]);
      } else if (var2[var0].method0(str7)) {
        var7 = true;
        method2().method3(var8, var2[++var0]);
      } else if (var2[var0].method0(str8)) {
        method2().method4(var9, true);
      } else if (var2[var0].method0(str9) || (var2[var0].method0(str10))) {
        var10 = true;
      } else if (var2[var0].method0(str1)) {
        method1();
        return -1;
      } else {
        method1();
        var11.method5(var12);
        return -1;
      }
    }, for(int var0=0; var0 < var1; ++var0) {
            var2.method0(var3.method1(var0) + str0 + var4[var0]);
          }, method0().method1(var0, true)]
result:fail
===Candidate===
-change-
insert
boolean var0 = (var1 < var2 - 1);
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0().method1(var0, var1[++var2]), method0(), var0 = var1.method0(method1()), Type0 var0 = var1.method0(method1());, var0.method0(var1), var0[var1].method0(str0), var0.method0(str0), var0[var1].method0(str0) || (var0[var1].method0(str1)), Type0 var0 = var1[++var2];, for (Type0 var0 : var1) {
            var2.method0(var0);
          }, this.var0 = var0, for (int var0 = 0; var0 < var1; var0++) { // parse command line
      if (var2[var0].method0(str0)) {
        Type0 var3 = var2[++var0];
        var4 = new Type2(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str2)) {
        Type0 var3 = var2[++var0];
        var4 = new Type4(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str3)) {
        Type0 var3 = var2[++var0];
        var4 = new Type5(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str4)) {
        var4 = new Type6();
      } else if (var2[var0].method0(str5)) {
        method2().method3(var5, var2[++var0]);
      } else if (var2[var0].method0(str6)) {
        method2().method3(var6, var2[++var0]);
      } else if (var2[var0].method0(str7)) {
        var7 = true;
        method2().method3(var8, var2[++var0]);
      } else if (var2[var0].method0(str8)) {
        method2().method4(var9, true);
      } else if (var2[var0].method0(str9) || (var2[var0].method0(str10))) {
        var10 = true;
      } else if (var2[var0].method0(str1)) {
        method1();
        return -1;
      } else {
        method1();
        var11.method5(var12);
        return -1;
      }
    }, for(int var0=0; var0 < var1; ++var0) {
            var2.method0(var3.method1(var0) + str0 + var4[var0]);
          }, method0().method1(var0, true)]
result:fail
===buggy===
-statement-
if (!Character.isDigit(str.charAt(i))) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
if (!Character.isDigit(str.charAt(i))) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (!Character.isDigit(str.charAt(i))) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(str.charAt(i))) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (!Character.isDigit(str.charAt(i))) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
i
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
valueOf
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return Long.valueOf(str);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
null
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
null
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
this
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
this
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0[var1]
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1]
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1]
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1]
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
this.method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
new Type0(var0)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
new Type0<Type1<?>>(var0)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0<Type1<?>>(var0)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0<Type1<?>>(var0)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0<Type1<?>>(var0)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0<Type1<?>>(var0)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0.class
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
new Type0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
isEmpty
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0']
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0']
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.isEmpty(str)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
for (int i=0; i < str.length(); i++) {
  if (!Character.isDigit(str.charAt(i))) {
    return false;
  }
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < str.length(); i++) {
  if (!Character.isDigit(str.charAt(i))) {
    return false;
  }
}

-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < str.length(); i++) {
  if (!Character.isDigit(str.charAt(i))) {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
for (int i=0; i < str.length(); i++) {
  if (!Character.isDigit(str.charAt(i))) {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < str.length(); i++) {
  if (!Character.isDigit(str.charAt(i))) {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
str.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
i
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1)]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (str == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
str == null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===buggy===
-statement-
return true;

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0']
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return true;

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0']
-rightRS-
[]
===buggy===
-statement-
return true;

-leftRS-
[char var0 = var1.method0(var1.method1() - 1);, var0 < var1 || var0 > var2.method0(), var0 > var1.method0(), var0 > -1 && var0 < var1.method0() - 1, var0 = var1.method0(var2 + 1, var1.method1() - 1), Type0 var0 = var1.method0(0, var1.method1() - 1);, var0 = var1.method0(var2 + 1, var1.method1()), for (int var0 = var1.method0() - 1; var0 >= 0; var0--) {
            if (var1.method1(var0) != '0') {
                return false;
            }
        }, var0.method0() > 0, var0 == 0, var0 < var1, var0 < var1.method0(), int var0 = var1;, !var0.method0(var1) && var1 != '.', !var0.method0(var1.method1(var2)), for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] < var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2.method0(var3[var0])) {
                return var4;
            }
            if (var3[var0] < var5) {
                var5 = var3[var0];
            }
        }, for (int var0 = 1; var0 < var1; var0++) {
            if (var2[var0] > var3) {
                var3 = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1.method0(); var0++) {
            if (!var2.method1(var1.method2(var0))) {
                return false;
            }
        }, int var0 = var1 + 2;, var0.method0(0) == '-' && method1(var0.method2(1)) || method1(var0), var0.method0(var1) != '0']
-rightRS-
[]
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Byte
-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Byte
-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Byte
-leftRS-
[var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Short
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Integer
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Double
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Float
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Integer
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Integer
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Short
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Short
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Double
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Double
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Float
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Float
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
Loading Class - org.apache.commons.lang3.StringUtils
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return true;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
charAt
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
isWhitespace
-leftRS-
[for (int var0 = 0; var0 < var1; var0++) {
            if ((var2.method0(var3.method1(var0)) == false)) {
                return false;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = method0(var3[var0], var4);
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var3.method0(true, var0, var4, 0, var4.method1())) {
                return var0;
            }
        }, for (int var0 = var1; var0 >= 0; var0--) {
            if (var2.method0(true, var0, var3, 0, var3.method1())) {
                return var0;
            }
        }, for (int var0 = 0; var0 <= var1; var0++) {
            if (var2.method0(true, var0, var3, 0, var4)) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0))) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var0 < var7 && var4 < var8 && var9.method1(var2)) {
                        // ch is a supplementary character
                        if (var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return var0;
                        }
                    } else {
                        return var0;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            boolean var4 = var5.method1(var2) >= 0;
            if (var0 + 1 < var1 && var6.method2(var2)) {
                char var7 = var3.method0(var0 + 1);
                if (var4 && var5.method1(var7) < 0) {
                    return var0;
                }
            } else {
                if (!var4) {
                    return var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var2);
            if (var4 == var6) {
                continue;
            }

            if (var4 < var7) {
                var7 = var4;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var2);
            if (var4 > var6) {
                var6 = var4;
            }
        }, int var0 = 0, var1 = 0;, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            if (var5[var0] != null) {
                var3.method0(var5[var0]);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (!var2.method0(var3.method1(var0))) {
                var4[var5++] = var3.method1(var0);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] != var3) {
                var2[var4++] = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] || var3[var0] == null ||
                var3[var0].method0() == 0 || var4[var0] == null)
            {
                continue;
            }
            var5 = var6.method1(var3[var0]);

            // see if we need to keep searching for this
            if (var5 == -1) {
                var2[var0] = true;
            } else {
                if (var7 == -1 || var5 < var7) {
                    var7 = var5;
                    var8 = var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null || var3[var0] == null) {
                continue;
            }
            int var4 = var3[var0].method0() - var2[var0].method0();
            if (var4 > 0) {
                var5 += 3 * var4; // assume 3 matches
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
                var3.method0(var4.method1(var0));
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] || var3[var0] == null ||
                    var3[var0].method0() == 0 || var4[var0] == null)
                {
                    continue;
                }
                var5 = var6.method1(var3[var0], var7);

                // see if we need to keep searching for this
                if (var5 == -1) {
                    var2[var0] = true;
                } else {
                    if (var8 == -1 || var5 < var8) {
                        var8 = var5;
                        var9 = var0;
                    }
                }
            }, for (int var0 = var1; var0 < var2; var0++) {
            var3.method0(var4.method1(var0));
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            int var4 = var5.method1(var2);
            if (var4 >= 0) {
                var6 = true;
                if (var4 < var7) {
                    var8.method2(var9.method0(var4));
                }
            } else {
                var8.method2(var2);
            }
        }, for (int var0 = var1 - 1; var0 >= 0; var0--) {
                    var2[var0] = var3;
                }, for (int var0 = var1 * 2 - 2; var0 >= 0; var0--, var0--) {
                    var2[var0] = var3;
                    var2[var0 + 1] = var4;
                }, for (int var0 = 0; var0 < var1; var0++) {
                    var2.method0(var3);
                }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = var3;
        }, for (int var0 = 0; var0 < var1; var0++) {
                var2[var0] = var3[var0 % var4];
            }, for (int var0 = 0; var0 < var1; var0++) {
            var2 = var3.method0(var0);
            if (var4.method1(var2)) {
                var2 = var4.method2(var2);
            } else if (var4.method3(var2)) {
                var2 = var4.method2(var2);
            } else if (var4.method4(var2)) {
                var2 = var4.method5(var2);
            }
            var5.method6(var2);
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false) {
                return false;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if ((var2.method0(var3.method1(var0)) == false) && (var3.method1(var0) != ' ')) {
                return false;
            }
        }, int var0;, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null) {
                var3 = true;
                var4 = 0;
            } else {
                var5 = false;
                var4 = var6.method0(var2[var0].method1(), var4);
                var7 = var6.method2(var2[var0].method1(), var7);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var4.method0(var5, var2)) {
                return true;
            }
        }, var0.method0(var1.method1(var2)) == false, (var0 != var1) && var2.method0(var3.method1(var0)), var0.method0(var1.method1(var2)) != var3, (var0 != 0) && var1.method0(var2.method1(var0 - 1)), var0.method0(var1.method1(var2 - 1)) != var3, var0.method0(var1.method1(var2)), char var0 = var1.method0(var2);, var0[var1 + 1] == var2.method0(var3 + 1), var0 < var1 && var2[var3 + 1] == var4.method0(var0 + 1), char var0 = var1.method0(var2 + 1);, var0.method0(var1) == var2, char var0 = var1.method0(0);, var0.method0(var1.method1(var2)) >= 0, !var0.method0(var1.method1(var2)), var0[var1++] = var2.method0(var3), var0.method0(var1 - 1) == var2, method0(var0, var1.method1(0)), char var0 = var1.method0(1);, method0(var0, var1, var2.method1(0)), new Type0(var0)
            .method0(var1.method1(var2.method2(0))), var0 = var1.method0(var2), var0.method0(var1) != ' ', var0.method0(var1) != var2.method0(var1), char var0 = var1[0].method0(var2);, var0[var1].method0(var2) != var3, var0 = var1.method0(var2-1), var0.method0(var1-1)==var2]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
isWhitespace
-leftRS-
[for (int var0 = 0; var0 < var1; var0++) {
            if ((var2.method0(var3.method1(var0)) == false)) {
                return false;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = method0(var3[var0], var4);
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var3.method0(true, var0, var4, 0, var4.method1())) {
                return var0;
            }
        }, for (int var0 = var1; var0 >= 0; var0--) {
            if (var2.method0(true, var0, var3, 0, var3.method1())) {
                return var0;
            }
        }, for (int var0 = 0; var0 <= var1; var0++) {
            if (var2.method0(true, var0, var3, 0, var4)) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0))) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var0 < var7 && var4 < var8 && var9.method1(var2)) {
                        // ch is a supplementary character
                        if (var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return var0;
                        }
                    } else {
                        return var0;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            boolean var4 = var5.method1(var2) >= 0;
            if (var0 + 1 < var1 && var6.method2(var2)) {
                char var7 = var3.method0(var0 + 1);
                if (var4 && var5.method1(var7) < 0) {
                    return var0;
                }
            } else {
                if (!var4) {
                    return var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var2);
            if (var4 == var6) {
                continue;
            }

            if (var4 < var7) {
                var7 = var4;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var2);
            if (var4 > var6) {
                var6 = var4;
            }
        }, int var0 = 0, var1 = 0;, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            if (var5[var0] != null) {
                var3.method0(var5[var0]);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (!var2.method0(var3.method1(var0))) {
                var4[var5++] = var3.method1(var0);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] != var3) {
                var2[var4++] = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] || var3[var0] == null ||
                var3[var0].method0() == 0 || var4[var0] == null)
            {
                continue;
            }
            var5 = var6.method1(var3[var0]);

            // see if we need to keep searching for this
            if (var5 == -1) {
                var2[var0] = true;
            } else {
                if (var7 == -1 || var5 < var7) {
                    var7 = var5;
                    var8 = var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null || var3[var0] == null) {
                continue;
            }
            int var4 = var3[var0].method0() - var2[var0].method0();
            if (var4 > 0) {
                var5 += 3 * var4; // assume 3 matches
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
                var3.method0(var4.method1(var0));
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] || var3[var0] == null ||
                    var3[var0].method0() == 0 || var4[var0] == null)
                {
                    continue;
                }
                var5 = var6.method1(var3[var0], var7);

                // see if we need to keep searching for this
                if (var5 == -1) {
                    var2[var0] = true;
                } else {
                    if (var8 == -1 || var5 < var8) {
                        var8 = var5;
                        var9 = var0;
                    }
                }
            }, for (int var0 = var1; var0 < var2; var0++) {
            var3.method0(var4.method1(var0));
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            int var4 = var5.method1(var2);
            if (var4 >= 0) {
                var6 = true;
                if (var4 < var7) {
                    var8.method2(var9.method0(var4));
                }
            } else {
                var8.method2(var2);
            }
        }, for (int var0 = var1 - 1; var0 >= 0; var0--) {
                    var2[var0] = var3;
                }, for (int var0 = var1 * 2 - 2; var0 >= 0; var0--, var0--) {
                    var2[var0] = var3;
                    var2[var0 + 1] = var4;
                }, for (int var0 = 0; var0 < var1; var0++) {
                    var2.method0(var3);
                }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = var3;
        }, for (int var0 = 0; var0 < var1; var0++) {
                var2[var0] = var3[var0 % var4];
            }, for (int var0 = 0; var0 < var1; var0++) {
            var2 = var3.method0(var0);
            if (var4.method1(var2)) {
                var2 = var4.method2(var2);
            } else if (var4.method3(var2)) {
                var2 = var4.method2(var2);
            } else if (var4.method4(var2)) {
                var2 = var4.method5(var2);
            }
            var5.method6(var2);
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false) {
                return false;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if ((var2.method0(var3.method1(var0)) == false) && (var3.method1(var0) != ' ')) {
                return false;
            }
        }, int var0;, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null) {
                var3 = true;
                var4 = 0;
            } else {
                var5 = false;
                var4 = var6.method0(var2[var0].method1(), var4);
                var7 = var6.method2(var2[var0].method1(), var7);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var4.method0(var5, var2)) {
                return true;
            }
        }, var0.method0(var1.method1(var2)) == false, (var0 != var1) && var2.method0(var3.method1(var0)), var0.method0(var1.method1(var2)) != var3, (var0 != 0) && var1.method0(var2.method1(var0 - 1)), var0.method0(var1.method1(var2 - 1)) != var3, var0.method0(var1.method1(var2)), char var0 = var1.method0(var2);, var0[var1 + 1] == var2.method0(var3 + 1), var0 < var1 && var2[var3 + 1] == var4.method0(var0 + 1), char var0 = var1.method0(var2 + 1);, var0.method0(var1) == var2, char var0 = var1.method0(0);, var0.method0(var1.method1(var2)) >= 0, !var0.method0(var1.method1(var2)), var0[var1++] = var2.method0(var3), var0.method0(var1 - 1) == var2, method0(var0, var1.method1(0)), char var0 = var1.method0(1);, method0(var0, var1, var2.method1(0)), new Type0(var0)
            .method0(var1.method1(var2.method2(0))), var0 = var1.method0(var2), var0.method0(var1) != ' ', var0.method0(var1) != var2.method0(var1), char var0 = var1[0].method0(var2);, var0[var1].method0(var2) != var3, var0 = var1.method0(var2-1), var0.method0(var1-1)==var2]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
var0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if ((Character.isWhitespace(cs.charAt(i)) == false)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0().method1();
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(var2);, Type0 var0 = new Type0(var1);, this.var0 = var0]
-rightRS-
[var0.method0(var1.method1()), var0.method0(), try {
          Type0 var0 = new Type0(new Type1(
              var1, var2, var3), 0);
          var4.method0(str0 + var0);

          Type2 var5 = new Type2(var6.method1(),
              var0, var3, var7.method2(), 1);
          var5.method3(var8.method4().
              method5());
          method6(var9, var5, var10);
          var5.method7(var11);

          if (!Type3.this.method8()) {
            var5.method9(var12.method1());
            var10.method3(var5.method10());
            var5.method11(var10);
            var5.method12(var10);
            try {
              var13.method13();
              var14.method14(var5.method15());
              var5.method16(var10, Type3.this);
              var14.method17(var5.method15());
            } finally {
              var13.method18();
            }

            var4.method0(str1 + var0);
          } else {
            throw new Type4();
          }
        } catch (Type5 var15) {
          // store this to be rethrown in the initial thread context.
          this.var16 = var15;
        }, try {
        Type0[] var0 = 
          var1.method0(var2, var3, var4, var5);

        int var6 = var7.method1();
        var8.method2(var9);
        var10.method3(1.0f);

        Type1<Type2, Type3> var11 =
            var12.method4(new Type4<Type2, Type3>());
        
        Type5<Type6> var13 = method5(
            var0, var2, var11);
              
        method6(var13.method7(), var6);
        Type8 var14 = method8();
        method9(var13, var14, str0);

        try {
          if (var6 > 0) {
            Type5<Type6> var15 = method10(
                var2, var11);
            Type8 var16 = method11();
            method9(var15, var16, str1);
          }
        } finally {
          for (Type3 var17 : var11.method12()) {
            var17.method13();
          }
        }
        // delete the temporary directory in output directory
        var8.method14(var9);
        var10.method15(1.0f);

        if (var18) {
          this.var10.method16(var19);
        } else {
          this.var10.method16(var20);
        }

        var21.method17(var7, var10);
      } catch (Type9 var22) {
        try {
          var8.method18(var9, 
            var23);
        } catch (Type10 var24) {
          var25.method19(str2 + var26);
        }
        var10.method15(1.0f);
        if (var18) {
          this.var10.method16(var19);
        } else {
          this.var10.method16(var27);
        }
        var25.method20(var26, var22);

        var21.method17(var7, var10);

      } finally {
        try {
          var28.method21(var29.method22(), true);  // delete submit dir
          var3.method21(var30, true);              // delete local copy
          // Cleanup distributed cache
          var31.method23();
        } catch (Type10 var32) {
          var25.method20(str3+var26+str4+var32);
        }
      }, this.var0 = var1.method0(new Type0(
          new Type0(var2.method1(var3), var4), var5.method2())), var0 = new Type0(var1.method0(), var2, var3.method1(), 
                               str0, var1.method2()), var0 = new Type0(var1, 0.0f, 0.0f, var2, 
          var3.method0(), var3.method1(), var3.method2(), 
          var3.method3().method4()), Type0 var0 = new Type0(var1.method0(), var2, var3,
            var4.method1(), 1);, Type0 var0 = new Type0(var1.method0(),
              var2, var3, var4.method1(), 1);, var0.method0().method1(), var0.method0(var1).method1(), var0.method0(new Type0(var1, var2+str0)).method1(), Type0 var0 = var1.method0().method1();, var0.method0(var1, var2.method1()), Type0 var0 = var1.method0() + var2 + var3;, this.var0 = var0, int var0 = 0;, Type0 var0 =
            new Type0(var1, var2, 0);]
result:fail
===buggy===
-statement-
if ((Character.isWhitespace(cs.charAt(i)) == false)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = (var1 < var2 - 1);
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0().method1(var0, var1[++var2]), method0(), var0 = var1.method0(method1()), Type0 var0 = var1.method0(method1());, var0.method0(var1), var0[var1].method0(str0), var0.method0(str0), var0[var1].method0(str0) || (var0[var1].method0(str1)), Type0 var0 = var1[++var2];, for (Type0 var0 : var1) {
            var2.method0(var0);
          }, this.var0 = var0, for (int var0 = 0; var0 < var1; var0++) { // parse command line
      if (var2[var0].method0(str0)) {
        Type0 var3 = var2[++var0];
        var4 = new Type2(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str2)) {
        Type0 var3 = var2[++var0];
        var4 = new Type4(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str3)) {
        Type0 var3 = var2[++var0];
        var4 = new Type5(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str4)) {
        var4 = new Type6();
      } else if (var2[var0].method0(str5)) {
        method2().method3(var5, var2[++var0]);
      } else if (var2[var0].method0(str6)) {
        method2().method3(var6, var2[++var0]);
      } else if (var2[var0].method0(str7)) {
        var7 = true;
        method2().method3(var8, var2[++var0]);
      } else if (var2[var0].method0(str8)) {
        method2().method4(var9, true);
      } else if (var2[var0].method0(str9) || (var2[var0].method0(str10))) {
        var10 = true;
      } else if (var2[var0].method0(str1)) {
        method1();
        return -1;
      } else {
        method1();
        var11.method5(var12);
        return -1;
      }
    }, for(int var0=0; var0 < var1; ++var0) {
            var2.method0(var3.method1(var0) + str0 + var4[var0]);
          }, method0().method1(var0, true)]
result:fail
===Candidate===
-change-
insert
boolean var0 = (var1 < var2 - 1);
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0().method1(var0, var1[++var2]), method0(), var0 = var1.method0(method1()), Type0 var0 = var1.method0(method1());, var0.method0(var1), var0[var1].method0(str0), var0.method0(str0), var0[var1].method0(str0) || (var0[var1].method0(str1)), Type0 var0 = var1[++var2];, for (Type0 var0 : var1) {
            var2.method0(var0);
          }, this.var0 = var0, for (int var0 = 0; var0 < var1; var0++) { // parse command line
      if (var2[var0].method0(str0)) {
        Type0 var3 = var2[++var0];
        var4 = new Type2(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str2)) {
        Type0 var3 = var2[++var0];
        var4 = new Type4(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str3)) {
        Type0 var3 = var2[++var0];
        var4 = new Type5(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str4)) {
        var4 = new Type6();
      } else if (var2[var0].method0(str5)) {
        method2().method3(var5, var2[++var0]);
      } else if (var2[var0].method0(str6)) {
        method2().method3(var6, var2[++var0]);
      } else if (var2[var0].method0(str7)) {
        var7 = true;
        method2().method3(var8, var2[++var0]);
      } else if (var2[var0].method0(str8)) {
        method2().method4(var9, true);
      } else if (var2[var0].method0(str9) || (var2[var0].method0(str10))) {
        var10 = true;
      } else if (var2[var0].method0(str1)) {
        method1();
        return -1;
      } else {
        method1();
        var11.method5(var12);
        return -1;
      }
    }, for(int var0=0; var0 < var1; ++var0) {
            var2.method0(var3.method1(var0) + str0 + var4[var0]);
          }, method0().method1(var0, true)]
result:fail
===buggy===
-statement-
if ((Character.isWhitespace(cs.charAt(i)) == false)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
if ((Character.isWhitespace(cs.charAt(i)) == false)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
if ((Character.isWhitespace(cs.charAt(i)) == false)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if ((Character.isWhitespace(cs.charAt(i)) == false)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if ((Character.isWhitespace(cs.charAt(i)) == false)) {
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
Character.isWhitespace(cs.charAt(i))
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Character.isWhitespace(cs.charAt(i))
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Character.isWhitespace(cs.charAt(i))
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Character.isWhitespace(cs.charAt(i))
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return false;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
i
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
cs
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
cs
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
cs.length()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
cs.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
cs.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
cs.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
cs
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
0
-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, var0.method0() - var1.method0(), var0.method0(true, var1, var2, 0, var2.method1()), method0(var0, var1, var0.method1()), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= (var1 + var2), var0.method0(var1 + var2.method1()), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0[var1] == null ? 16 : var0[var1].method0().method1(), (var0[var1] == null ? 16 : var0[var1].method0().method1())
                        + var2.method1(), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
            var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1, var0 = var1.method0() - (var2 - 3), (var0 + (var1 - 3)) < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < (var2.method0()+2), var0.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0() > var1.method0(), var0.method0(var1, 0, var2, 0, var2.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, 0, var3.method1())]
-rightRS-
[]
===Candidate===
-change-
update
0
to
2
-context-
P:InfixExpression{rightOperand},L:MethodInvocation{leftOperand},R:
-leftRS-
[var0.method0() <= 0, var0.method0() == 1, Type0<Type1> var0 =
      var1.method0(var2);, Type0<Type1> var0 = method0(var1);]
-rightRS-
[]
result:fail
===buggy===
-statement-
0
-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, var0.method0() - var1.method0(), var0.method0(true, var1, var2, 0, var2.method1()), method0(var0, var1, var0.method1()), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= (var1 + var2), var0.method0(var1 + var2.method1()), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0[var1] == null ? 16 : var0[var1].method0().method1(), (var0[var1] == null ? 16 : var0[var1].method0().method1())
                        + var2.method1(), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
            var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1, var0 = var1.method0() - (var2 - 3), (var0 + (var1 - 3)) < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < (var2.method0()+2), var0.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0() > var1.method0(), var0.method0(var1, 0, var2, 0, var2.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, 0, var3.method1())]
-rightRS-
[]
===Candidate===
-change-
update
0
to
127
-context-
P:InfixExpression{rightOperand},L:MethodInvocation{leftOperand},R:
-leftRS-
[var0.method0(var1, var2) != 0, Type0 var0 = new Type0(this);, Type0<Type1> var0 = new Type2<Type1>();]
-rightRS-
[]
result:fail
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null)
      return false;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
for (Type0 var0 : var1) {
      if (var0 instanceof Type1) {
        return (Type1) var0;
      }
    }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
for (Type0 var0 : var1) {
      if (var0 instanceof Type1) {
        return (Type1) var0;
      }
    }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
for (Type0 var0 : var1) {
      if (var0 instanceof Type1) {
        return (Type1) var0;
      }
    }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
for (Type0 var0 : var1) {
      if (var0 instanceof Type1) {
        return (Type1) var0;
      }
    }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
for (Type0 var0 : var1) {
      if (var0 instanceof Type1) {
        return (Type1) var0;
      }
    }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return cs == null || cs.length() == 0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
cs
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
cs
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
(strLen=cs.length())
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
(var0 ? 1 << 10 : 0)
-context-
P:InfixExpression{leftOperand},L:,R:ParenthesizedExpression{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 ? 1 << 10 : 0)
-context-
P:InfixExpression{leftOperand},L:,R:ParenthesizedExpression{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 ? 1 << 10 : 0)
-context-
P:InfixExpression{leftOperand},L:,R:ParenthesizedExpression{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 ? 1 << 10 : 0)
-context-
P:InfixExpression{leftOperand},L:,R:ParenthesizedExpression{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 ? 1 << 10 : 0)
-context-
P:InfixExpression{leftOperand},L:,R:ParenthesizedExpression{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[]
-rightRS-
[for (int var0 = 0; var0 < var1; var0++) {
            if ((var2.method0(var3.method1(var0)) == false)) {
                return false;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = method0(var3[var0], var4);
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var3.method0(true, var0, var4, 0, var4.method1())) {
                return var0;
            }
        }, for (int var0 = var1; var0 >= 0; var0--) {
            if (var2.method0(true, var0, var3, 0, var3.method1())) {
                return var0;
            }
        }, for (int var0 = 0; var0 <= var1; var0++) {
            if (var2.method0(true, var0, var3, 0, var4)) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0))) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var0 < var7 && var4 < var8 && var9.method1(var2)) {
                        // ch is a supplementary character
                        if (var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return var0;
                        }
                    } else {
                        return var0;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            boolean var4 = var5.method1(var2) >= 0;
            if (var0 + 1 < var1 && var6.method2(var2)) {
                char var7 = var3.method0(var0 + 1);
                if (var4 && var5.method1(var7) < 0) {
                    return var0;
                }
            } else {
                if (!var4) {
                    return var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var2);
            if (var4 == var6) {
                continue;
            }

            if (var4 < var7) {
                var7 = var4;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var2);
            if (var4 > var6) {
                var6 = var4;
            }
        }, int var0 = 0, var1 = 0;, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            if (var5[var0] != null) {
                var3.method0(var5[var0]);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (!var2.method0(var3.method1(var0))) {
                var4[var5++] = var3.method1(var0);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] != var3) {
                var2[var4++] = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] || var3[var0] == null ||
                var3[var0].method0() == 0 || var4[var0] == null)
            {
                continue;
            }
            var5 = var6.method1(var3[var0]);

            // see if we need to keep searching for this
            if (var5 == -1) {
                var2[var0] = true;
            } else {
                if (var7 == -1 || var5 < var7) {
                    var7 = var5;
                    var8 = var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null || var3[var0] == null) {
                continue;
            }
            int var4 = var3[var0].method0() - var2[var0].method0();
            if (var4 > 0) {
                var5 += 3 * var4; // assume 3 matches
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
                var3.method0(var4.method1(var0));
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] || var3[var0] == null ||
                    var3[var0].method0() == 0 || var4[var0] == null)
                {
                    continue;
                }
                var5 = var6.method1(var3[var0], var7);

                // see if we need to keep searching for this
                if (var5 == -1) {
                    var2[var0] = true;
                } else {
                    if (var8 == -1 || var5 < var8) {
                        var8 = var5;
                        var9 = var0;
                    }
                }
            }, for (int var0 = var1; var0 < var2; var0++) {
            var3.method0(var4.method1(var0));
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            int var4 = var5.method1(var2);
            if (var4 >= 0) {
                var6 = true;
                if (var4 < var7) {
                    var8.method2(var9.method0(var4));
                }
            } else {
                var8.method2(var2);
            }
        }, for (int var0 = var1 - 1; var0 >= 0; var0--) {
                    var2[var0] = var3;
                }, for (int var0 = var1 * 2 - 2; var0 >= 0; var0--, var0--) {
                    var2[var0] = var3;
                    var2[var0 + 1] = var4;
                }, for (int var0 = 0; var0 < var1; var0++) {
                    var2.method0(var3);
                }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = var3;
        }, for (int var0 = 0; var0 < var1; var0++) {
                var2[var0] = var3[var0 % var4];
            }, for (int var0 = 0; var0 < var1; var0++) {
            var2 = var3.method0(var0);
            if (var4.method1(var2)) {
                var2 = var4.method2(var2);
            } else if (var4.method3(var2)) {
                var2 = var4.method2(var2);
            } else if (var4.method4(var2)) {
                var2 = var4.method5(var2);
            }
            var5.method6(var2);
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false) {
                return false;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if ((var2.method0(var3.method1(var0)) == false) && (var3.method1(var0) != ' ')) {
                return false;
            }
        }, int var0;, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null) {
                var3 = true;
                var4 = 0;
            } else {
                var5 = false;
                var4 = var6.method0(var2[var0].method1(), var4);
                var7 = var6.method2(var2[var0].method1(), var7);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var4.method0(var5, var2)) {
                return true;
            }
        }, var0.method0(var1.method1(var2)) == false, (var0 != var1) && var2.method0(var3.method1(var0)), (var0 != 0) && var1.method0(var2.method1(var0 - 1)), var0.method0(var1.method1(var2)), !var0.method0(var1.method1(var2)), var0.method0(var1.method1(var2)) != var3, var0.method0(var1.method1(var2 - 1)) != var3, char var0 = var1.method0(var2);, var0[var1 + 1] == var2.method0(var3 + 1), var0 < var1 && var2[var3 + 1] == var4.method0(var0 + 1), char var0 = var1.method0(var2 + 1);, var0.method0(var1) == var2, char var0 = var1.method0(0);, var0.method0(var1.method1(var2)) >= 0, var0[var1++] = var2.method0(var3), var0.method0(var1 - 1) == var2, method0(var0, var1.method1(0)), char var0 = var1.method0(1);, method0(var0, var1, var2.method1(0)), new Type0(var0)
            .method0(var1.method1(var2.method2(0))), var0 = var1.method0(var2), var0.method0(var1) != ' ', var0.method0(var1) != var2.method0(var1), char var0 = var1[0].method0(var2);, var0[var1].method0(var2) != var3, var0 = var1.method0(var2-1), var0.method0(var1-1)==var2]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[]
-rightRS-
[for (int var0 = 0; var0 < var1; var0++) {
            if ((var2.method0(var3.method1(var0)) == false)) {
                return false;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = method0(var3[var0], var4);
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var3.method0(true, var0, var4, 0, var4.method1())) {
                return var0;
            }
        }, for (int var0 = var1; var0 >= 0; var0--) {
            if (var2.method0(true, var0, var3, 0, var3.method1())) {
                return var0;
            }
        }, for (int var0 = 0; var0 <= var1; var0++) {
            if (var2.method0(true, var0, var3, 0, var4)) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0))) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var0 < var7 && var4 < var8 && var9.method1(var2)) {
                        // ch is a supplementary character
                        if (var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return var0;
                        }
                    } else {
                        return var0;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            boolean var4 = var5.method1(var2) >= 0;
            if (var0 + 1 < var1 && var6.method2(var2)) {
                char var7 = var3.method0(var0 + 1);
                if (var4 && var5.method1(var7) < 0) {
                    return var0;
                }
            } else {
                if (!var4) {
                    return var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var2);
            if (var4 == var6) {
                continue;
            }

            if (var4 < var7) {
                var7 = var4;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var2);
            if (var4 > var6) {
                var6 = var4;
            }
        }, int var0 = 0, var1 = 0;, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            if (var5[var0] != null) {
                var3.method0(var5[var0]);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (!var2.method0(var3.method1(var0))) {
                var4[var5++] = var3.method1(var0);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] != var3) {
                var2[var4++] = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] || var3[var0] == null ||
                var3[var0].method0() == 0 || var4[var0] == null)
            {
                continue;
            }
            var5 = var6.method1(var3[var0]);

            // see if we need to keep searching for this
            if (var5 == -1) {
                var2[var0] = true;
            } else {
                if (var7 == -1 || var5 < var7) {
                    var7 = var5;
                    var8 = var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null || var3[var0] == null) {
                continue;
            }
            int var4 = var3[var0].method0() - var2[var0].method0();
            if (var4 > 0) {
                var5 += 3 * var4; // assume 3 matches
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
                var3.method0(var4.method1(var0));
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] || var3[var0] == null ||
                    var3[var0].method0() == 0 || var4[var0] == null)
                {
                    continue;
                }
                var5 = var6.method1(var3[var0], var7);

                // see if we need to keep searching for this
                if (var5 == -1) {
                    var2[var0] = true;
                } else {
                    if (var8 == -1 || var5 < var8) {
                        var8 = var5;
                        var9 = var0;
                    }
                }
            }, for (int var0 = var1; var0 < var2; var0++) {
            var3.method0(var4.method1(var0));
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            int var4 = var5.method1(var2);
            if (var4 >= 0) {
                var6 = true;
                if (var4 < var7) {
                    var8.method2(var9.method0(var4));
                }
            } else {
                var8.method2(var2);
            }
        }, for (int var0 = var1 - 1; var0 >= 0; var0--) {
                    var2[var0] = var3;
                }, for (int var0 = var1 * 2 - 2; var0 >= 0; var0--, var0--) {
                    var2[var0] = var3;
                    var2[var0 + 1] = var4;
                }, for (int var0 = 0; var0 < var1; var0++) {
                    var2.method0(var3);
                }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = var3;
        }, for (int var0 = 0; var0 < var1; var0++) {
                var2[var0] = var3[var0 % var4];
            }, for (int var0 = 0; var0 < var1; var0++) {
            var2 = var3.method0(var0);
            if (var4.method1(var2)) {
                var2 = var4.method2(var2);
            } else if (var4.method3(var2)) {
                var2 = var4.method2(var2);
            } else if (var4.method4(var2)) {
                var2 = var4.method5(var2);
            }
            var5.method6(var2);
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false) {
                return false;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if ((var2.method0(var3.method1(var0)) == false) && (var3.method1(var0) != ' ')) {
                return false;
            }
        }, int var0;, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null) {
                var3 = true;
                var4 = 0;
            } else {
                var5 = false;
                var4 = var6.method0(var2[var0].method1(), var4);
                var7 = var6.method2(var2[var0].method1(), var7);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var4.method0(var5, var2)) {
                return true;
            }
        }, var0.method0(var1.method1(var2)) == false, (var0 != var1) && var2.method0(var3.method1(var0)), (var0 != 0) && var1.method0(var2.method1(var0 - 1)), var0.method0(var1.method1(var2)), !var0.method0(var1.method1(var2)), var0.method0(var1.method1(var2)) != var3, var0.method0(var1.method1(var2 - 1)) != var3, char var0 = var1.method0(var2);, var0[var1 + 1] == var2.method0(var3 + 1), var0 < var1 && var2[var3 + 1] == var4.method0(var0 + 1), char var0 = var1.method0(var2 + 1);, var0.method0(var1) == var2, char var0 = var1.method0(0);, var0.method0(var1.method1(var2)) >= 0, var0[var1++] = var2.method0(var3), var0.method0(var1 - 1) == var2, method0(var0, var1.method1(0)), char var0 = var1.method0(1);, method0(var0, var1, var2.method1(0)), new Type0(var0)
            .method0(var1.method1(var2.method2(0))), var0 = var1.method0(var2), var0.method0(var1) != ' ', var0.method0(var1) != var2.method0(var1), char var0 = var1[0].method0(var2);, var0[var1].method0(var2) != var3, var0 = var1.method0(var2-1), var0.method0(var1-1)==var2]
===buggy===
-statement-
strLen
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
cs
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0[] = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
-rightRS-
[final Type0 var0 = var1.method0(
          var2.method1(var3, false), var3);, final Type0 var0 = var1.method0(
         var2.method1(var3, true), var3);, var0.method0() != null, var0 = method0(var1), var0.method0(var1.method1()), var0.method0().method1(), this.var0 = var0, this.var0, final Type0 var0
            = var1.method0(var2, var3);, var0.method0(var1.method1(0), var2), Type0 var0 = var1.method0(var2.method1(0), var3);, this.var0.method0(), var0.method0(), Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, int var0 = var1.method0();, var0 ? new Type0(var1)
          : var2 ? new Type1(var1)
          : var1, var0 instanceof Type0, Type0 var0 = 
            (Type0) var1;, this.var0.method0().method1(
              var1), var0.method0(var1,
            var2, var3, this)]
result:fail
===Candidate===
-change-
insert
Type0 var0[] = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
-rightRS-
[final Type0 var0 = var1.method0(
          var2.method1(var3, false), var3);, final Type0 var0 = var1.method0(
         var2.method1(var3, true), var3);, var0.method0() != null, var0 = method0(var1), var0.method0(var1.method1()), var0.method0().method1(), this.var0 = var0, this.var0, final Type0 var0
            = var1.method0(var2, var3);, var0.method0(var1.method1(0), var2), Type0 var0 = var1.method0(var2.method1(0), var3);, this.var0.method0(), var0.method0(), Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, int var0 = var1.method0();, var0 ? new Type0(var1)
          : var2 ? new Type1(var1)
          : var1, var0 instanceof Type0, Type0 var0 = 
            (Type0) var1;, this.var0.method0().method1(
              var1), var0.method0(var1,
            var2, var3, this)]
result:fail
===Candidate===
-change-
insert
Type0 var0[] = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
-rightRS-
[final Type0 var0 = var1.method0(
          var2.method1(var3, false), var3);, final Type0 var0 = var1.method0(
         var2.method1(var3, true), var3);, var0.method0() != null, var0 = method0(var1), var0.method0(var1.method1()), var0.method0().method1(), this.var0 = var0, this.var0, final Type0 var0
            = var1.method0(var2, var3);, var0.method0(var1.method1(0), var2), Type0 var0 = var1.method0(var2.method1(0), var3);, this.var0.method0(), var0.method0(), Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, int var0 = var1.method0();, var0 ? new Type0(var1)
          : var2 ? new Type1(var1)
          : var1, var0 instanceof Type0, Type0 var0 = 
            (Type0) var1;, this.var0.method0().method1(
              var1), var0.method0(var1,
            var2, var3, this)]
result:fail
===Candidate===
-change-
insert
Type0 var0[] = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
-rightRS-
[final Type0 var0 = var1.method0(
          var2.method1(var3, false), var3);, final Type0 var0 = var1.method0(
         var2.method1(var3, true), var3);, var0.method0() != null, var0 = method0(var1), var0.method0(var1.method1()), var0.method0().method1(), this.var0 = var0, this.var0, final Type0 var0
            = var1.method0(var2, var3);, var0.method0(var1.method1(0), var2), Type0 var0 = var1.method0(var2.method1(0), var3);, this.var0.method0(), var0.method0(), Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, int var0 = var1.method0();, var0 ? new Type0(var1)
          : var2 ? new Type1(var1)
          : var1, var0 instanceof Type0, Type0 var0 = 
            (Type0) var1;, this.var0.method0().method1(
              var1), var0.method0(var1,
            var2, var3, this)]
result:fail
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = var1.method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0(method1());, Type0 var0 = var1.method0();]
-rightRS-
[var0.method0(), var0.method0().method1() > 1, boolean var0 = var1.method0().method1() == 1
                                                && !var2.method2();, var0.method0().method1() == 1 && !var1, Type0 var0 = var1.method0(method1());, var0.method0(var1, var2, method1()), final Type0 var0 = var1.method0(method1());, var0.method0(method1(),
            var1.method2(var2),
            var1.method3(Type0.class),
            var1.method4(Type1.class),
            var1.method5(var3)), boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0().method1(0);]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0(method1());, Type0 var0 = var1.method0();]
-rightRS-
[var0.method0(), var0.method0().method1() > 1, boolean var0 = var1.method0().method1() == 1
                                                && !var2.method2();, var0.method0().method1() == 1 && !var1, Type0 var0 = var1.method0(method1());, var0.method0(var1, var2, method1()), final Type0 var0 = var1.method0(method1());, var0.method0(method1(),
            var1.method2(var2),
            var1.method3(Type0.class),
            var1.method4(Type1.class),
            var1.method5(var3)), boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0().method1(0);]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0(method1());, Type0 var0 = var1.method0();]
-rightRS-
[var0.method0(), var0.method0().method1() > 1, boolean var0 = var1.method0().method1() == 1
                                                && !var2.method2();, var0.method0().method1() == 1 && !var1, Type0 var0 = var1.method0(method1());, var0.method0(var1, var2, method1()), final Type0 var0 = var1.method0(method1());, var0.method0(method1(),
            var1.method2(var2),
            var1.method3(Type0.class),
            var1.method4(Type1.class),
            var1.method5(var3)), boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0().method1(0);]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0(method1());, Type0 var0 = var1.method0();]
-rightRS-
[var0.method0(), var0.method0().method1() > 1, boolean var0 = var1.method0().method1() == 1
                                                && !var2.method2();, var0.method0().method1() == 1 && !var1, Type0 var0 = var1.method0(method1());, var0.method0(var1, var2, method1()), final Type0 var0 = var1.method0(method1());, var0.method0(method1(),
            var1.method2(var2),
            var1.method3(Type0.class),
            var1.method4(Type1.class),
            var1.method5(var3)), boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0().method1(0);]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0(method1());, Type0 var0 = var1.method0();]
-rightRS-
[var0.method0(), var0.method0().method1() > 1, boolean var0 = var1.method0().method1() == 1
                                                && !var2.method2();, var0.method0().method1() == 1 && !var1, Type0 var0 = var1.method0(method1());, var0.method0(var1, var2, method1()), final Type0 var0 = var1.method0(method1());, var0.method0(method1(),
            var1.method2(var2),
            var1.method3(Type0.class),
            var1.method4(Type1.class),
            var1.method5(var3)), boolean var0 = var1.method0(var2);, !var0.method0(var1), var0.method0(var1) || !var2, Type0 var0 = var1.method0().method1(0);]
result:fail
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0.method0(var1, false)
         && var2.method1() > 1, var0.method0(var1, false)
        || var0.method0(var2, false)]
-rightRS-
[var0 = var1.method0(), var0.method0(var1, false)
         && var2.method1() > 1, var0.method0(), this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0.method0(var1, false)
        || var0.method0(var2, false), Type0 var0 = new Type1(var1, var2);, method0(var0), this.var0 = var0, var0.method0(str0 + var1), var0.method0(str0), var0.method0(str0 + var1 + str1
            + var2), var0.method0(str0 + var1.method1()
              + str1
              + var1.method2()), var0.method0(str0 + var1.method1()
               + str1), var0.method0(str0
               + str1 + var1.method1() + str2)]
result:fail
===Candidate===
-change-
insert
boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0.method0(var1, false)
         && var2.method1() > 1, var0.method0(var1, false)
        || var0.method0(var2, false)]
-rightRS-
[var0 = var1.method0(), var0.method0(var1, false)
         && var2.method1() > 1, var0.method0(), this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0.method0(var1, false)
        || var0.method0(var2, false), Type0 var0 = new Type1(var1, var2);, method0(var0), this.var0 = var0, var0.method0(str0 + var1), var0.method0(str0), var0.method0(str0 + var1 + str1
            + var2), var0.method0(str0 + var1.method1()
              + str1
              + var1.method2()), var0.method0(str0 + var1.method1()
               + str1), var0.method0(str0
               + str1 + var1.method1() + str2)]
result:fail
===Candidate===
-change-
insert
boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0.method0(var1, false)
         && var2.method1() > 1, var0.method0(var1, false)
        || var0.method0(var2, false)]
-rightRS-
[var0 = var1.method0(), var0.method0(var1, false)
         && var2.method1() > 1, var0.method0(), this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0.method0(var1, false)
        || var0.method0(var2, false), Type0 var0 = new Type1(var1, var2);, method0(var0), this.var0 = var0, var0.method0(str0 + var1), var0.method0(str0), var0.method0(str0 + var1 + str1
            + var2), var0.method0(str0 + var1.method1()
              + str1
              + var1.method2()), var0.method0(str0 + var1.method1()
               + str1), var0.method0(str0
               + str1 + var1.method1() + str2)]
result:fail
===Candidate===
-change-
insert
boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0.method0(var1, false)
         && var2.method1() > 1, var0.method0(var1, false)
        || var0.method0(var2, false)]
-rightRS-
[var0 = var1.method0(), var0.method0(var1, false)
         && var2.method1() > 1, var0.method0(), this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0.method0(var1, false)
        || var0.method0(var2, false), Type0 var0 = new Type1(var1, var2);, method0(var0), this.var0 = var0, var0.method0(str0 + var1), var0.method0(str0), var0.method0(str0 + var1 + str1
            + var2), var0.method0(str0 + var1.method1()
              + str1
              + var1.method2()), var0.method0(str0 + var1.method1()
               + str1), var0.method0(str0
               + str1 + var1.method1() + str2)]
result:fail
===Candidate===
-change-
insert
boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0.method0(var1, false)
         && var2.method1() > 1, var0.method0(var1, false)
        || var0.method0(var2, false)]
-rightRS-
[var0 = var1.method0(), var0.method0(var1, false)
         && var2.method1() > 1, var0.method0(), this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0.method0(var1, false)
        || var0.method0(var2, false), Type0 var0 = new Type1(var1, var2);, method0(var0), this.var0 = var0, var0.method0(str0 + var1), var0.method0(str0), var0.method0(str0 + var1 + str1
            + var2), var0.method0(str0 + var1.method1()
              + str1
              + var1.method2()), var0.method0(str0 + var1.method1()
               + str1), var0.method0(str0
               + str1 + var1.method1() + str2)]
result:fail
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != null) {
      var0.method0(var1);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = method0(var1);, Type0 var0 = method0(var1.method1());]
-rightRS-
[this.var0 = var0 != null ? var0.method0() : null, var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
      var0.method0(var1);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = method0(var1);, Type0 var0 = method0(var1.method1());]
-rightRS-
[this.var0 = var0 != null ? var0.method0() : null, var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
      var0.method0(var1);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = method0(var1);, Type0 var0 = method0(var1.method1());]
-rightRS-
[this.var0 = var0 != null ? var0.method0() : null, var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || (strLen=cs.length()) == 0) {
  return true;
}

-leftRS-
[int var0;, int var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
cs
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
cs
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
for (int i=0; i < strLen; i++) {
  if ((Character.isWhitespace(cs.charAt(i)) == false)) {
    return false;
  }
}

-leftRS-
[int var0;, int var0 = var1.method0();, var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, var0.method0() - var1.method0(), var0.method0(true, var1, var2, 0, var2.method1()), method0(var0, var1, var0.method1()), var0 = var1.method0() - var2.method0(), int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= (var1 + var2), var0.method0(var1 + var2.method1()), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0[var1] == null ? 16 : var0[var1].method0().method1(), (var0[var1] == null ? 16 : var0[var1].method0().method1())
                        + var2.method1(), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
            var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1, var0 = var1.method0() - (var2 - 3), (var0 + (var1 - 3)) < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < (var2.method0()+2), var0.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0() > var1.method0(), var0.method0(var1, 0, var2, 0, var2.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, 0, var3.method1())]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < strLen; i++) {
  if ((Character.isWhitespace(cs.charAt(i)) == false)) {
    return false;
  }
}

-leftRS-
[int var0;, int var0 = var1.method0();, var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, var0.method0() - var1.method0(), var0.method0(true, var1, var2, 0, var2.method1()), method0(var0, var1, var0.method1()), var0 = var1.method0() - var2.method0(), int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= (var1 + var2), var0.method0(var1 + var2.method1()), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0[var1] == null ? 16 : var0[var1].method0().method1(), (var0[var1] == null ? 16 : var0[var1].method0().method1())
                        + var2.method1(), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
            var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1, var0 = var1.method0() - (var2 - 3), (var0 + (var1 - 3)) < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < (var2.method0()+2), var0.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0() > var1.method0(), var0.method0(var1, 0, var2, 0, var2.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, 0, var3.method1())]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < strLen; i++) {
  if ((Character.isWhitespace(cs.charAt(i)) == false)) {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
for (int i=0; i < strLen; i++) {
  if ((Character.isWhitespace(cs.charAt(i)) == false)) {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < strLen; i++) {
  if ((Character.isWhitespace(cs.charAt(i)) == false)) {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
strLen
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
strLen
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
strLen
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
i
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
strLen
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return false;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
compile
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Pattern
-leftRS-
[Type0 var0 = var1.method0(str0);, java.util.regex.Pattern]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
"\\s+"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"\\s+"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"\\s+"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"\\s+"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
"\\s+"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"\\s+"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"\\s+"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"\\s+"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1.method1() * var2)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"\\s+"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
new Type0(var0.method0())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0.method0())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0.method0())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0.method0())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0.method0())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"\\s+"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"\\s+"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"\\s+"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
"\\s+"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
str0
to
str0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
