-------------------------------------------
Context: P:IfStatement{elseStatement},L:Assignment{thenStatement},R:
Number of change: 27
Change's id number: 9264
replace
{
          return var0;
        }
with
return var0;
Change's id number: 276
replace
var0 = var1.method0()
with
{
      var0 = var1.method0();
    }
Change's id number: 22358
replace
var0 = var0 + str0 + Type0.method0(var1)
with
var0.append(str0)
Change's id number: 38507
replace
var0 = new Type0(var1, var2)
with
{
            	var0 = new Type0(var1, var2);
            }
Change's id number: 17686
replace
if (var0 == 34)
                     method0(0, 2);
with
if (var0 == 47)
                     method0(0, 2);
                  else if (var0 == 34)
                     method0(3, 5);
-------------------------------------------
Context: P:MethodDeclaration{statements},L:,R:TryStatement{statements}
Number of change: 71
Change's id number: 20
insert
method0()
Change's id number: 271
insert
var0.method0()
Change's id number: 483
insert
Type0 var0 = null;
Change's id number: 3984
insert
if (var0) {
        return;
      }
Change's id number: 3530
insert
String var0 = null;
-------------------------------------------
Context: P:VariableDeclarationStatement{fragments},L:ParameterizedType{type},R:
Number of change: 58
Change's id number: 9200
replace
var0 = new Type0<float[]>()
with
var0 = var1.method0()
Change's id number: 8613
insert
var0 = var1.method0(var2)
Change's id number: 34690
replace
var0 = new ArrayList<Type0>()
with
var0 = Type1.method0(Retention.class)
Change's id number: 2308
replace
var0 = var1.method0()
with
var0
Change's id number: 37334
replace
var0 = var1.peek().get(var2)
with
var0 = method0(var1)
-------------------------------------------
Context: P:MethodDeclaration{statements},L:EnhancedForStatement{statements},R:MethodInvocation{statements}
Number of change: 35
Change's id number: 7820
insert
var0.method0(str0 + var1.method1())
Change's id number: 35416
insert
for (Type0 var0 : var1.method0()) {
            var2.add(var0.method1());
        }
Change's id number: 19227
replace
var0.method0(var1, var2)
with
var0.put(var1, var2)
Change's id number: 20483
replace
var0.method0(var1)
with
if (var0) {
      var1.method0(var2);
    }
Change's id number: 31344
insert
Type0.method0(
        this, var0, var1, var2)
-------------------------------------------
Context: P:IfStatement{statements},L:ForStatement{statements},R:
Number of change: 60
Change's id number: 17173
insert
method0(str0, var0)
Change's id number: 17782
insert
assert var0 == var0;
Change's id number: 294
insert
return var0;
Change's id number: 20378
replace
return new Type0(
              new Type1(var0, true));
with
if (var0 == 1)
            return new Type0(
              new Type1(var1, true));
          else
            return new Type1(var1, false);
Change's id number: 31642
insert
method0().method1(var0, var1)
-------------------------------------------
Context: P:MethodDeclaration{body},L:SingleVariableDeclaration{parameters},R:
Number of change: 385
Change's id number: 36213
replace
{
        if (method0(var0)) {
            // method has already been visited by a static type checking visitor
            return;
        }
        Type2 var1 = (Type2) var0.method1(var2);
        if (var1 != null) {
            var3.method2(var1);
        } else {
            method3(var0, var3);
        }
        var0.method4(var2);
    }
with
{
        if (method0(var0)) {
            // method has already been visited by a static type checking visitor
            return;
        }
        if (!var1.method1(var0)) {
        Type3 var2 = (Type3) var0.method2(var3);
        if (var2 != null) {
            var4.method3(var2);
        } else {
            method4(var0, var4);
        }
        var0.method5(var3);
        }
        var1.method6(var0);
    }
Change's id number: 31036
replace
{
    List<Type0> var0 =
                                      new ArrayList<Type0>();
    List<Type0> var1 =
      new ArrayList<Type0>();
    
    Type1 var2 = new Type1();
    // source node returned is not used
    method0(var3, var0,
        var1, var2);
    assert var1.size() == var2.method1();
    int var4 = var2.method1() +
                         var2.method2();
    
    if (var3 instanceof Type4) {
      String var5 = ((Type4)var3).method3().method4();
      var6.print(var5 + str0);
    }
    // l: == live:, d: == decommissioned c: == corrupt e: == excess
    var6.print(var3 + ((var4 > 0)? str1 : str2) + 
              str3 +
              str4 + var2.method1() +
              str5 + var2.method2() +
              str6 + var2.method5() +
              str7 + var2.method6() + str8); 

    Collection<Type0> var7 = 
                                  var8.method7(var3);
    
    for (Iterator<Type0> var9 = var10.method8(var3);
         var9.hasNext();) {
      Type0 var11 = var9.next();
      String var12 = str1;
      if (var7 != null && var7.contains(var11)) {
        var12 = str9;
      } else if (var11.method9() || 
          var11.method10()) {
        var12 = str10;
      }
      
      if (var11.method11()) {
        var12 += str11;
      }
      var6.print(str12 + var11 + var12 + str13);
    }
    var6.println(str1);
  }
with
{
    assert var0.method0();
    final List<Type2> var1 = new ArrayList<Type2>();
    final List<Type2> var2 = new ArrayList<Type2>();
    var3.method1(var1, var2, false);
    var4.println(str0 + var1.size());
    var4.println(str1 + var2.size());
    //
    // Dump contents of neededReplication
    //
    synchronized (var5) {
      var4.println(str2 + 
                  var5.method2());
      for (Type5 var6 : var5) {
        List<Type2> var7 =
                                          new ArrayList<Type2>();
        List<Type2> var8 =
          new ArrayList<Type2>();
        
        Type6 var9 = new Type6();
        // source node returned is not used
        method3(var6, var7,
            var8, var9);
        assert var8.size() == var9.method4();
        int var10 = var9.method4() +
                             var9.method5();
       
        if (var6 instanceof Type8) {
          String var11 = ((Type8)var6).method6().method7();
          var4.print(var11 + str3);
        }
        // l: == live:, d: == decommissioned c: == corrupt e: == excess
        var4.print(var6 + ((var10 > 0)? str4 : str5) + 
                  str6 +
                  str7 + var9.method4() +
                  str8 + var9.method5() +
                  str9 + var9.method8() +
                  str10 + var9.method9() + str11); 

        Collection<Type2> var12 = 
                                      var13.method10(var6);
        
        for (Iterator<Type2> var14 = var15.method11(var6);
             var14.hasNext();) {
          Type2 var16 = var14.next();
          String var17 = str4;
          if (var12 != null && var12.contains(var16)) {
            var17 = str12;
          } else if (var16.method12() || 
              var16.method13()) {
            var17 = str13;
          }          
          var4.print(str14 + var16 + var17 + str15);
        }
        var4.println(str4);
      }
    }

    // Dump blocks from pendingReplication
    var18.method14(var4);

    // Dump blocks that are waiting to be deleted
    var19.method15(var4);

    // Dump all datanodes
    method16().method17(var4);
  }
Change's id number: 9272
replace
{
      int var0 = var1.method0(var2);
      if (var0 == -1) {
        var3[var4] = var5;
        var6[var4] = null;
      } else {
        var3[var4] = var0;
        assert var0 >= 0;
        if (var6[var4] == null) {
          var6[var4] = new Type0();
        }
        var1.method1(var0, var6[var4]);
      }
      var7[var4] = var8;
    }
with
{
      int var0 = var1[var2];
      if (var0 == 0) {
        var3[var4] = var5;
        var6[var4] = null;
      } else {
        var3[var4] = var0;
        assert var0 > 0;
        if (var6[var4] == null) {
          var6[var4] = new Type0();
        }
        var7.method0(var0, var6[var4]);
      }
      var8[var4] = var9;
    }
Change's id number: 9246
replace
{
      var0.method0(var1, var2);
      if (var3 == var4) {
        if (var3 == var4) {
          return 0;
        }
        return -1;
      } else if (var3 == var4) {
        return 1;
      }
      return var5.method1(var2);
    }
with
{
      var0[var1] = var2.method0(var3); 
    }
Change's id number: 31040
replace
{
    Type0 var0 = var1.method0();
    if (var0 == null) {
      // block does not belong to any file
      method1(var1);
      return var2;
    }
    if (!var1.method2()) {
      // Incomplete blocks are never considered mis-replicated --
      // they'll be reached when they are completed or recovered.
      return var3;
    }
    // calculate current replication
    short var4 = var0.method3();
    Type5 var5 = method4(var1);
    int var6 = var5.method5();
    // add to under-replicated queue if need to be
    if (method6(var1, var4, var6)) {
      if (var7.method7(var1, var6, var5
          .method8(), var4)) {
        return var8;
      }
    }

    if (var6 > var4) {
      if (var5.method9() > 0) {
        // If any of the replicas of this block are on nodes that are
        // considered "stale", then these replicas may in fact have
        // already been deleted. So, we cannot safely act on the
        // over-replication until a later point in time, when
        // the "stale" nodes have block reported.
        return var9;
      }
      
      // over-replicated block
      method10(var1, var4, null, null);
      return var10;
    }
    
    return var11;
  }
with
{
    assert var0.method0();

    long var1 = 0, var2 = 0, var3 = 0,
         var4 = 0;
    var5.method1();
    for (Type3 var6 : var7.method2()) {
      Type5 var8 = var6.method3();
      if (var8 == null) {
        // block does not belong to any file
        var1++;
        method4(var6);
        continue;
      }
      if (!var6.method5()) {
        // Incomplete blocks are never considered mis-replicated --
        // they'll be reached when they are completed or recovered.
        var4++;
        continue;
      }
      // calculate current replication
      short var9 = var8.method6();
      Type8 var10 = method7(var6);
      int var11 = var10.method8();
      // add to under-replicated queue if need to be
      if (method9(var6, var9, var11)) {
        if (var5.method10(var6, var11, var10
            .method11(), var9)) {
          var3++;
        }
      }

      if (var11 > var9) {
        // over-replicated block
        var2++;
        method12(var6, var9, null, null);
      }
    }

    var12.method13(str0 + var7.method14());
    var12.method13(str1 + var1);
    var12.method13(str2 + var3);
    var12.method13(str3 + var2);
    var12.method13(str4 + var4);
  }
-------------------------------------------
Context: P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
Number of change: 1179
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 6283
replace
var0 = var1
with
var0.method0(var1)
Change's id number: 5705
insert
final Type0[] var0 = var1.method0();
Change's id number: 36220
replace
if (var0 != null) {
            Type0 var1 = var0.get(str0);
            if (var1 instanceof Type1) {
                Type2 var2 = var1.method0();
                Class var3 = var2.method1();
                if (Type3.class.isAssignableFrom(Type3.class)) {
                    try {
                        var4 = (Type3) var3.newInstance();
                    } catch (InstantiationException var5) {
                        throw new Type4(var5);
                    } catch (IllegalAccessException var5) {
                        throw new Type4(var5);
                    }
                }
            }
        }
with
Type0 var0 = var1.get(str0);
Change's id number: 36414
replace
Type0 var0 = new Type0(var1, var2.method0(), str0);
with
Type0 var0  = var1.method0();
-------------------------------------------
Context: P:IfStatement{expression},L:,R:Assignment{thenStatement}
Number of change: 30
Change's id number: 2200
replace
var0.method0()
with
var0
Change's id number: 35292
replace
var0.method0() && method1(var1)
with
method0(var0)
Change's id number: 110
insert
var0 == null
Change's id number: 31134
replace
var0.isEmpty()
with
var0 == null
Change's id number: 17575
replace
var0[var1] == var2
with
var0[var1] == var2 && Character.isLetter(var2)
-------------------------------------------
Context: P:TryStatement{statements},L:MethodInvocation{statements},R:MethodInvocation{statements}
Number of change: 112
Change's id number: 271
insert
var0.method0()
Change's id number: 28993
replace
var0.method0().method1(var1.method2())
with
var0.method0().method1(var1.method2())
Change's id number: 864
insert
var0.method0(var1.method1())
Change's id number: 4416
insert
method0().method1()
Change's id number: 19210
insert
method0(str0 + var0)
-------------------------------------------
Context: P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:MethodInvocation{statements}
Number of change: 107
Change's id number: 30949
insert
long var0 = this.var1.method0();
Change's id number: 30959
insert
long var0 = this.method0();
Change's id number: 36
insert
var0.add(var1)
Change's id number: 3530
insert
String var0 = null;
Change's id number: 271
insert
var0.method0()
-------------------------------------------
Context: P:Assignment{rightHandSide},L:FieldAccess{leftHandSide},R:
Number of change: 191
Change's id number: 46
update
var0
to
var0
Change's id number: 305
update
var0
to
var0
Change's id number: 36194
replace
new Stack<Map<Object, List<Type0>>>()
with
new Type0(this)
Change's id number: 365
replace
var0
with
var0
Change's id number: 333
replace
var0.method0()
with
var0
-------------------------------------------
Context: P:TryStatement{body},L:,R:Block{finally}
Number of change: 28
Change's id number: 37213
replace
{
            method0(str0 + var0 + str1
                    + (var0 == 1 ? str2 : str3)
                    + (var1 != null ? str4 + var1 : str2));

            method1();
            Type1 var2 = method2() != null ? method2() : new Type1(method3());
            List<String> var3 = method4(var2);

            String var4 = System.getProperty(str5);
            List<String> var5 = new ArrayList<String>();

            method5(var5, var2, var4);
            method6(var5, var3, var2);
            method7(var5);
            
            String[] var6 = method8(var5);


            if (var7) {
                method9(var6);
            } else {
                method10(var6);
            }
        }
with
{
            if (var0 > 0) {
                method0(str0 + var0 + str1
                        + (var0 == 1 ? str2 : str3)
                        + (var1 != null ? str4 + var1 : str2));

                if (var2) {
                    for (File var3 : var4) {
                        method0(var3.getAbsolutePath());
                    }
                }

                Type0 var5 = method1() != null ? method1() : new Type0(method2());
                // extract joint options, some get pushed up...
                List<String> var6 = new ArrayList<String>();
                if (var7) {
                    Type1 var8 = var9.method3();
                    for (Iterator var10 = var8.method4().method5().method6(); var10.hasNext();) {
                        final Entry var11 = (Entry) var10.next();
                        final String var12 = var11.getKey().toString();
                        final String var13 = method2().method7(var11.getValue().toString());
                        if (var12.contains(str5)) {
                            String var14 = str2;
                            if (var9.method8() != null) {
                                var14 = str6 + var9.method8();
                            }
                            var6.add(str7 + var14);
                        } else if (var12.contains(str8)) {
                            // ignore, taken care of in debug
                        } else if ((var12.contains(str9))
                                || (var12.contains(str10))
                                || (var12.contains(str11))) {
                            // false is default, so something to do only in true case
                            if (str12.equalsIgnoreCase(var13) || str13.equalsIgnoreCase(var13) || str14.equalsIgnoreCase(str15))
                                var6.add(str16 + var12);
                        } else if (var12.contains(str17)) {
                            var5.method9(var9.method1());
                        } else if ((var12.contains(str18))
                                || (var12.contains(str19))
                                || (var12.contains(str20))
                                || (var12.contains(str21))
                                || (var12.contains(str22))
                                || (var12.contains(str10))) { // TODO remove extra verbose?
                            var6.add(str23 + var12 + str24 + var13);
                        } else {
                            method0(str25 + var12 + str26, var15);
                        }
                        // includes? excludes?
                    }
                    // ant's <javac> supports nested <compilerarg value=""> elements (there can be multiple of them)
                    // for additional options to be passed to javac.
                    Enumeration var16 = var8.method10();
                    while (var16.hasMoreElements()) {
                        Type1 var17 = (Type1) var16.nextElement();
                        if (var17.method11().method12(str27)) {
                            for (Iterator var10 = var17.method4().method5().method6(); var10.hasNext();) {
                                final Entry var11 = (Entry) var10.next();
                                final String var12 = var11.getKey().toString();
                                if (var12.equals(str15)) {
                                    final String var13 = method2().method7(var11.getValue().toString());
                                    StringTokenizer var18 = new StringTokenizer(var13, str28);
                                    while (var18.hasMoreTokens()) {
                                        String var19 = var18.nextToken();
                                        String var20 = var19.replace(str29, str30);
                                        if(var19 == var20) {
                                            var20 = var19.replace(str31, str32); // GROOVY-5063
                                        }
                                        var6.add(var20);
                                    }
                                }
                            }
                        }
                    }
                }

                String var21 = System.getProperty(str33);
                List<String> var22 = new ArrayList<String>();

                if (var23) {
                    String var24;
                    if (var25 != null) {
                        var24 = var25.getPath();
                    } else {
                        var24 = System.getProperty(str34);
                    }
                    if (var26) {
                        var5.method13((new Type0(method2())).method14(str35));
                    }
                    if (var27) {
                        var5.method15();
                    }

                    var22.add(var24 + var21 + str36 + var21 + str37);
                    var22.add(str38);
                    var22.add(var5.method16());

                    final String var28 = System.getProperty(str39);
                    if ((var28 != null) && !var28.equals(str2)) {
                        var22.add(str40 + var28);
                    }
                    if (var29 != null) {
                        var22.add(str41 + var29);
                    }

                    if ((var30 != null) && !var30.equals(str2)) {
                        var22.add(str42 + var30);
                    }
                    if ((var31 != null) && !var31.equals(str2)) {
                        var22.add(str43 + var31);
                    }
                    if (!str44.equals(method17())) {
                        String var32 = method17();
                        if (var32.startsWith(str45)) var32 = var32.substring(1);
                        var22.add(str46 + var32);
                    }
                    var22.add(Type3.class.getName());
                }
                var22.add(str47);
                var22.add(var5.method16());
                if (var7) {
                    var22.add(str48);
                    var22.addAll(var6);
                }
                var22.add(str49);
                var22.add(var1.getPath());
                if (var33 != null) {
                    var22.add(str50);
                    var22.add(var33);
                }
                if (var34) {
                    var22.add(str51);
                }

                // check to see if an external file is needed
                int var35 = 0;
                if (var23) {

                    for (File var3 : var4) {
                        var35 += var3.getPath().length();
                    }
                    for (Object var36 : var22) {
                        var35 += var36.toString().length();
                    }
                    var35 += var0;
                    var35 += var22.size();
                }
                // 32767 is the command line length limit on Windows
                if (var23 && (var35 > 32767)) {
                    try {
                        File var37 = File.createTempFile(str52, str53);
                        var38.add(var37);
                        PrintWriter var39 = new PrintWriter(new FileWriter(var37));
                        for (File var3 : var4) {
                            var39.println(var3.getPath());
                        }
                        var39.close();
                        var22.add(str54 + var37.getPath());
                    } catch (IOException var11) {
                        method0(str55, var11, var40);
                    }
                } else {
                    for (File var3 : var4) {
                        var22.add(var3.getPath());
                    }
                }
                final String[] var41 = new String[var22.size()];
                for (int var10 = 0; var10 < var0; ++var10) {
                    var41[var10] = var22.get(var10);
                }
                method0(str56, var42);
                method0(Type4.method18(var41, str57), var42);

                if (var23) {
                    // use the main method in FileSystemCompiler
                    final Type5 var43 = new Type5(); // new LogStreamHandler ( attributes , Project.MSG_INFO , Project.MSG_WARN ) ) ;
                    var43.method19(method2());
                    var43.method20(method2().method21());
                    var43.method22(var41);
                    try {
                        var43.method23();
                    } catch (final IOException var44) {
                        throw new Type6(str58, var44);
                    }
                    final int var45 = var43.method24();
                    if (var45 != 0) {

                        if (var46) {
                            throw new Type6(str59 + var45);
                        } else {
                            method0(str59 + var45, var40);
                        }
                    }
                } else {
                    // hand crank it so we can add our own compiler configuration
                    try {
                        Type7 var47 = Type8.method25();

                        Type9 var48 = new Type9();

                        Type10 var49;
                        var49 = var48.method26(var47, var41);

                        var50 = Type8.method27(var49);
                        var50.method28(method29());
                        String var32 = method17();
                        if (var32.startsWith(str45)) var32 = var32.substring(1);
                        var50.method30(var32);

                        // Load the file name list
                        String[] var51 = Type8.method31(var49);
                        boolean var52 = var51 == null;

                        var52 = var52 && !Type8.method32(var51);

                        if (var29 != null) {
                            var50.method33(var29);
                        }

                        if (!var52) {
                            Type8.method34(var50, method35(), var51, false);
                        }

                    } catch (Exception var53) {
                        Throwable var54 = var53;
                        if ((var53.getClass() == RuntimeException.class) && (var53.getCause() != null)) {
                            // unwrap to the real exception
                            var54 = var53.getCause();
                        }
                        StringWriter var55 = new StringWriter();
                        new Type13(var54, false).method36(new PrintWriter(var55));
                        String var56 = var55.toString();

                        if (var46) {
                            method0(var56, var57);
                            throw new Type6(str60, var54, method37());
                        } else {
                            method0(var56, var40);
                        }
                    }
                }
            }
        }
Change's id number: 7427
replace
{
        var0 = var1.method0();
        var2 = true;
      }
with
{
        if (!var0.method0()) {
          // would result in a 0 document segment: nothing to merge!
          var1 = new Type1(new ArrayList<Type2>(), var2, var3, var4);
        } else {
          var1 = var0.method1();
        }
        var5 = true;
      }
Change's id number: 19007
replace
{
      // stuff 0s in until the "real" data is flushed:
      int var0 = 0;
      while(var1 > var0) {
        var1 -= method0(0)-1;
        assert var1 >= 0;
        var0 += 1;
      }
    }
with
{
      if (!var0) {
        // stuff 0s in until the "real" data is flushed:
        int var1 = 0;
        while(var2 > var1) {
          var2 -= method0(0)-1;
          assert var2 >= 0;
          var1 += 1;
        }
      }
    }
Change's id number: 5544
insert
{
      for (Type0 var0 : var1) {
        Type2 var2 = var0.method0();
        if (var2 != null) {
          if (var2 == var3) {
            List<Type3> var4 = new ArrayList<>();
            List<Type4> var5 = new ArrayList<>();
            for (Type5 var6 : var7) {
              Type3 var8 = var6.method1(var9);
              Type4 var10 = var6.method2(var9);
              if (var8 == null) {
                var8 = Type6.method3();
                var10 = new Type7(var6.method4());
              }
              var4.add(var8);
              var5.add(var10);
            }
            var11.method5(var0, var12, var4, var5);
          } else if (var2 == var13) {
            List<Type11> var4 = new ArrayList<>();
            List<Type4> var5 = new ArrayList<>();
            for (Type5 var6 : var7) {
              Type11 var8 = var6.method6(var9);
              Type4 var10 = var6.method2(var9);
              if (var8 == null) {
                var8 = Type6.method7();
                var10 = new Type7(var6.method4());
              }
              var4.add(var8);
              var5.add(var10);
            }
            var11.method8(var0, var12, var4, var5);
          } else if (var2 == var14) {
            List<Type12> var4 = new ArrayList<>();
            for (Type5 var6 : var7) {
              Type12 var8 = var6.method9(var9);
              if (var8 == null) {
                var8 = Type6.method10();
              }
              var4.add(var8);
            }
            var11.method11(var0, var12, var4);
          } else if (var2 == var15) {
            List<Type13> var4 = new ArrayList<>();
            for (Type5 var6 : var7) {
              Type13 var8 = var6.method12(var9);
              if (var8 == null) {
                var8 = Type6.method13();
              }
              var4.add(var8);
            }
            var11.method14(var0, var12, var4);
          } else if (var2 == var16) {
            List<Type14> var4 = new ArrayList<>();
            for (Type5 var6 : var7) {
              Type14 var8 = var6.method15(var9);
              if (var8 == null) {
                var8 = Type6.method16();
              }
              var4.add(var8);
            }
            var11.method17(var0, var12, var4);
          } else {
            throw new AssertionError(str0 + var2);
          }
        }
      }
      var17 = true;
    }
Change's id number: 9835
insert
{
        while (true) {
          final Type0 var0 = method0();
          int var1;
          try {
            //fetch packets one by one in a single request
            var1 = method1(var0);
            if (var1 == 0 || var1 == var2) {
              return;
            }
            //if there is an error continue. But continue from the point where it got broken
          } finally {
            var3.method2(var0);
          }
        }
      }
-------------------------------------------
Context: P:IfStatement{statements},L:Assignment{statements},R:
Number of change: 347
Change's id number: 759
insert
var0 = var1
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 643
insert
var0 = true
Change's id number: 205
replace
return var0;
with
return var0;
Change's id number: 29399
replace
var0[1] = var1
with
var0[0] = var1
-------------------------------------------
Context: P:ClassInstanceCreation{arguments},L:QualifiedName{arguments},R:
Number of change: 30
Change's id number: 365
replace
var0
with
var0
Change's id number: 87
replace
var0
with
var0
Change's id number: 1177
replace
Type0.class
with
Type0.class
Change's id number: 46
update
var0
to
var0
Change's id number: 271
insert
var0.method0()
-------------------------------------------
Context: P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
Number of change: 29
Change's id number: 126
insert
@Override
Change's id number: 168
update
public
to
private
Change's id number: 43
update
private
to
protected
Change's id number: 26751
replace
@VisibleForTesting
with
@VisibleForTesting
Change's id number: 92
update
protected
to
private
-------------------------------------------
Context: P:MethodDeclaration{statements},L:MethodInvocation{statements},R:VariableDeclarationStatement{statements}
Number of change: 297
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 1115
insert
Type0 var0 = var1.method0().method1();
Change's id number: 29437
insert
if (var0[var1-1] == null) {
      throw new NullPointerException(str0);
    }
Change's id number: 9028
insert
for (Type0 var0 : var1.values()) {
      var2.method0(var3.method1());
    }
Change's id number: 29787
replace
int var0 = 0;
with
final List<Type0> var0 = var1.method0();
-------------------------------------------
Context: P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
Number of change: 172
Change's id number: 928
insert
Type0 var0 = new Type0(var1);
Change's id number: 9344
insert
if (var0 != var1) {
      throw new RuntimeException(str0 + var2 + str1 + var0 + str2 + var1);
    }
Change's id number: 316
insert
int var0 = 0;
Change's id number: 36549
insert
final boolean var0 = var1!=null && var2>0;
Change's id number: 3134
insert
final Type0 var0 = new Type0();
-------------------------------------------
Context: P:MethodDeclaration{statements},L:AssertStatement{statements},R:MethodInvocation{statements}
Number of change: 26
Change's id number: 31076
insert
var0.method0(!var1.method1(),
        str0)
Change's id number: 31582
replace
var0 = new Type1(var1, new Type2[0], var2,
                            var3, var4, var5)
with
if (var0 == null)
      var1 = new Type2(var2, var3);
    else {
      var1 = new Type3(var2, var4, var5,
                              var3, var6, var7);
      var8 = ((Type3)var1).method0(var0);
    }
Change's id number: 31068
replace
if (var0) {
      var1 = new Type1(
          var2, var3,
          var4, var5, var6, 
          var7, null);
    } else {
      var1 = new Type2(var2, 0, var3,
                              var5, var8, var4);
    }
with
if (var0 == null)
      var1 = new Type2(var2, var3);
    else if(var4 == 0 || var0[var4-1].method0()
        == var5) {
      var1 = new Type4(
          var2, var4, var6,
          var7, var3, var8, 
          var9, null);
    } else {
      var1 = new Type5(var2, var4, var6,
                              var3, var10, var7);
    }
Change's id number: 287
insert
var0.put(var1, var2)
Change's id number: 7158
insert
final int var0 = var1.size() - var2 + var3;
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
Number of change: 876
Change's id number: 874
insert
public static final String var0 = str0;
Change's id number: 362
insert
private final Type0 var0;
Change's id number: 1169
insert
String var0 = str0;
Change's id number: 1297
insert
private final boolean var0;
Change's id number: 1158
insert
private String var0;
-------------------------------------------
Context: P:MethodDeclaration{statements},L:MethodInvocation{statements},R:
Number of change: 727
Change's id number: 294
insert
return var0;
Change's id number: 271
insert
var0.method0()
Change's id number: 1244
insert
var0.method0(var1, var2)
Change's id number: 641
insert
return true;
Change's id number: 6809
insert
var0.method0(var1, var2)
-------------------------------------------
Context: P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:
Number of change: 143
Change's id number: 30929
insert
if (var0 != null) {
        return new Type0[] {var0};
      }
Change's id number: 37052
replace
if (var0) {
                method0(var1);
            } else {
                method1(var1);
            }
with
if (var0) {
                    for (File var1 : var2) {
                        method0(var1.getAbsolutePath());
                    }
                }
Change's id number: 29757
insert
if (var0 == null) {
        return null;
      }
      else {
        return method0(var1, var0);
      }
Change's id number: 17900
replace
return var0 instanceof Type1 ?
        ((Type1 ) var0).method0() :
        true;
with
return var0.method0().method1();
Change's id number: 974
insert
for (Entry<String, List<String>> var0 : var1.entrySet()) {
        List<String> var2 = var0.getValue();
        for (int var3 = 0; var3 < var2.size(); var3++) {
          var4.method0(new Type0(var0.getKey(), var3, var5, var2.get(var3)));
        }
      }
-------------------------------------------
Context: P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
Number of change: 44
Change's id number: 46
update
var0
to
var0
Change's id number: 365
replace
var0
with
var0
Change's id number: 271
insert
var0.method0()
Change's id number: 29320
replace
var0
with
var0[var1 - 1]
Change's id number: 305
update
var0
to
var0
-------------------------------------------
Context: P:MethodDeclaration{statements},L:EnhancedForStatement{statements},R:
Number of change: 141
Change's id number: 205
replace
return var0;
with
return var0;
Change's id number: 294
insert
return var0;
Change's id number: 31080
replace
return new Type0(var0, Type2.method0(var1.method1()));
with
return var0;
Change's id number: 27511
replace
return null;
with
return method0(Type1.class);
Change's id number: 9362
replace
if (!var0) {
      return null;
    } else {
      return new Type0() {
        @Override
        public long get(int var1) {
          int var2 = Type2.method0(var1, var3);
          Type0 var4;
          try {
            var4 = var3.get(var2).method1().method2(var5);
          } catch (IOException var6) {
            throw new RuntimeException(var6);
          }
          if (var4 == null) {
            return 0;
          } else {
            return var4.method3(var1 - var3.get(var2).var7);
          }
        }
      };
    }
with
if (var0 instanceof Type1) {
      // already an atomic reader
      return var1.method0((Type1) var0, var2);
    }
-------------------------------------------
Context: P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
Number of change: 73
Change's id number: 5705
insert
final Type0[] var0 = var1.method0();
Change's id number: 1034
insert
final Type0 var0 = var1.method0(var2);
Change's id number: 648
insert
boolean var0 = false;
Change's id number: 483
insert
Type0 var0 = null;
Change's id number: 28752
insert
boolean var0 = var1 == var2;
-------------------------------------------
Context: P:TryStatement{finally},L:CatchClause{catchClauses},R:
Number of change: 46
Change's id number: 21255
insert
{
          method0();
        }
Change's id number: 6098
replace
{
          Type0.method0(var0, var1);
        }
with
{
          if (var0) {
            Type0.method0(var1);
          } else {
            Type0.method1(var1);
          }
        }
Change's id number: 6097
insert
{
        Type0.method0(var0);
      }
Change's id number: 5026
insert
{ method0(var0);
          }
Change's id number: 6321
insert
{
      if (var0 != null) {
        try {
          var1.method0(var0);
        } catch (IOException var2) {
          var3.method1(str0 + var0 + var2.getMessage());
          return true; // Don't fail for this reason!
        }
      }
    }
-------------------------------------------
Context: P:IfStatement{statements},L:MethodInvocation{statements},R:Assignment{statements}
Number of change: 82
Change's id number: 2168
insert
var0 += var1
Change's id number: 271
insert
var0.method0()
Change's id number: 5231
replace
var0[var1++] = var2
with
var0.method0(var1++, var2)
Change's id number: 1567
insert
var0.method0(var1)
Change's id number: 7131
replace
var0.method0()
with
var0.method0(var1)
-------------------------------------------
Context: P:WhileStatement{statements},L:,R:IfStatement{statements}
Number of change: 27
Change's id number: 1798
insert
final Type0 var0 = var1.method0();
Change's id number: 9476
replace
final Type0 var0 = var1.method0();
with
final Type0 var0 = var1.method0();
Change's id number: 36477
insert
Object var0 = var1.next();
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 6438
insert
if (var0.getLineNumber() == 1 && var1.startsWith(str0)) {
        var1 = var1.substring(1);
      }
-------------------------------------------
Context: P:ArrayType{elementType},L:,R:Dimension{dimensions}
Number of change: 35
Change's id number: 21
update
Type0
to
Type0
Change's id number: 9400
update
int
to
float
Change's id number: 1481
update
String
to
Type0
Change's id number: 7838
replace
Class
with
Class<?>
Change's id number: 77
insert
Type0
-------------------------------------------
Context: P:EnhancedForStatement{statements},L:,R:VariableDeclarationStatement{statements}
Number of change: 49
Change's id number: 6372
insert
List<Type0> var0 = new ArrayList<Type0>();
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 5959
insert
final String var0 = var1.getKey();
Change's id number: 19231
insert
Type0 var0 = (Type0) var1.getKey();
Change's id number: 28945
replace
if (!(var0 || var1.contains(var2
          .method0()))) {
        continue;
      }
with
if (var0 != null && !var0.isEmpty()) {
        if (!var0.contains(var1.method0())) {
          continue;
        }
      }
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
Number of change: 602
Change's id number: 856
insert
private Type0 var0;
Change's id number: 272
insert
private int var0;
Change's id number: 274
insert
final Type0 var0;
Change's id number: 1297
insert
private final boolean var0;
Change's id number: 3323
insert
private Type0[] var0;
-------------------------------------------
Context: P:MethodDeclaration{statements},L:,R:AssertStatement{statements}
Number of change: 33
Change's id number: 16134
replace
assert var0.position() + var1 * method0() <= var0.limit();
with
assert var0 + var1 * method0() <= var2;
Change's id number: 759
insert
var0 = var1
Change's id number: 10522
insert
assert var0 + var1 * method0() <= var2;
Change's id number: 4278
insert
if (var0.method0(var1, var2)) {
      if (var3.method1().method2(var4) < 0) {
        // Positions were not indexed:
        return null;
      }
    }
Change's id number: 7228
replace
Type0 var0 = (Type0)var1;
with
final Type0 var0 = var1.method0();
-------------------------------------------
Context: P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
Number of change: 64
Change's id number: 46
update
var0
to
var0
Change's id number: 271
insert
var0.method0()
Change's id number: 448
replace
var0
with
var0.method0()
Change's id number: 8974
replace
new Type0(var0)
with
var0.method0()
Change's id number: 936
insert
null
-------------------------------------------
Context: P:TryStatement{statements},L:,R:
Number of change: 210
Change's id number: 20
insert
method0()
Change's id number: 36205
replace
var0 = var1
with
var0.method0()
Change's id number: 6903
insert
var0 = method0(var1, var2, var3)
Change's id number: 3181
replace
var0.method0()
with
var0 = var1
Change's id number: 427
replace
var0.method0()
with
var0.method0()
-------------------------------------------
Context: P:CatchClause{statements},L:,R:
Number of change: 120
Change's id number: 30815
replace
throw var0.method0(var1);
with
throw (Type0)var0.method0();
Change's id number: 643
insert
var0 = true
Change's id number: 531
insert
var0.method0(str0, var1)
Change's id number: 37017
insert
var0 = new Type1()
Change's id number: 9895
insert
Thread.currentThread().interrupt()
-------------------------------------------
Context: P:IfStatement{statements},L:IfStatement{statements},R:MethodInvocation{statements}
Number of change: 80
Change's id number: 19099
replace
Type0 var0 = var1.method0();
with
Type0 var0 = var1.method0();
Change's id number: 36943
insert
var0.method0(str0, new Type2(var1[1]))
Change's id number: 36946
insert
var0 = var1.split(str0)
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 2654
insert
String var0 = var1.method0(var2);
-------------------------------------------
Context: P:IfStatement{statements},L:Assignment{statements},R:IfStatement{statements}
Number of change: 46
Change's id number: 5541
replace
var0 = var1.method0()
with
var0.put(var1, method0(var2))
Change's id number: 2229
insert
var0 = var1.method0(var2)
Change's id number: 32956
insert
for (Integer var0 : var1) {
                        var2 = var3.method0(String.format(str0, var0) + var4);
                        if (var2 != null) {
                            if ((var0 & var5) != 0) var6 = var5;
                            var7 = var7 | var0;
                            break;
                        }
                    }
Change's id number: 237
insert
var0.addAll(var1)
Change's id number: 1102
replace
Type0 var0 = method0(var1, var2);
with
Type0 var0 = var1.method0().method1()
              ? new Type3(this, var2, var3, var4)
              : new Type5(this, var2, var3, var4);
-------------------------------------------
Context: P:TryStatement{catchClauses},L:CatchClause{catchClauses},R:
Number of change: 49
Change's id number: 28173
insert
catch (Type0 var0) {
      method0(var0);
      return null;
    }
Change's id number: 26020
insert
catch (URISyntaxException var0) {
            IOException var1 = new IOException(str0 + var2 + str1
                + method0() + (var0.getMessage() != null ? str2 + var0.getMessage() : str3));
            var1.initCause(var0);
            throw var1;
        }
Change's id number: 33431
insert
catch (RuntimeException var0) {
                           // test for JDK9 JIGSAW
                           if (!str0.equals(var0.getClass().getName())) throw var0;
                       }
Change's id number: 34805
insert
catch (NoClassDefFoundError var0) {
                var1.add(var2);
            }
Change's id number: 35407
insert
catch (Type0 var0)  { // see GROOVY-5875
            if (var1 != null && var2 != this && var2 != var1) {
                try {
                    // let's try getting the property on the second object
                    return Type1.method0(var1, var3);
                } catch (Type2 var4) {
                    // ignore, we'll throw e2
                }
            }
            throw var0;
        }
-------------------------------------------
Context: P:ForStatement{statements},L:IfStatement{statements},R:
Number of change: 81
Change's id number: 759
insert
var0 = var1
Change's id number: 37562
replace
var0 += var1[var2].method0(var3)
with
if (var0.method0() && var1.contains(var0.method1())) {
                var2 += var0.method1();
            }
            else {
                var2 += var0.method2(var1);
            }
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 6267
insert
var0 = var0.method0()
Change's id number: 20013
insert
if ((var0[var1] & (1<<var2)) != 0) {
            var3[32+var2] = true;
          }
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:
Number of change: 83
Change's id number: 9252
insert
/** Sorts by field's natural Term sort order.  All
   *  comparisons are done using BytesRef.compareTo, which is
   *  slow for medium to large result sets but possibly
   *  very fast for very small results sets.  The BytesRef
   *  values are obtained using {@link AtomicReader#docValues}. */
  public static final class Type0 extends Type1<Type2> {

    private Type2[] var0;
    private Type3 var1;
    private final String var2;
    private Type2 var3;
    private final Type2 var4 = new Type2();

    TermValDocValuesComparator(int var5, String var2) {
      var0 = new Type2[var5];
      this.var2 = var2;
    }

    @Override
    public int compare(int var6, int var7) {
      assert var0[var6] != null;
      assert var0[var7] != null;
      return var0[var6].method0(var0[var7]);
    }

    @Override
    public int compareBottom(int var8) {
      assert var3 != null;
      return var3.method0(var1.method1(var8, var4));
    }

    @Override
    public void copy(int var9, int var8) {
      if (var0[var9] == null) {
        var0[var9] = new Type2();
      }
      var1.method1(var8, var0[var9]);
    }

    @Override
    public Type1<Type2> setNextReader(Type4 var10) throws IOException {
      final Type5 var11 = var10.method2().method3(var2);
      if (var11 != null) {
        var1 = var11.method4();
      } else {
        var1 = Type5.method5(var12);
      }
      return this;
    }
    
    @Override
    public void setBottom(final int var3) {
      this.var3 = var0[var3];
    }

    @Override
    public Type2 value(int var9) {
      return var0[var9];
    }

    @Override
    public int compareValues(Type2 var13, Type2 var14) {
      assert var13 != null;
      assert var14 != null;
      return var13.method0(var14);
    }

    @Override
    public int compareDocToValue(int var8, Type2 var15) {
      return var1.method1(var8, var4).method0(var15);
    }
  }
Change's id number: 36162
insert
/**
     * Delegation metadata is used to store the delegation strategy and delegate type of
     * closures.
     *
     * As closures can be organized in a hierachy, a delegation metadata may have a parent.
     */
    protected static class Type0 {
        private final Type0 var0;
        private final Type1 var1;
        private final int var2;

        public DelegationMetadata(final Type1 var1, final int var2, final Type0 var0) {
            this.var2 = var2;
            this.var1 = var1;
            this.var0 = var0;
        }

        public DelegationMetadata(final Type1 var1, final int var2) {
            this(var1, var2, null);
        }

        public int getStrategy() {
            return var2;
        }

        public Type1 getType() {
            return var1;
        }

        public Type0 getParent() {
            return var0;
        }
    }
Change's id number: 9000
insert
private static class Type0 extends Type1 {

    public EmptySource(Type2 var0) {
      super(var0, Type3.method0());
    }

    @Override
    public Type3 getBytes(int var1, Type3 var2) {
      var3 = 0;
      return var2;
    }

    @Override
    public double getFloat(int var1) {
      return 0d;
    }

    @Override
    public long getInt(int var1) {
      return 0;
    }

    @Override
    public Type1 asSortedSource() {
      if (method1() == var4 || method1() == var5) {
        
      }
      return super.method2();
    }

    @Override
    public int ord(int var1) {
      return 0;
    }

    @Override
    public Type3 getByOrd(int var6, Type3 var7) {
      var3 = 0;
      var8 = 0;
      return var7;
    }

    @Override
    public Type5 getDocToOrd() {
      return null;
    }

    @Override
    public int getValueCount() {
      return 1;
    }
    
  }
Change's id number: 9021
insert
private static class Type0 extends Type1 {
    private int var0 = 0;
    private int var1 = 0;
    private Type1 var2;
    private final int[] var3;
    private final Type2[] var4;
    private boolean var5;
    private Object var6; // cached array if supported

    public MultiSource(Type2[] var4, int[] var3, boolean var5, Type3 var7) {
      super(var7);
      this.var4 = var4;
      this.var3 = var3;
      assert var8 != 0;
      this.var5 = var5;
    }

    @Override
    public long getInt(int var9) {
      final int var10 = method0(var9);
      return var2.method1(var10);
    }

    private final int ensureSource(int var9) {
      if (var9 >= var1 && var9 < var1+var0) {
        return var9 - var1;
      } else {
        final int var11 = Type4.method2(var9, var3);
        assert var11 >= 0 && var11 < var8 : str0 + var11
            + str1 + var9 + str2 + Arrays.toString(var3);
        assert var4[var11] != null;
        try {
          if (var5) {
            var2 = var4[var11].var12.method3();
          } else {
            var2 = var4[var11].var12.method4();
          }
        } catch (IOException var13) {
          throw new RuntimeException(str3, var13); // TODO how should we
          // handle this
        }

        var1 = var4[var11].var1;
        var0 = var4[var11].var8;
        return var9 - var1;
      }
    }

    @Override
    public double getFloat(int var9) {
      final int var10 = method0(var9);
      return var2.method5(var10);
    }

    @Override
    public Type6 getBytes(int var9, Type6 var14) {
      final int var10 = method0(var9);
      return var2.method6(var10, var14);
    }

    @Override
    public Type7 asSortedSource() {
      try {
        if (var7 == var15 || var7 == var16) {
          Type5[] var17 = new Type5[var8];
          Comparator<Type6> var18 = null;
          for (int var19 = 0; var19 < var8; var19++) {
            var17[var19] = var4[var19].var12;
            if (!(var17[var19] instanceof Type8)) {
              Comparator<Type6> var20 = var17[var19].method3()
                  .method7().method8();
              assert var18 == null || var18 == var20;
              var18 = var20;
            }
          }
          assert var18 != null;
          final int var21 = method9();
          final Type9 var22 = Type10.method10(var7, var17,
              var18, var21);
          List<Type11> var4 = Type10.method11(
              method12(), new Type12[var8], var17, var22);
          Type13 var23 = new Type13(
              var7);
          final int var24 = Type10.method13(var22, var23,
              var4);
          final int[] var25 = new int[var21];
          for (Type11 var26 : var4) {
            var26.method14(var25);
          }
          return new Type15(var7, var18, var27,
              var28, var24, var25, var29);
        }
      } catch (IOException var13) {
        throw new RuntimeException(str3, var13);
      }
      return super.method7();
    }
    
    private int globalNumDocs() {
      int var30 = 0;
      for (int var19 = 0; var19 < var8; var19++) {
        var30 += var4[var19].var8;
      }
      return var30;
    }
    
    private int[] docBases() {
      int[] var31 = new int[var8];
      for (int var19 = 0; var19 < var8; var19++) {
        var31[var19] = var4[var19].var1;
      }
      return var31;
    }
    
    @Override
    public boolean hasArray() {
      boolean var32 = false;
      for (Type2 var26 : var4) {
        try {
          Type1 var33 = var12.method4();
          if (var33 instanceof Type17) {
            /*
             * empty source marks a gap in the array skip if we encounter one
             */
            continue;
          }
          var32 = true;
          if (!var33.method15()) {
            return false;
          }
        } catch (IOException var13) {
          throw new RuntimeException(str3, var13);
        }
      }
      return var32;
    }

    @Override
    public Object getArray() {
      if (!method15()) {
        return null;
      }
      try {
        Class<?> var34 = null;
        Object[] var35 = new Object[var8];
        int var0 = 0;
        for (int var19 = 0; var19 < var8; var19++) {
          Type2 var26 = var4[var19];
          Type1 var33 = var12.method4();
          Object var36 = null;
          if (!(var33 instanceof Type17)) {
            // EmptySource is skipped - marks a gap in the array
            var36 = var33.method16();
          }
          var0 += var8;
          if (var36 != null) {
            if (var34 == null) {
              var34 = var36.getClass().getComponentType();
            }
            assert var34 == var36.getClass().getComponentType();
          }
          var35[var19] = var36;
        }
        assert var34 != null;
        synchronized (this) {
          if (var6 != null) {
            return var6;
          }
          final Object var37 = Array.newInstance(var34, var0);

          for (int var19 = 0; var19 < var8; var19++) {
            Type2 var26 = var4[var19];
            if (var35[var19] != null) {
              assert var8 == Array.getLength(var35[var19]);
              System.arraycopy(var35[var19], 0, var37, var1,
                  var8);
            }
          }
          return var6 = var37;
        }
      } catch (IOException var13) {
        throw new RuntimeException(str3, var13);
      }
    }
  }
Change's id number: 9007
insert
public static class Type0 extends Type1 {
    final int var0;
    final Type2 var1;
    final int var2;

    public EmptyFixedDocValues(int var0, Type3 var3, int var2) {
      this.var0 = var0;
      this.var1 = new Type4(var3, var2);
      this.var2 = var2;
    }

    @Override
    protected Type2 loadSource() throws IOException {
      return var1;
    }

    @Override
    public Type3 getType() {
      return var1.method0();
    }

    @Override
    public int getValueSize() {
      return var2;
    }

    @Override
    protected Type2 loadDirectSource() throws IOException {
      return var1;
    }
  }
-------------------------------------------
Context: P:IfStatement{expression},L:,R:Block{thenStatement}
Number of change: 1647
Change's id number: 580
insert
var0 != null
Change's id number: 46
update
var0
to
var0
Change's id number: 1643
replace
var0 != null
with
var0 != null
Change's id number: 2280
replace
method0()
with
method0(var0)
Change's id number: 8972
replace
var0 != null && var1 < 0
with
var0 < 0
-------------------------------------------
Context: P:WhileStatement{statements},L:IfStatement{statements},R:
Number of change: 46
Change's id number: 36950
replace
if (var0.startsWith(var1)) {
                String var2 = var0.substring(var1.length()).trim();
                var2 = method0(var2);
                method1(var2);
            } else if (var0.startsWith(var3)) {
                String var4 = var0.substring(var3.length()).trim();
                var5.add(method0(var4));
            } else if (var0.startsWith(var6)) {
                if (var7 != null)
                    throw new IOException(str0 + var8 + str1 + var0);
                var7 = var0.substring(var6.length()).trim();
            } else if (var0.startsWith(var9)) {
                String var10 = var0.substring(var9.length()).trim();
                int var11 = var10.indexOf('=');
                if (var11 == -1) {
                    throw new IOException(str2 + var8 + str1 + var0);
                }
                String var12 = var10.substring(0, var11);
                String var13 = method0(var10.substring(var11 + 1));
                System.setProperty(var12, var13);
            } else {
                throw new IOException(str3 + var8 + str1 + var0);
            }
with
if (var0.startsWith(var1)) {
                String var2 = var0.substring(var1.length()).trim();
                var2 = method0(var2);
                method1(var2);
            } else if (var0.startsWith(var3)) {
                if (var4 != null)
                    throw new IOException(str0 + var5 + str1 + var0);
                var4 = var0.substring(var3.length()).trim();
            } else if (var0.startsWith(var6)) {
                String var7 = var0.substring(var6.length()).trim();
                int var8 = var7.indexOf('=');
                if (var8 == -1) {
                    throw new IOException(str2 + var5 + str1 + var0);
                }
                String var9 = var7.substring(0, var8);
                String var10= method0(var7.substring(var8+1));
                System.setProperty(var9, var10);
            } else {
                throw new IOException(str3 + var5 + str1 + var0);
            }
Change's id number: 597
insert
var0++
Change's id number: 37345
insert
var0 = var1 ? null : var0.method0()
Change's id number: 3325
insert
var0[0]++
Change's id number: 6267
insert
var0 = var0.method0()
-------------------------------------------
Context: P:IfStatement{statements},L:Assignment{statements},R:Assignment{statements}
Number of change: 99
Change's id number: 329
insert
var0 = var1.method0()
Change's id number: 2281
replace
var0 = var1.method0()
with
var0 = method0()
Change's id number: 427
replace
var0.method0()
with
var0.method0()
Change's id number: 120
insert
var0 = null
Change's id number: 5145
replace
var0 = var1
with
var0.method0(var1)
-------------------------------------------
Context: P:MethodInvocation{arguments},L:SimpleName{name},R:
Number of change: 821
Change's id number: 46
update
var0
to
var0
Change's id number: 49
update
str0
to
str0
Change's id number: 271
insert
var0.method0()
Change's id number: 333
replace
var0.method0()
with
var0
Change's id number: 365
replace
var0
with
var0
-------------------------------------------
Context: P:MethodInvocation{expression},L:,R:SimpleName{name}
Number of change: 461
Change's id number: 46
update
var0
to
var0
Change's id number: 383
update
Type0
to
Type0
Change's id number: 62
insert
var0
Change's id number: 651
update
var0
to
method0
Change's id number: 37
replace
method0()
with
method0()
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:MethodDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
Number of change: 127
Change's id number: 272
insert
private int var0;
Change's id number: 1106
insert
Type0 var0;
Change's id number: 9491
insert
/** Returned by {@link #getTerms} */
  public abstract static class Type0 {
    /** The BytesRef argument must not be null; the method
     *  returns the same BytesRef, or an empty (length=0)
     *  BytesRef if the doc did not have this field or was
     *  deleted. */
    public abstract Type1 getTerm(int var0, Type1 var1);

    /** Returns true if this doc has this field and is not
     *  deleted. */
    public abstract boolean exists(int var0);

    /** Number of documents */
    public abstract int size();
  }
Change's id number: 31780
insert
static final Type0 var0 = 
      var1.method0().method1();
Change's id number: 1463
insert
private static final Pattern var0 = Pattern.compile(str0);
-------------------------------------------
Context: P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
Number of change: 207
Change's id number: 193
insert
Type0 var0
Change's id number: 275
insert
int var0
Change's id number: 285
replace
Type0 var0
with
Type0 var0
Change's id number: 34956
replace
@Type0(Type1.class) Type2 var0
with
Type0 var0
Change's id number: 659
insert
final Type0 var0
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:SimpleName{name},R:FieldDeclaration{bodyDeclarations}
Number of change: 54
Change's id number: 362
insert
private final Type0 var0;
Change's id number: 40863
insert
/**
     * Log instance.
     */
    private static final Type0 var0 = var1.method0(Type1.class);
Change's id number: 4182
insert
private int var0 = 16;
Change's id number: 17460
replace
private final Map<Integer,String> var0;
with
private final Map<Integer,String> var0;
Change's id number: 7255
insert
public final long var0;
-------------------------------------------
Context: P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
Number of change: 601
Change's id number: 20
insert
method0()
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 271
insert
var0.method0()
Change's id number: 2430
insert
String var0 = var0;
Change's id number: 2017
replace
var0.method0(var1)
with
var0.method0(var1)
-------------------------------------------
Context: P:MethodInvocation{arguments},L:SimpleName{name},R:QualifiedName{arguments}
Number of change: 31
Change's id number: 305
update
var0
to
var0
Change's id number: 46
update
var0
to
var0
Change's id number: 273
replace
var0
with
var0.method0()
Change's id number: 297
insert
var0
Change's id number: 448
replace
var0
with
var0.method0()
-------------------------------------------
Context: P:ClassInstanceCreation{arguments},L:ClassInstanceCreation{arguments},R:
Number of change: 28
Change's id number: 365
replace
var0
with
var0
Change's id number: 46
update
var0
to
var0
Change's id number: 2054
replace
var0
with
false
Change's id number: 655
insert
false
Change's id number: 6835
insert
new Type0() {
          
          @Override
          public void command() {
            try {
              Type2.this.var0.method0();
            } catch (Exception var1) {
              var2.method1(str0, var1);
            }
          }
        }
-------------------------------------------
Context: P:ForStatement{statements},L:MethodInvocation{statements},R:
Number of change: 141
Change's id number: 9341
insert
if (var0 != -1) {
          int var1 = Integer.signum(new Integer(var2).compareTo(new Integer(var0)));
          int var3 = Integer.signum(var4.compare(var5, var6));
          if (var1 != var3) {
            throw new RuntimeException(str0 + var7 + str1 + var1 + str2 + var3);
          }
        }
Change's id number: 22413
insert
var0.append(var1)
Change's id number: 2596
insert
var0.put(var1, var2[var3])
Change's id number: 2471
insert
if (var0.method0(0) == (byte) 'T') {
            return var1 = var2;
          }
Change's id number: 4504
replace
method0(var0)
with
var0 += method0(var1)
-------------------------------------------
Context: P:ClassInstanceCreation{arguments},L:SimpleType{type},R:
Number of change: 141
Change's id number: 49
update
str0
to
str0
Change's id number: 35307
replace
str0 + var0 + str1 + var1 + str2
with
str0 + var0 + 
                    str1 + var1 + str2
Change's id number: 46
update
var0
to
var0
Change's id number: 26786
insert
str0
        +str1+var0+str2+var1
Change's id number: 271
insert
var0.method0()
-------------------------------------------
Context: P:InfixExpression{leftOperand},L:,R:PrefixExpression{rightOperand}
Number of change: 50
Change's id number: 305
update
var0
to
var0
Change's id number: 36523
replace
var0.size() == var1 - 1
with
(var0.size() == (var1 - 1))
Change's id number: 1454
replace
!var0
with
!var0
Change's id number: 6034
replace
var0.method0() != null
with
var0.method0() != null
Change's id number: 427
replace
var0.method0()
with
var0.method0()
-------------------------------------------
Context: P:IfStatement{thenStatement},L:InstanceofExpression{expression},R:IfStatement{elseStatement}
Number of change: 28
Change's id number: 37141
replace
{
                    method0(var0);
                }
with
{
                    method0(var0);
                }
Change's id number: 2150
replace
{
      for (Type0 var0 : (Type1) var1) {
        if (!var0.method0()) {
          var2.method1(Arrays.asList(method2(var0.method3(), var3, var4, var5)));
        }
      }
    }
with
{
      var0.method0(Arrays.asList(method1(((Type0)var1).method2(), var2, var3,
          var4)));
    }
Change's id number: 2210
insert
{
      final Type0 var0 = (Type0) var1;
      if (var0.method0().method1(var2)) {
        String var3 = var0.method2().method3();
        int var4[] = new int[var3.codePointCount(0, var3.length())];
        for (int var5, var6 = 0, var7 = 0; var6 < var3.length(); var6 += Character.charCount(var5)) {
          var4[var7++] = var5 = var3.codePointAt(var6);
        }
        int var8 = var9;
        int var10 = Math.min(var0.method4(), var8);
        String var11 = var12.method5(var4, var10, var9 - var10);
        Type1 var13 = new Type1(var11, var0.method6());
        String var14 = var12.method5(var4, 0, var10);
        Type2 var15 = var13.method7(var0.method8(), var14);
        var16.method9(new Type3(var15) {
          @Override
          public String toString() {
            return var0.method10();
          }
        });
      }
    }
Change's id number: 3947
insert
{
      final Type0 var0 = ((Type1) var1).method0();
      if (var0 != null) {
        method1( method2( var0, var1 ), var2, var3);
      }
    }
Change's id number: 4836
insert
{
      method0(((Type0) var0).method1(), var1);
    }
-------------------------------------------
Context: P:TryStatement{body},L:,R:CatchClause{catchClauses}
Number of change: 72
Change's id number: 27730
replace
{
        var0.close();
      }
with
{
        InputStream var0 = var1.getErrorStream();
        synchronized (var0) {
          var2.close();
        }
      }
Change's id number: 21255
insert
{
          method0();
        }
Change's id number: 1758
replace
{
    var0.method0();
  }
with
{
    if (var0 != null) {
      var0.method0();
    }
  }
Change's id number: 37454
replace
{
                return Type0.method0(var0, var1);
            }
with
{
                        return Type0.method0(var0, var1);
                    }
Change's id number: 1901
replace
{
      Map<String,Object> var0 = method0(var1);
      Map<String,Object> var2 = (Map<String, Object>)var0.get(str0);
      Map<String,Object> var3 = (Map<String, Object>)var2.get(var4);
      Map<String,Object> var5 = (Map<String, Object>)var0.get(str1);
      String var6 = (String) var5.get(var4);
      var7 = var3 != null && var3.containsKey(var8) || var6 != null;
    }
with
{
      boolean var0 = false;
      final long var1 = System.nanoTime();
      do{
        if (var0) {
          final int var2 = 1000;
          Thread.sleep(var2);
        }
        Map<String,Object> var3 = method0(var4);
        Map<String,Object> var5 = (Map<String, Object>)var3.get(str0);
        Map<String,Object> var6 = (Map<String, Object>)var5.get(var7);
        Map<String,Object> var8 = (Map<String, Object>)var3.get(str1);
        String var9 = (String) var8.get(var7);
        final boolean var10 = var6 != null && var6.containsKey(var11);
        var12 = var10 || var9 != null;
        var0 = var10 && var9==null && str2.equals(var6.get(str3));
      }while (var0 &&
          System.nanoTime() - var1 < var13);
    }
-------------------------------------------
Context: P:MethodDeclaration{statements},L:,R:EnhancedForStatement{statements}
Number of change: 54
Change's id number: 928
insert
Type0 var0 = new Type0(var1);
Change's id number: 4501
insert
long var0 = 0;
Change's id number: 30454
insert
final PriorityQueue<Type0> var0 = 
        new PriorityQueue<Type0>(64,
            var1);
Change's id number: 4171
replace
boolean var0 = false;
with
ArrayList<String> var0 = new ArrayList<>();
Change's id number: 930
insert
method0(var0)
-------------------------------------------
Context: P:IfStatement{thenStatement},L:InfixExpression{expression},R:
Number of change: 638
Change's id number: 3172
insert
{
        var0 = var1;
      }
Change's id number: 3079
insert
return var0;
Change's id number: 36207
replace
{
                method0(var0, var1, var2);
            }
with
{
                    if (!var0.method0(var1, var2, var3)) {
                        method1(var1, var2, var3);
                    }
            }
Change's id number: 3904
replace
return false;
with
return false;
Change's id number: 759
insert
var0 = var1
-------------------------------------------
Context: P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:
Number of change: 450
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 30951
insert
Type0 var0 = new Type0(
                                        var1.method0(),
                                        var1.method1(),
                                        var1.method2(),
                                        var1.method3(),
                                        var1.method4(),
                                        var1.method5(),
                                        var2,
                                        var3,
                                        var4);
Change's id number: 33529
insert
boolean var0 = !method0(var1, str0, false);
Change's id number: 329
insert
var0 = var1.method0()
Change's id number: 29391
insert
Type0 var0 = (Type0)var1[var2-2];
-------------------------------------------
Context: P:TryStatement{statements},L:,R:VariableDeclarationStatement{statements}
Number of change: 85
Change's id number: 5705
insert
final Type0[] var0 = var1.method0();
Change's id number: 8702
replace
Type0.method0(var0, var1, 
                                   var2, 
                                   var3)
with
Type0.method0(var0, var1, 
                                   var2, 
                                   var3)
Change's id number: 19268
replace
var0.method0(var1, 0, var2)
with
var0.method0(var1, 0, var2)
Change's id number: 271
insert
var0.method0()
Change's id number: 21939
insert
Type0.method0( var0 )
-------------------------------------------
Context: P:EnhancedForStatement{parameter},L:,R:SimpleName{expression}
Number of change: 26
Change's id number: 285
replace
Type0 var0
with
Type0 var0
Change's id number: 193
insert
Type0 var0
Change's id number: 292
replace
String var0
with
String var0
Change's id number: 1167
insert
String var0
Change's id number: 3135
replace
Type0 var0
with
final Type0 var0
-------------------------------------------
Context: P:IfStatement{statements},L:EnhancedForStatement{statements},R:
Number of change: 26
Change's id number: 864
insert
var0.method0(var1.method1())
Change's id number: 294
insert
return var0;
Change's id number: 11580
replace
var0 = var1
with
var0.method0(Type0.method1(new Type1<Object>(var1)))
Change's id number: 11793
insert
if (var0) {
        this.var1 = var2; 
      } else {
        this.var2 = var2;
      }
Change's id number: 1854
insert
var0.remove(null)
-------------------------------------------
Context: P:MethodDeclaration{statements},L:MethodInvocation{statements},R:ForStatement{statements}
Number of change: 36
Change's id number: 6793
insert
var0.addAndGet(var1.method0())
Change's id number: 228
insert
var0.writeInt(var1)
Change's id number: 5667
replace
int var0 = 0;
with
Type0 var0 = new Type0();
Change's id number: 7116
replace
int var0 = method0(var1, var2);
with
int var0 = 0;
Change's id number: 17491
insert
assert Type0.method0(var0, var1);
-------------------------------------------
Context: P:EnhancedForStatement{statements},L:MethodInvocation{statements},R:
Number of change: 58
Change's id number: 19518
insert
var0.put(var1.getKey(), var2)
Change's id number: 930
insert
method0(var0)
Change's id number: 641
insert
return true;
Change's id number: 6259
replace
var0.method0(var1)
with
var0 = var1.method0(var2)
Change's id number: 7135
replace
var0 = false
with
var0.method0(var1)
-------------------------------------------
Context: P:IfStatement{elseStatement},L:Block{thenStatement},R:
Number of change: 675
Change's id number: 36219
insert
{
                throw new Type0(str0
                        + var0.method0()+str1+var0.method1()
                        + str2+var0.method2());
            }
Change's id number: 31019
replace
if (var0 instanceof Type0) {
              // Don't log the whole stack trace of these exceptions.
              // Way too noisy!
              var1.method0(var2);
            } else {
              var1.method0(var2, var0);
            }
with
{
              var0.method0(var1, var2);
            }
Change's id number: 8802
insert
if (var0 < var1) {
        return -1;
      } else {
        return 0;
      }
Change's id number: 2481
insert
{
        return var0;
      }
Change's id number: 31230
replace
{ // retry or failover

          if (var0 == var1) {
            String var2 = str0 + var3.getName()
              + str1 + var4.getClass()
              + str2 + var5 + str3
              + str4 + method0(var6);
            if (var7.method1()) {
              var7.method2(var2, var8);
            } else {
              var7.method3(var2);
            }
          } else {
            if(var7.method1()) {
              var7.method2(str0 + var3.getName()
                  + str1 + var4.getClass() + str5 +
                  method0(var6), var8);
            }
          }
          
          if (var6 > 0) {
            Type2.method4(var6);
          }
          
          if (var0 == var1) {
            // Make sure that concurrent failed method invocations only cause a
            // single actual fail over.
            synchronized (var9) {
              if (var10 == var11) {
                var9.method5(var4);
                var11++;
                var4 = var9.method6();
              } else {
                var7.method3(str6
                    + str7);
              }
            }
            var5++;
          }
        }
with
if (var0 == var1) {
          var2.method0(str0 + var3.getName()
              + str1 + var4.getClass()
              + str2 + var5 + str3
              + str4, var6);
          // Make sure that concurrent failed method invocations only cause a
          // single actual fail over.
          synchronized (var7) {
            if (var8 == var9) {
              var7.method1(var4);
              var9++;
              var4 = var7.method2();
            } else {
              var2.method0(str5
                  + str6);
            }
          }
          var5++;
        }
-------------------------------------------
Context: P:IfStatement{thenStatement},L:InfixExpression{expression},R:Block{elseStatement}
Number of change: 90
Change's id number: 9269
replace
{
        var0[var1] = var2;
        var3[var1] = null;
      }
with
{
        var0[var1] = var2;
        var3[var1] = null;
      }
Change's id number: 4893
insert
{
        return 1;
      }
Change's id number: 8980
replace
{
      var0 = new Type1((Collection) var1, var2, var3, var4, var5, var6, var7, var8, var9);
    }
with
{
      var0 = Type1.method0(var1, var2, var3, (Collection) var4, var5, var6, var7, var8, var9, var10);
    }
Change's id number: 37187
insert
{
                Type0 var0 = var1;
                while (var0!=null) {
                    var0 = var0.method0();
                    Type1 var2 = var0.method1(var3);
                    if (var2 != null) {
                        if (var4!=null) var4.method2(var2);
                        method3(var5, var2.method4());
                        return true;
                    }
                    Type6 var6 = var0.method5(str0 + var7);
                    if (var6==null) var6 = var0.method5(str1+var7);
                    if (var6!=null) {
                        // check that a setter also exists
                        Type6 var8 = var0.method6(str2 + var7);
                        if (var8!=null) {
                            if (var4!=null) var4.method7(var6);
                            method3(var5, var6.method8());
                            return true;
                        }
                    }
                    if (!var9) {
                        Type7 var10 = var0.method9(var3);
                        if (var10 != null) {
                            if (var4!=null) var4.method10(var10);
                            method3(var5, var10.method4());
                            return true;
                        }
                    }
                    // if the property expression is an attribute expression (o.@attr), then
                    // we stop now, otherwise we must check the parent class
                    var0 = var9 ?null:var0.method11();
                }
                if (var11) {
                    var0 = var1;
                    while (var0 != null) {
                        var0 = var0.method0();

                        Type6 var6 = var0.method5(str0 + var7);
                        if (var6==null) var6 = var0.method5(str1+var7);
                        if (var6!=null) {
                            if (var4 != null) var4.method7(var6);
                            var5.method12(var12, var13);
                            method3(var5, var6.method8());
                            return true;
                        }
                        // if the property expression is an attribute expression (o.@attr), then
                        // we stop now, otherwise we must check the parent class
                        var0 = var9 ? null : var0.method11();
                    }
                }
            }
Change's id number: 5662
replace
{
      var0.method0(var1, true);
    }
with
var0.method0(true)
-------------------------------------------
Context: P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
Number of change: 254
Change's id number: 193
insert
Type0 var0
Change's id number: 1167
insert
String var0
Change's id number: 292
replace
String var0
with
String var0
Change's id number: 275
insert
int var0
Change's id number: 26767
replace
final String var0
with
String var0
-------------------------------------------
Context: P:IfStatement{thenStatement},L:MethodInvocation{expression},R:Block{elseStatement}
Number of change: 47
Change's id number: 29318
replace
{
      if (!var0) {
        method0(var1, var2, var3, var4);
      } else {
        method1(var1, var2, var4);
      }
    }
with
{
      method0(var0, var1, var2, var3);
    }
Change's id number: 205
replace
return var0;
with
return var0;
Change's id number: 30252
replace
{
      return var0 ? (var1
          ? str0
          : str1)
        : str2;
    }
with
{
      if (var0) {
        return var1 ? str0
            : str1;
      } else if (var2) {
        return str2;
      } else {
        return str3;
      }
    }
Change's id number: 30510
replace
{ // last component has a pattern
          // list parent directories and then glob the results
          var0 = method0(var1, var2);
          var3[0] = true;
        }
with
{ // last component has a pattern
          // list parent directories and then glob the results
          try {
            var0 = method0(var1, var2);
          } catch (FileNotFoundException var3) {
            var0 = null;
          }
          var4[0] = true;
        }
Change's id number: 1969
insert
{
            if (var0 != null) {
              var1 = Float.floatToIntBits(Float.parseFloat(var0));
            } else {
              var1 = Float.floatToIntBits(0.0f);
            }
          }
-------------------------------------------
Context: P:MethodDeclaration{statements},L:,R:WhileStatement{statements}
Number of change: 32
Change's id number: 789
insert
Type0 var0 = var1.method0(var2.method1());
Change's id number: 36485
replace
long var0 = 0;
with
Type0 var0 = new Type0(var1);
Change's id number: 316
insert
int var0 = 0;
Change's id number: 3051
insert
assert var0 > var1;
Change's id number: 7641
insert
Type0<Type1> var0 = var1.method0();
-------------------------------------------
Context: P:IfStatement{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
Number of change: 47
Change's id number: 9477
replace
final Type0 var0 = var1.method0(null);
with
final Type0 var0 = var1.method0(null);
Change's id number: 939
insert
var0.method0(str0)
Change's id number: 29010
insert
var0.method0(str0 + var1 + str1 +
          var2.getPort())
Change's id number: 403
replace
Type0 var0 = new Type0(var1, var2.method0(), true, var3);
with
Type0 var0 = var1.method0(var2, var3);
Change's id number: 1762
insert
Type0.method0(var0, var1)
-------------------------------------------
Context: P:WhileStatement{expression},L:,R:Block{body}
Number of change: 69
Change's id number: 8312
replace
true
with
(var0 = var1.method0()) != null
Change's id number: 1643
replace
var0 != null
with
var0 != null
Change's id number: 9988
replace
true
with
!var0
Change's id number: 11705
replace
method0()
with
method0() && !var0
Change's id number: 19076
replace
var0.method0()
with
!var0 && var1.method0()
-------------------------------------------
Context: P:ForStatement{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
Number of change: 28
Change's id number: 6545
insert
final boolean var0;
Change's id number: 3089
insert
double var0 = var1*var2[var3+1] + var4*var5[var3+1];
Change's id number: 6188
replace
if (var0 == null) {
          continue;
        }
with
if (var0 < var1) {
          int var2 = var3[var0];
          if (var4.method0(var2, var5, var5, var6) == null) {
            break;
          } else if (var7 != var8) {
            var9 = var10.method1(var9, var7);
          }
        }
Change's id number: 2627
insert
int var0 = var1;
Change's id number: 3896
insert
double var0 = 0.0;
-------------------------------------------
Context: P:MethodDeclaration{statements},L:MethodInvocation{statements},R:EnhancedForStatement{statements}
Number of change: 38
Change's id number: 101
replace
this.var0 = var0
with
this.var0 = var0
Change's id number: 5580
replace
final Type0 var0 = new Type0();
with
final Type0 var0 = new Type0();
Change's id number: 479
replace
Type0<Type1> var0 = new Type0<Type1>(var1.method0()) {
      @Override
      protected boolean method1(Type1 var2, Type1 var3) {
        return var2.method2() <= var3.method2();
      }
    };
with
final Type0 var0 = new Type1(var1, var2);
Change's id number: 2954
replace
Type0 var0 = null;
with
Type0 var0[] = new Type0[var1 - 1];
Change's id number: 5727
replace
Type0 var0 = new Type0();
with
boolean var0 = var1.size() != var2.size();
-------------------------------------------
Context: P:MethodDeclaration{returnType2},L:TypeParameter{typeParameters},R:SimpleName{name}
Number of change: 33
Change's id number: 27703
replace
Collection<Type0>
with
List<Type0>
Change's id number: 1491
replace
List<Type0>
with
Collection<Type0>
Change's id number: 8462
replace
Iterator<Type0>
with
Iterator<Type0>
Change's id number: 259
replace
Type0[]
with
Type0[]
Change's id number: 2510
replace
Type0<Type1>
with
Type0
-------------------------------------------
Context: P:ParameterizedType{typeArguments},L:SimpleType{type},R:
Number of change: 55
Change's id number: 21
update
Type0
to
Type0
Change's id number: 30927
update
Type0
to
InetSocketAddress
Change's id number: 28086
update
Type0
to
URI
Change's id number: 19558
update
Integer
to
String
Change's id number: 11522
insert
? extends Type0
-------------------------------------------
Context: P:ForStatement{statements},L:VariableDeclarationStatement{statements},R:MethodInvocation{statements}
Number of change: 596
Change's id number: 8935
replace
var0.method0(var1+var2, var3)
with
var0.method0(var1.method1(var2+var3, var4), var5)
Change's id number: 29300
insert
var0.readFully(var1)
Change's id number: 2626
insert
while (true) {
        var0 = method0(var0+1);
        if (var0 == var1) {
          break;
        }
        final Type1 var2 = var3.get(var0);
        if (!var4[var1].method1(var2) || !var4[var5].method1(var2)) {
          throw new IllegalArgumentException(str0);
        }
      }
Change's id number: 7227
insert
final Type0 var0 = var1.get(var2);
Change's id number: 1698
insert
int var0;
-------------------------------------------
Context: P:IfStatement{statements},L:Assignment{statements},R:ReturnStatement{statements}
Number of change: 29
Change's id number: 5095
replace
var0 = var1
with
var0.method0(var1)
Change's id number: 1054
insert
var0 = false
Change's id number: 35516
insert
if (var0!=null) var1.method0(var2, var0);
Change's id number: 5129
replace
var0 = var1+1
with
var0.method0(var1, (byte) var2)
Change's id number: 5123
replace
var0 = 0
with
var0.method0()
-------------------------------------------
Context: P:MethodDeclaration{returnType2},L:Modifier{modifiers},R:SimpleName{name}
Number of change: 329
Change's id number: 21
update
Type0
to
Type0
Change's id number: 959
replace
Type0
with
void
Change's id number: 8919
replace
Type0
with
long[]
Change's id number: 19641
update
CharSequence
to
String
Change's id number: 41
insert
void
-------------------------------------------
Context: P:TryStatement{catchClauses},L:Block{body},R:
Number of change: 52
Change's id number: 27077
insert
catch (IOException var0) {
      throw new Type0(var0);
    }
Change's id number: 26807
insert
catch (IOException var0) { 
        //make sure that we delete the ondisk file that we created 
        //earlier when we invoked cloneFileAttributes
        var1.method0(var2, true);
        throw var0;
      }
Change's id number: 27043
insert
catch (Type0 var0) {
      throw var1.method0(var0);
    }
Change's id number: 21937
insert
catch (Type0 var0) {
            throw Type1.method0(var0);
        }
Change's id number: 4577
insert
catch (Throwable var0) {
      if (var1) {
        Type0.method0(var0);
      }
      method1(var2, str0 + String.valueOf(var0.getMessage()) + str1);
      var3 = var0;
      if (var2 != null) {
        var0.printStackTrace(var2);
      }
    }
-------------------------------------------
Context: P:IfStatement{statements},L:IfStatement{statements},R:ReturnStatement{statements}
Number of change: 39
Change's id number: 36204
replace
method0(str0 + var0.method1() + str1, var0)
with
method0(var0)
Change's id number: 8975
replace
var0.add(new Type0(var1, null))
with
var0.method0(var1)
Change's id number: 3196
insert
method0(var0, var1)
Change's id number: 3075
insert
double var0 = Math.max(var1[var2], var1[var2+1]) + var3;
Change's id number: 1100
insert
String var0 = var1.method0();
-------------------------------------------
Context: P:TryStatement{finally},L:Block{body},R:
Number of change: 28
Change's id number: 21255
insert
{
          method0();
        }
Change's id number: 8173
insert
{
        var0.method0();
      }
Change's id number: 2719
insert
{
      // If we can't intersect line with world, then it's outside the world, so
      // we have to assume everything is included.
      var0.method0(var1);
    }
Change's id number: 22666
insert
{
                if (var0 != null) {
                    try {
                        var0.method0();
                    } catch (Type1 var1) {
                    }
                }
                var2 = var3;
            }
Change's id number: 43471
replace
{
          var0.method0(var1);
        }
with
{
          if (var0) {
            var1.method0(var2);
          }
        }
-------------------------------------------
Context: P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
Number of change: 411
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 30911
insert
try {
      if (var0 != null) var0.method0();
    } catch (Exception var1) {
      var2.method1(str0, var1);
    }
Change's id number: 9270
insert
if (var0 == null) {
      var0 = new Type1(var1, var2);
    }
Change's id number: 20657
insert
int var0 = var1.position();
Change's id number: 36391
insert
boolean var0 = Type0.method0(var1);
-------------------------------------------
Context: P:ForStatement{statements},L:Assignment{statements},R:Assignment{statements}
Number of change: 162
Change's id number: 10305
replace
final int var0 = var1[var2++] & 0xFF;
with
final long var0 = var1[var2++];
Change's id number: 17355
insert
var0 |= var1 && var2 != var3
Change's id number: 17420
insert
var0 |= var1 && var2 == var3
Change's id number: 4727
insert
if (var0[var1] != null) {
        var0[var1] = var0[var1].method0();
      }
Change's id number: 10462
insert
var0[var1++] = (var2 >>> 40) & 1L
-------------------------------------------
Context: P:IfStatement{statements},L:,R:ForStatement{statements}
Number of change: 28
Change's id number: 316
insert
int var0 = 0;
Change's id number: 4982
insert
Throwable var0 = null;
Change's id number: 648
insert
boolean var0 = false;
Change's id number: 3155
insert
int var0 = -1;
Change's id number: 21131
replace
var0 = 1
with
method0(str0 + var0)
-------------------------------------------
Context: P:WhileStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
Number of change: 45
Change's id number: 489
insert
var0 = method0(var0, var1)
Change's id number: 35460
insert
if (var0.method0(var1)) {
                        var2 = false;
                    } else {
                        var2 = var3;
                    }
Change's id number: 42863
replace
float var0;
with
String var0 = var1.method0();
Change's id number: 4275
insert
if (var0 == -1) {
        throw new IllegalArgumentException(str0 + var1 + str1);
      }
Change's id number: 7588
insert
int[] var0 = null;
-------------------------------------------
Context: P:MethodInvocation{name},L:SimpleName{expression},R:SimpleName{arguments}
Number of change: 44
Change's id number: 208
update
method0
to
method0
Change's id number: 420
update
method0
to
Type0
Change's id number: 19908
update
sort
to
method0
Change's id number: 23486
update
skipBytes
to
Type0
Change's id number: 23812
update
removeElement
to
remove
-------------------------------------------
Context: P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:
Number of change: 118
Change's id number: 62
insert
var0
Change's id number: 365
replace
var0
with
var0
Change's id number: 297
insert
var0
Change's id number: 305
update
var0
to
var0
Change's id number: 20
insert
method0()
-------------------------------------------
Context: P:IfStatement{statements},L:MethodInvocation{statements},R:ReturnStatement{statements}
Number of change: 64
Change's id number: 271
insert
var0.method0()
Change's id number: 36403
insert
int var0 = var1.method0(str0, var2, true);
Change's id number: 6946
insert
var0.method0().method1(var1)
Change's id number: 31092
replace
var0.method0(var1, var2)
with
var0.method0(var1, var2, var3)
Change's id number: 36411
insert
var0.method0(var1, 2)
-------------------------------------------
Context: P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
Number of change: 199
Change's id number: 21
update
Type0
to
Type0
Change's id number: 17859
replace
Set<?>
with
Type0
Change's id number: 799
update
int
to
long
Change's id number: 4680
replace
Type0
with
long
Change's id number: 9177
replace
Type0
with
short[]
-------------------------------------------
Context: P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
Number of change: 235
Change's id number: 275
insert
int var0
Change's id number: 193
insert
Type0 var0
Change's id number: 578
insert
boolean var0
Change's id number: 292
replace
String var0
with
String var0
Change's id number: 595
replace
int var0
with
int var0
-------------------------------------------
Context: P:MethodDeclaration{body},L:SimpleType{thrownExceptionTypes},R:
Number of change: 440
Change's id number: 9046
replace
{
    super(var0, var1);
  }
with
{
    this(var0, var1, false);
  }
Change's id number: 31188
replace
{
    assert var0.method0();
    final Type2 var1 = method1(var2.method2());
    if (var1 == null) {
      // Check if the replica is in the blockMap, if not
      // ignore the request for now. This could happen when BlockScanner
      // thread of Datanode reports bad block before Block reports are sent
      // by the Datanode on startup
      var3.method3(str0
          + var2 + str1);
      return;
    }
    method4(var1, var4);
  }
with
{
    var0.method0();
    try {
      final Type2 var1 = method1(var2.method2());
      if (var1 == null) {
        // Check if the replica is in the blockMap, if not
        // ignore the request for now. This could happen when BlockScanner
        // thread of Datanode reports bad block before Block reports are sent
        // by the Datanode on startup
        var3.method3(str0
            + var2 + str1);
        return;
      }
      method4(var1, var4);
    } finally {
      var0.method5();
    }
  }
Change's id number: 24192
replace
{
		method0();
        return var0.method1();
    }
with
{
        try
        {
    		method0();
            return var0.method1();
		} catch (SQLException var1) {
			method2(var1);
			throw var1;
		}
    }
Change's id number: 9061
replace
{
    method0();
    return var0.method1(var1);
  }
with
{
    method0();
    final Type1 var0 = var1;
    if (var0 == null) {
      return null;
    }
    return var0.method1(var2);
  }
Change's id number: 9197
replace
{
    final Type0 var0 = var1.method0(var2);
    if (var0 != null) {
      // Not cached here by FieldCacheImpl (cached instead
      // per-thread by SegmentReader):
      return new Type2() {
        @Override
        public int get(int var3) {
          return (int) var0.method1(var3);
        }
      };
    } else {
      return (Type2) var4.get(var5).method1(var1, new Type5(var2, var6), var7);
    }
  }
with
{
    return (int[]) var0.get(var1).method0(var2, new Type2(var3, var4), var5);
  }
-------------------------------------------
Context: P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SimpleType{thrownExceptionTypes}
Number of change: 134
Change's id number: 578
insert
boolean var0
Change's id number: 285
replace
Type0 var0
with
Type0 var0
Change's id number: 1167
insert
String var0
Change's id number: 4993
replace
boolean var0
with
int var0
Change's id number: 669
insert
Type0<Type1> var0
-------------------------------------------
Context: P:ClassInstanceCreation{arguments},L:SimpleName{arguments},R:MethodInvocation{arguments}
Number of change: 27
Change's id number: 46
update
var0
to
var0
Change's id number: 305
update
var0
to
var0
Change's id number: 22151
replace
var0
with
var0.method0()[var1].booleanValue()
Change's id number: 533
replace
new Type0(var0, var1.method0(), var2.method1(), var3)
with
var0.method0(var1, var2)
Change's id number: 333
replace
var0.method0()
with
var0
-------------------------------------------
Context: P:InfixExpression{leftOperand},L:,R:InfixExpression{rightOperand}
Number of change: 126
Change's id number: 15594
replace
var0.position()
with
var0
Change's id number: 5385
update
var0 < 0
to
<=
Change's id number: 25890
replace
var0 == null
with
(var0 && var1 == null)
Change's id number: 1203
replace
!var0
with
var0 == false
Change's id number: 110
insert
var0 == null
-------------------------------------------
Context: P:MethodInvocation{name},L:SimpleName{expression},R:MethodInvocation{arguments}
Number of change: 31
Change's id number: 208
update
method0
to
method0
Change's id number: 1478
update
method0
to
var0
Change's id number: 9668
update
println
to
write
Change's id number: 19908
update
sort
to
method0
Change's id number: 26649
update
valueOf
to
method0
-------------------------------------------
Context: P:MethodDeclaration{statements},L:MethodInvocation{statements},R:Assignment{statements}
Number of change: 99
Change's id number: 16
insert
this.var0 = var0
Change's id number: 8915
insert
method0(var0, false)
Change's id number: 36519
insert
for (Type0 var0 : var1.method0()) {
            if (var0.method1()) {
                var0.method2().method3(this);
            }
            method4(var0);
        }
Change's id number: 120
insert
var0 = null
Change's id number: 35235
insert
method0(var0, str0, !var1)
-------------------------------------------
Context: P:IfStatement{statements},L:,R:IfStatement{statements}
Number of change: 179
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 291
insert
Type0 var0 = method0(var1);
Change's id number: 3970
insert
long var0 = var1.method0();
Change's id number: 676
insert
var0 = method0(var1)
Change's id number: 483
insert
Type0 var0 = null;
-------------------------------------------
Context: P:AssertStatement{expression},L:,R:
Number of change: 37
Change's id number: 20
insert
method0()
Change's id number: 17400
replace
var0.method0() == var1
with
var0 == var1
Change's id number: 5196
replace
var0 <= var1
with
var0 <= var1.method0()
Change's id number: 5272
replace
var0 == var1
with
var0.method0() == var1
Change's id number: 14550
replace
var0.position() + var1 * method0() <= var0.limit()
with
var0 + var1 * method0() <= var2
-------------------------------------------
Context: P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
Number of change: 227
Change's id number: 20
insert
method0()
Change's id number: 8951
replace
var0 = var1.method0().method1(var2)
with
var0 = var1 ? var2.method0() : var2.method1()
Change's id number: 296
insert
assert method0();
Change's id number: 36392
replace
if (var0 == var1) {
            var0 = Integer.class;
        } else if (var0 == var1) {
            var0 = Byte.class;
        } else if (var0 == var1) {
            var0 = Long.class;
        } else if (var0 == var1) {
            var0 = Double.class;
        } else if (var0 == var1) {
            var0 = Float.class;
        } else if (var0 == var1) {
            var0 = Boolean.class;
        } else if (var0 == var1) {
            var0 = Character.class;
        } else if (var0 == var1) {
            var0 = Short.class;
        }
with
if (var0 == var1) {
            var0 = Integer.class;
        } else if (var0 == var1) {
            var0 = Byte.class;
        } else if (var0 == var1) {
            var0 = Long.class;
        } else if (var0 == var1) {
            var0 = Double.class;
        } else if (var0 == var1) {
            var0 = Float.class;
        }
Change's id number: 6522
insert
method0(str0)
-------------------------------------------
Context: P:MethodDeclaration{statements},L:SuperConstructorInvocation{statements},R:Assignment{statements}
Number of change: 41
Change's id number: 16
insert
this.var0 = var0
Change's id number: 8871
replace
final Type0 var0 = var1.method0();
with
Type0 var0 = new Type0();
Change's id number: 101
replace
this.var0 = var0
with
this.var0 = var0
Change's id number: 1488
insert
this.var0 = var1.method0(var2)
Change's id number: 1351
insert
this.var0 = var1
-------------------------------------------
Context: P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:StringLiteral{extendedOperands}
Number of change: 65
Change's id number: 333
replace
var0.method0()
with
var0
Change's id number: 271
insert
var0.method0()
Change's id number: 62
insert
var0
Change's id number: 273
replace
var0
with
var0.method0()
Change's id number: 9343
replace
NumberFormat.getInstance(var0).format(var1)
with
var0.format(var1)
-------------------------------------------
Context: P:IfStatement{expression},L:,R:MethodInvocation{thenStatement}
Number of change: 55
Change's id number: 1643
replace
var0 != null
with
var0 != null
Change's id number: 110
insert
var0 == null
Change's id number: 35102
insert
var0.containsKey(var1)
Change's id number: 9144
replace
method0(var0, var1, var2, var3, var4)
with
method0(var0, var1, var2, var3, var4)
Change's id number: 4624
replace
(var0 & 1) != 0
with
var0
-------------------------------------------
Context: P:EnhancedForStatement{statements},L:IfStatement{statements},R:
Number of change: 71
Change's id number: 8913
insert
if (var0.method0()) {
          Type1 var1 = var2.get(var3);
          var2.put(var3, method1(var1, var4.method2(var5))); 
        }
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 3196
insert
method0(var0, var1)
Change's id number: 36181
insert
if (var0 && var1) break;
Change's id number: 864
insert
var0.method0(var1.method1())
-------------------------------------------
Context: P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
Number of change: 77
Change's id number: 928
insert
Type0 var0 = new Type0(var1);
Change's id number: 316
insert
int var0 = 0;
Change's id number: 1333
insert
Type0 var0 = var1;
Change's id number: 44031
insert
if (var0 > 7) {
      int var1 = var2;
      int var3 = var4 - 1;
      if (var0 > 40) {
        var0 /= 8;
        var1 = method0(var5, var1, var1 + var0, var1 + (2 * var0),
            var6);
        var7 = method0(var5, var7 - var0, var7, var7 + var0, var6);
        var3 = method0(var5, var3 - (2 * var0), var3 - var0, var3, var6);
      }
      var7 = method0(var5, var1, var7, var3, var6);
    }
Change's id number: 4266
insert
if (var0 == null) {
        return;
      }
-------------------------------------------
Context: P:IfStatement{expression},L:,R:Block{elseStatement}
Number of change: 36
Change's id number: 580
insert
var0 != null
Change's id number: 62
insert
var0
Change's id number: 930
insert
method0(var0)
Change's id number: 4174
insert
var0.method0() > 0 || var1
Change's id number: 17496
insert
var0 == '゜'
-------------------------------------------
Context: P:TryStatement{statements},L:MethodInvocation{statements},R:
Number of change: 142
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 31072
insert
Type0 var0 = new Type0(var1, 
                                            new Type2[] {var2});
Change's id number: 294
insert
return var0;
Change's id number: 120
insert
var0 = null
Change's id number: 641
insert
return true;
-------------------------------------------
Context: P:TryStatement{statements},L:Assignment{statements},R:IfStatement{statements}
Number of change: 29
Change's id number: 271
insert
var0.method0()
Change's id number: 3196
insert
method0(var0, var1)
Change's id number: 489
insert
var0 = method0(var0, var1)
Change's id number: 5406
insert
if (var0 >= var1) {
        // NOTE: data file is too costly to verify checksum against all the bytes on open,
        // but for now we at least verify proper structure of the checksum footer: which looks
        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption
        // such as file truncation.
        Type0.method0(var2);
      }
Change's id number: 7611
insert
int var0 = method0(var1);
-------------------------------------------
Context: P:WhileStatement{statements},L:VariableDeclarationStatement{statements},R:
Number of change: 58
Change's id number: 9207
insert
if (var0 == null) {
        // no values
        var0 = new int[var1];
      }
Change's id number: 37547
insert
if(var0 == var1) {
                                            var1 = var0.replace(str0, str1); // GROOVY-5063
                                        }
Change's id number: 37549
insert
String var0 = var1.replace(str0, str1);
Change's id number: 26812
replace
if (var0.startsWith(var1) || var2) {
            var3.method0(var4, var5.getKey(), var5.getValue());
          }
with
var0.method0(var1, var2.getKey(), var2.getValue())
Change's id number: 5959
insert
final String var0 = var1.getKey();
-------------------------------------------
Context: P:WhileStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
Number of change: 39
Change's id number: 8447
insert
var0[var1] = var2
Change's id number: 9333
replace
assert var0.method0();
with
method0(var0)
Change's id number: 29810
replace
final byte[] var0 = var1[var2 + 1];
with
Type0 var0 = (Type0)var1;
Change's id number: 36563
insert
if (var0!=null) {
                            // it's not a call on this, yet we need to check if a field is defined
                            Type1 var1 = var2.method0(var3);
                            if (var1 != null) {
                                if (var4 != null) var4.method1(var1);
                                method2(var5, var1.method3());
                                method4(var5, var1.method3());
                                return true;
                            }
                        }
Change's id number: 37365
insert
if (var0!=null) {
                        // check that a setter also exists
                        Type0 var1 = var2.method0(str0 + var3);
                        if (var1!=null) {
                            if (var4!=null) var4.method1(var0);
                            method2(var5, var0.method3());
                            return true;
                        }
                    }
-------------------------------------------
Context: P:VariableDeclarationStatement{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
Number of change: 80
Change's id number: 21
update
Type0
to
Type0
Change's id number: 81
replace
Type0
with
boolean
Change's id number: 8950
replace
Type0
with
float[]
Change's id number: 9177
replace
Type0
with
short[]
Change's id number: 4112
replace
Type0
with
Type0[]
-------------------------------------------
Context: P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
Number of change: 58
Change's id number: 1798
insert
final Type0 var0 = var1.method0();
Change's id number: 37565
replace
Type0[] var0 = new Type0[var1];
with
Type0 var0 = Type1.method0(var1, var2);
Change's id number: 2895
insert
Type0[] var0 = new Type0[var1];
Change's id number: 19152
insert
final HashSet<Type0> var0 = var1[var2];
Change's id number: 19290
replace
var0[0].method0()
with
var0.method0(var1)
-------------------------------------------
Context: P:FieldDeclaration{fragments},L:SimpleType{type},R:
Number of change: 155
Change's id number: 384
replace
var0
with
var0
Change's id number: 1908
replace
var0 = str0
with
var0 = str0
Change's id number: 36187
replace
var0 = new Type0(new Type1() {
        public void returnStatementAdded(final Type3 var1) {
            if (var1.method0().equals(var2)) return;
            Type6 var3 = var4;
            var4 = null;
            try {
                method1(var1);
                if (var5 != null) {
                    method2(method3(var1.method0()));
                }
            } finally {
                var4 = var3;
            }
        }
    })
with
var0 = new Type0(var1)
Change's id number: 5364
replace
var0
with
var0 = Type0.method0()
Change's id number: 8910
replace
var0 = new Type0(var1.method0())
with
var0 = new Type0()
-------------------------------------------
Context: P:ClassInstanceCreation{arguments},L:ParameterizedType{type},R:
Number of change: 26
Change's id number: 305
update
var0
to
var0
Change's id number: 727
insert
var0.size()
Change's id number: 2991
insert
3
Change's id number: 333
replace
var0.method0()
with
var0
Change's id number: 3525
insert
new Type0()
-------------------------------------------
Context: P:ArrayInitializer{expressions},L:ClassInstanceCreation{expressions},R:ClassInstanceCreation{expressions}
Number of change: 47
Change's id number: 10354
replace
new Type0()
with
new Type0(5)
Change's id number: 10356
replace
new Type0()
with
new Type0(3)
Change's id number: 10358
replace
new Type0()
with
new Type0(8)
Change's id number: 10363
replace
new Type0()
with
new Type0(2)
Change's id number: 10381
replace
new Type0()
with
new Type0(56)
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
Number of change: 52
Change's id number: 3323
insert
private Type0[] var0;
Change's id number: 2498
insert
final Type0 var0 = new Type0();
Change's id number: 1601
insert
private boolean var0;
Change's id number: 27637
insert
static class Type0 extends Type1 {
    Type2<Type3> var0 = var1.method0();
    String var2;

    private SetAclOp() {
      super(var3);
    }

    static Type0 getInstance() {
      return new Type0();
    }

    @Override
    void readFields(DataInputStream var4, int var5) throws IOException {
      Type5 var6 = var7.method1((DataInputStream)var4);
      var2 = var6.method2();
      var0 = Type6.method3(var6.method4());
    }

    @Override
    public void writeFields(DataOutputStream var8) throws IOException {
      Type7 var9 = var7.method5();
      if (var2 != null)
        var9.method6(var2);
      var9.method7(Type6.method8(var0));
      var9.method9().method10(var8);
    }

    @Override
    protected void toXml(Type8 var10) throws Type9 {
      Type10.method11(var10, str0, var2);
      for (Type3 var11 : var0) {
        var10.method12(str1, str1, str2, new Type12());
        Type10.method11(var10, str3, var11.method13().method14());
        Type10.method11(var10, str4, var11.method15().method14());
        Type10.method11(var10, str5, var11.method16());
        method17(var10, var11.method18());
        var10.method19(str1, str1, str2);
      }
    }

    @Override
    void fromXml(Type13 var12) throws Type14 {
      var2 = var12.method20(str0);
      if (!var12.method21(str2))
        return;

      List<Type13> var13 = var12.method22(str2);
      for (Type13 var14 : var13) {
        Type3 var11 = new Type15()
            .method23(var15.method24(var14.method20(str3)))
            .method25(var16.method24(var14.method20(str4)))
            .method26(var14.method20(str5))
            .method27(method28(var14)).method9();
        var0.method29(var11);
      }
    }
  }
Change's id number: 6294
insert
private class Type0 extends Type1 {

    final int var0;
    int[] var1;
    int var2;

    NoScoreCachingLeafCollector(Type2 var3, int var0) {
      super(var3);
      this.var0 = var0;
      var1 = new int[Math.min(var0, var4)];
      var2 = 0;
    }

    protected void grow(int var5) {
      var1 = Arrays.copyOf(var1, var5);
    }

    protected void invalidate() {
      var1 = null;
      var2 = -1;
      var6 = false;
    }

    protected void buffer(int var7) throws IOException {
      var1[var2] = var7;
    }

    @Override
    public void collect(int var7) throws IOException {
      if (var1 != null) {
        if (var2 >= var8) {
          if (var2 >= var0) {
            method0();
          } else {
            final int var5 = Math.min(Type3.method1(var2 + 1, var9), var0);
            method2(var5);
          }
        }
        if (var1 != null) {
          method3(var7);
          ++var2;
        }
      }
      super.method4(var7);
    }

    boolean hasCache() {
      return var1 != null;
    }

    int[] cachedDocs() {
      return var1 == null ? null : Arrays.copyOf(var1, var2);
    }

  }
-------------------------------------------
Context: P:MethodDeclaration{statements},L:,R:ForStatement{statements}
Number of change: 63
Change's id number: 10522
insert
assert var0 + var1 * method0() <= var2;
Change's id number: 604
insert
Type0 var0 = new Type0();
Change's id number: 9337
replace
Type0 var0 = new Type0();
with
Type0 var0 = var1.method0();
Change's id number: 23273
insert
Type0[] var0 = Type0.method0();
Change's id number: 296
insert
assert method0();
-------------------------------------------
Context: P:MethodInvocation{arguments},L:SimpleName{name},R:ClassInstanceCreation{arguments}
Number of change: 26
Change's id number: 1177
replace
Type0.class
with
Type0.class
Change's id number: 1179
replace
str0
with
var0
Change's id number: 62
insert
var0
Change's id number: 21900
replace
Long.valueOf(var0)
with
var0
Change's id number: 33463
replace
new Type0(var0.getKey())
with
method0(var0.getKey())
-------------------------------------------
Context: P:MethodInvocation{arguments},L:QualifiedName{arguments},R:
Number of change: 96
Change's id number: 305
update
var0
to
var0
Change's id number: 297
insert
var0
Change's id number: 46
update
var0
to
var0
Change's id number: 9076
replace
-2
with
-1
Change's id number: 1177
replace
Type0.class
with
Type0.class
-------------------------------------------
Context: P:MethodDeclaration{modifiers},L:,R:Modifier{modifiers}
Number of change: 32
Change's id number: 126
insert
@Override
Change's id number: 43
update
private
to
protected
Change's id number: 92
update
protected
to
private
Change's id number: 2620
insert
protected
Change's id number: 1330
update
private
to
public
-------------------------------------------
Context: P:MethodInvocation{arguments},L:SimpleName{name},R:MethodInvocation{arguments}
Number of change: 86
Change's id number: 305
update
var0
to
var0
Change's id number: 62
insert
var0
Change's id number: 49
update
str0
to
str0
Change's id number: 843
insert
Type0.class
Change's id number: 427
replace
var0.method0()
with
var0.method0()
-------------------------------------------
Context: P:IfStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
Number of change: 87
Change's id number: 36201
insert
if (var0.isEmpty()) {
                var0 = var1.method0(var2, var3, var4, var5, var6);
            }
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 35718
replace
if (!method0(var0, var1) && var2 instanceof Type3) {
                if (!(var3 instanceof Type4) || !((Type4) var3).method1()) {
                    Type5 var4 = new Type5(var2);
                    Type1[] var5 = method2(var4);
                    method3(var0, var5);
                    // perform additional type checking on arguments
                    Type3 var6 = (Type3) var2;
                    method4(var3, var0, var6);
                }
            }
with
if (method0(var0) && method0(var1)) {
            if (method1(var0, var1, var2)) {
                method2(str0 + var1 + str1 + var0, var2);
                return;
            }
        }
Change's id number: 6710
replace
var0.method0(var1, var2)
with
var0 = var1
Change's id number: 26344
insert
if (var0.equals(str0)) {
                    var1 = var2;
                    return;
                }
-------------------------------------------
Context: P:ReturnStatement{expression},L:,R:
Number of change: 590
Change's id number: 8918
replace
var0.method0(var1)
with
var0[var1]
Change's id number: 448
replace
var0
with
var0.method0()
Change's id number: 1035
replace
var0.method0()
with
var0.method0().method1()
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 2017
replace
var0.method0(var1)
with
var0.method0(var1)
-------------------------------------------
Context: P:IfStatement{statements},L:AssertStatement{statements},R:
Number of change: 32
Change's id number: 271
insert
var0.method0()
Change's id number: 17427
insert
var0.method0(null, false)
Change's id number: 2898
insert
return 0;
Change's id number: 7012
replace
var0.method0(var1, false)
with
method0()
Change's id number: 19270
replace
var0.method0()
with
var0++
-------------------------------------------
Context: P:TryStatement{statements},L:,R:IfStatement{statements}
Number of change: 54
Change's id number: 37
replace
method0()
with
method0()
Change's id number: 17542
insert
if (var0 != null) var0.method0();
Change's id number: 7386
insert
method0(var0)
Change's id number: 271
insert
var0.method0()
Change's id number: 645
insert
var0.method0()
-------------------------------------------
Context: P:MethodDeclaration{modifiers},L:,R:PrimitiveType{returnType2}
Number of change: 38
Change's id number: 43
update
private
to
protected
Change's id number: 396
insert
private
Change's id number: 126
insert
@Override
Change's id number: 168
update
public
to
private
Change's id number: 2499
insert
synchronized
-------------------------------------------
Context: P:ForStatement{body},L:PostfixExpression{updaters},R:
Number of change: 82
Change's id number: 9293
replace
{
      var0[var1] = Type0.method0((byte)var1);
    }
with
var0[var1] = Type0.method0((byte)var1)
Change's id number: 9427
replace
{
            int var0;
            if (var1[var2] == -1) {
              var0 = -1;
            } else {
              var0 = var3[var2].method0(var4[var2], var5);
            }
            var1[var2] = var0;
          }
with
{
            var0[var1] = var2[var1].method0(var3[var1], var4);
          }
Change's id number: 36427
replace
{
            Object var0 = var1[var2];
            var3[var2] = method0(var0);
        }
with
{
            Object var0 = var1[var2];
            if (var0 == null) {
                var3[var2] = null;
            } else if (var0 instanceof Type0) {
                var3[var2] = ((Type0) var0).method0();
            } else {
                var3[var2] = var0.getClass();
            }
        }
Change's id number: 9323
replace
{
            int var0;
            if (var1[var2] == -1) {
              var0 = -1;
            } else {
              var0 = var3[var2].method0(var4[var2]);
            }
            var1[var2] = var0;
          }
with
{
            var0[var1] = var2[var1].method0(var3[var1], var4);
          }
Change's id number: 19873
insert
var0[var1].var2.method0(var0[var1].var0, var0[var1].var3)
-------------------------------------------
Context: P:MethodInvocation{arguments},L:ClassInstanceCreation{arguments},R:
Number of change: 31
Change's id number: 46
update
var0
to
var0
Change's id number: 28285
insert
new Type0(var0.get(var1))
Change's id number: 271
insert
var0.method0()
Change's id number: 2619
replace
var0
with
(int) var0
Change's id number: 33467
replace
new Type0(var0.getValue())
with
method0(var0.getValue())
-------------------------------------------
Context: P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
Number of change: 58
Change's id number: 62
insert
var0
Change's id number: 306
insert
str0
Change's id number: 35829
replace
var0.method0()
with
var0.method0(false)
Change's id number: 24340
insert
var0.getMessage()
Change's id number: 333
replace
var0.method0()
with
var0
-------------------------------------------
Context: P:Assignment{rightHandSide},L:ArrayAccess{leftHandSide},R:
Number of change: 140
Change's id number: 46
update
var0
to
var0
Change's id number: 8200
insert
var0[var1].method0(var2)
Change's id number: 632
replace
new Type0()
with
new Type0()
Change's id number: 448
replace
var0
with
var0.method0()
Change's id number: 18716
replace
Type0.method0(var0)
with
var0
-------------------------------------------
Context: P:TryStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
Number of change: 57
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 27052
insert
var0 = Type0.method0(var0, var1, var2)
Change's id number: 19109
insert
try{
          //potentially use a wrapper handler for parsing, but we still need the SolrContentHandler for getting the document.
          Type0 var0 = new Type0();//TODO: should we design a way to pass in parse context?
          var1.method0(var2, var3, var4, var0);
        } catch (Type2 var5) {
          if(var6)
            var7.method1(new StringBuilder(str0).append(var5.method2())
                .method3(str1).method3(var4.method4()).method4());
          else
            throw new Type3(var8, var5);
        }
Change's id number: 29144
insert
if (!method0(var0, var1)) {
        return new Type0(var2, new Type1(
            Type2.method1(var3), var3), 0, var4,
            var5);
      }
Change's id number: 483
insert
Type0 var0 = null;
-------------------------------------------
Context: P:TryStatement{statements},L:,R:Assignment{statements}
Number of change: 65
Change's id number: 7386
insert
method0(var0)
Change's id number: 18167
insert
for (Type0 var0 : var1) {
        if (var2 && !var3) {
          if (var4 == null) {
            var4 = var5.method0(Type5.method1(var6, str0, var7), var8);
            var4.method2(var9, var10);
          }
          for (Type7 var11 : var12) {
            final int var13 = var11.method3();
            byte var14[] = var11.method4(var15);
            if (var14 == null) {
              // Can be null if this segment doesn't have
              // any docs with this field
              var14 = new byte[var13];
              Arrays.fill(var14, (byte)0);
            }
            if (var16 == null) {
              //optimized case for segments without deleted docs
              var4.method2(var14, var13);
            } else {
              // this segment has deleted docs, so we have to
              // check for every doc if it is deleted or not
              final Type9 var16 = var16;
              for (int var17 = 0; var17 < var13; var17++) {
                if (var16.method5(var17)) {
                  var4.method6(var14[var17]);
                }
              }
            }
            var18.method7(var13);
          }
        }
      }
Change's id number: 531
insert
var0.method0(str0, var1)
Change's id number: 2231
insert
Type0 var0 = method0();
Change's id number: 2290
insert
if (var0 != null) {
        var0.method0();
      }
-------------------------------------------
Context: P:IfStatement{statements},L:MethodInvocation{statements},R:
Number of change: 489
Change's id number: 529
insert
return;
Change's id number: 294
insert
return var0;
Change's id number: 29483
insert
var0.method0(var1, var2.method1(),
                             var2.method2(),
                             var3)
Change's id number: 643
insert
var0 = true
Change's id number: 135
insert
var0.method0(var1)
-------------------------------------------
Context: P:MethodDeclaration{statements},L:Assignment{statements},R:Assignment{statements}
Number of change: 349
Change's id number: 16
insert
this.var0 = var0
Change's id number: 1351
insert
this.var0 = var1
Change's id number: 19897
replace
this.var0 = var0
with
this.var0.method0(var1)
Change's id number: 759
insert
var0 = var1
Change's id number: 27068
insert
var0= Type1.method0()
-------------------------------------------
Context: P:ForStatement{statements},L:MethodInvocation{statements},R:VariableDeclarationStatement{statements}
Number of change: 503
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 684
insert
var0 += var1.method0()
Change's id number: 2490
insert
Type0.method0(var0, var1)
Change's id number: 5313
insert
System.arraycopy(var0.method0(), var1, var2.method0(), 0, var3)
Change's id number: 10067
replace
var0 = var1
with
var0 += var1
-------------------------------------------
Context: P:IfStatement{thenStatement},L:MethodInvocation{expression},R:
Number of change: 159
Change's id number: 31051
replace
{
        var0.method0(str0);
        return 0;
      }
with
return 0;
Change's id number: 529
insert
return;
Change's id number: 28115
replace
{ // was not in the excluded list
        for(Type0 var0 : Type1.method0(
            var1.method1())) {
          if (method2(var0, var2, var3,
              var4, false, var5, var6, var7) >= 0) {
            return var0;
          }
        }
      }
with
{ // was not in the excluded list
        if (method0(var0, var1, var2,
            var3, false, var4, var5) >= 0) {
          return var0;
        }
      }
Change's id number: 35372
replace
{
                method0(var0, var1, var2, var3);
                return;
            }
with
{
                method0(var0, var1, var2, var3);
                return;
            }
Change's id number: 31186
replace
{
      if (var0.method0()) {
        // If the block is an out-of-date generation stamp or state,
        // but we're the standby, we shouldn't treat it as corrupt,
        // but instead just queue it for later processing.
        method1(var1, var2, var3,
            var4);

      } else {
        var5.add(var2);
      }
      return var2;
    }
with
{
      var0.add(var1);
      return var1;
    }
-------------------------------------------
Context: P:MethodInvocation{arguments},L:MethodInvocation{arguments},R:
Number of change: 140
Change's id number: 62
insert
var0
Change's id number: 8918
replace
var0.method0(var1)
with
var0[var1]
Change's id number: 271
insert
var0.method0()
Change's id number: 11572
update
0.0f
to
1.0f
Change's id number: 34989
replace
new Type0(var0, new Type2())
with
var0
-------------------------------------------
Context: P:WhileStatement{statements},L:MethodInvocation{statements},R:
Number of change: 26
Change's id number: 31171
insert
switch (var0) {
          case var1:
          case var2: {
            Type1 var3 = (Type1)var4;

            // versions > 0 support per file replication
            // get name and replication
            final short var5  = var6.method0(
                ).method1(var5);

            long var7 = var7;
            Type5 var8[] = new Type5[var9];
            for (int var10 = 0; var10 < var9; var10++) {
              if(var0 == var1
                 && var10 == var9-1) {
                var8[var10] = new Type6(var8[var10],
                                                           var5);
              } else {
                var8[var10] = new Type5(var8[var10], var5);
              }
            }

            Type8 var11 = var6.method2();
            if (var12 != null) {
              var11 = var12;
            }


            // Older versions of HDFS does not store the block size in inode.
            // If the file has more than one block, use the size of the
            // first block as the blocksize. Otherwise use the default
            // block size.
            if (-8 <= var13 && var7 == 0) {
              if (var9 > 1) {
                var7 = var8[0].method3();
              } else {
                long var14 = ((var9 == 1)? var8[0].method3(): 0);
                var7 = Math.max(var6.method4(), var14);
              }
            }


            // The open lease transaction re-creates a file if necessary.
            // Delete the file if it already exists.
            if (var15.method5()) {
              var15.method6(var0 + str0 + var16 +
                  str1 + var9 +
                  str2 + var17 +
                  str3 + var18);
            }

            // There are four cases here:
            // 1. OP_ADD to create a new file
            // 2. OP_ADD to update file blocks
            // 3. OP_ADD to open file for append
            // 4. OP_CLOSE to close the file

            // See if the file already exists
            Type9 var19 = var20.method7(var16);
            if (var19 == null) { // OP_ADD for a new file
              assert var0 == var1 : 
                str4 + var0;
              var20.method8(
                  var16, var11, var8, var5,
                  var21, var22, var7,
                  var17, var18);
            } else {
              var20.method9(var19, var16, var8,
                  var21, var22);
              if(var0 == var2) {  // OP_CLOSE
                assert var19.method10() : 
                  str5 + var16;
                var6.method0().method11(
                    var19, var9-1, true);
                Type9 var23 =
                  ((Type12)var19).method12();
                var20.method13(var16, var19, var23);
              } else if(! var19.method10()) {  // OP_ADD for append
                Type12 var24 = new Type12(
                    var19.method14(),
                    var19.method15(), 
                    var19.method16(),
                    var19.method17(),
                    var19.method18(),
                    var19.method19(),
                    var17,
                    var18,
                    null);
                var20.method13(var16, var19, var24);
              }
            }
            // Update file lease
            if(var0 == var1) {
              var25.method20(var17, var16);
            } else {  // Ops.OP_CLOSE
              var25.method21(
                  ((Type12)var19).method22(), var16);
            }
            break;
          }
          case var26: {
            Type15 var27 = (Type15)var4;
            short var5 = var6.method0().method1(
                var5);
            var20.method23(var16,
                                            var5, null);
            break;
          }
          case var28: {
            Type16 var29 = (Type16)var4;
            var20.method24(var30, var31,
                var32);
            break;
          }
          case var33: {
            Type17 var34 = (Type17)var4;
            Type18 var35 = var20.method25(var36, false);
            var20.method26(var37, var36,
                                      var32);
            var6.method27(var37, var36, var35);
            break;
          }
          case var38: {
            Type19 var39 = (Type19)var4;
            var20.method28(var16, var32);
            break;
          }
          case var40: {
            Type20 var41 = (Type20)var4;
            Type8 var11 = var6.method2();
            if (var42 != null) {
              var11 = var42;
            }

            var20.method29(var16, var11,
                                   var32);
            break;
          }
          case var43: {
            Type21 var44 = (Type21)var4;
            var6.method30(var45);
            break;
          }
          case var46: {
            Type22 var47 = (Type22)var4;
            var20.method31(var37,
                                           var48);
            break;
          }
          case var49: {
            Type23 var50 = (Type23)var4;
            var20.method32(var37, var51,
                                      var52);
            break;
          }
          case var53: {
            Type24 var54 = (Type24)var4;
            var20.method33(var37,
                                      var55,
                                      var56);
            break;
          }
          case var57: {
            Type25 var58 = (Type25)var4;
            var20.method33(var37,
                                      var59,
                                      var56);
            break;
          }

          case var60:
            Type26 var61 = (Type26)var4;
            var20.method33(var37,
                                      var55,
                                      var62);
            break;

          case var63: {
            Type27 var64 = (Type27)var4;

            var20.method34(var16,
                                      var21,
                                      var22, true);
            break;
          }
          case var65: {
            Type28 var66 = (Type28)var4;
            var20.method35(var16, var67,
                                     var21, var22,
                                     var68);
            break;
          }
          case var69: {
            Type29 var34 = (Type29)var4;

            Type18 var35 = var20.method25(var36, false);
            var20.method26(var37, var36,
                                      var32, var70);
            var6.method27(var37, var36, var35);
            break;
          }
          case var71: {
            Type30 var72
              = (Type30)var4;

            var6.method36()
              .method37(var73,
                                           var74);
            break;
          }
          case var75: {
            Type33 var76
              = (Type33)var4;
            var6.method36()
              .method38(var73,
                                           var74);
            break;
          }
          case var77: {
            Type34 var78
              = (Type34)var4;
            var6.method36()
                .method39(
                    var73);
            break;
          }
          case var79: {
            Type35 var80 = (Type35)var4;
            var6.method36()
              .method40(var81);
            break;
          }
          case var82: {
            Type36 var83 = (Type36)var4;

            Type14 var84 = var25.method41(
                var85);
            Type12 var86 =
                (Type12) var20.method7(
                    var16);
            var6.method42(var84,
                var16, var87, var86);
            break;
          }
          case var88:
          case var89: {
            // no data in here currently.
            break;
          }
          case var90:
          case var91:
            break;
          default:
            throw new IOException(str6 + var0);
          }
Change's id number: 597
insert
var0++
Change's id number: 9917
replace
var0.method0()
with
try {
          var0.method0();
        } catch (Throwable var1) {
          if (var2 != null) {
            var2 = var1;
          }
        }
Change's id number: 5319
replace
var0 += var1
with
var0.method0(var0.method1() + var1)
Change's id number: 6631
insert
try {
          // True if we have someone waiting for reopened searcher:
          boolean var0 = var1 > var2;
          final long var3 = var4 + (var0 ? var5 : var6);

          final long var7 = var3 - System.nanoTime();

          if (var7 > 0) {
            var8.awaitNanos(var7);
          } else {
            break;
          }
        } catch (InterruptedException var9) {
          Thread.currentThread().interrupt();
          return;
        } finally {
          var10.unlock();
        }
-------------------------------------------
Context: P:IfStatement{statements},L:MethodInvocation{statements},R:VariableDeclarationStatement{statements}
Number of change: 69
Change's id number: 271
insert
var0.method0()
Change's id number: 4690
replace
var0.method0()
with
var0 = var1.method0()
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 864
insert
var0.method0(var1.method1())
Change's id number: 37571
replace
Type0 var0 = Type1.method0(var1.method1(), false);
with
Type0 var0 = Type1.method0(var1, var2);
-------------------------------------------
Context: P:ForStatement{statements},L:Assignment{statements},R:
Number of change: 1967
Change's id number: 10667
insert
final long var0 = var1[var2++];
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 27744
insert
var0[var1 - 1] = var2
Change's id number: 10469
insert
var0[var1++] = (var2 >>> 30) & 3L
Change's id number: 10551
insert
var0[var1++] = (var2 >>> 42) & 3L
-------------------------------------------
Context: P:MethodDeclaration{statements},L:Assignment{statements},R:MethodInvocation{statements}
Number of change: 134
Change's id number: 6283
replace
var0 = var1
with
var0.method0(var1)
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 759
insert
var0 = var1
Change's id number: 1351
insert
this.var0 = var1
Change's id number: 31971
insert
if (var0.method0(
          var1, 
          false)) {
        method1(var0, new Type0());
      }
-------------------------------------------
Context: P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
Number of change: 240
Change's id number: 31118
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
Change's id number: 36130
insert
if (var0 != null) {
            Type1 var1 = var0.method0(var2);
            if (var1 != null) {
                List<Type3> var3 = var1.method1(var4, var5, var6);
                if (var3 != null && !var3.isEmpty()) return var3;
            }
        }
Change's id number: 36385
replace
if (var0)                           var1 |= var2;
with
if (var0==var1) {
            if (var2) return var3;
            return var4;
        } else {
            if (var2) return var5;
            return var6;
        }
Change's id number: 35257
insert
if (var0 instanceof Type1) {
            return ((Type1) var0).method0();
        }
Change's id number: 36424
replace
if (var0[1] != method0(var1)) return false;
with
if (var0 == null
                || (var1[0] != var0.getClass()
                && (!(var0 instanceof Type0)
                || var1[0] != ((Type0) var0).method0())))
            return false;
-------------------------------------------
Context: P:MethodDeclaration{statements},L:ForStatement{statements},R:VariableDeclarationStatement{statements}
Number of change: 29
Change's id number: 29411
replace
final Type0 var0 = var1[var2 - 1].method0();
with
Type0 var0 = var1[var2 - 1];
Change's id number: 385
replace
var0 = var1.method0()
with
if (var0 == null) {
      var1 = null;
    } else {
      var1 = var0.method0();
    }
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 5600
replace
Type0 var0 = new Type0();
with
Type0[] var0 = var1.method0();
Change's id number: 5666
replace
Type0 var0 = new Type0();
with
Type0 var0 = new Type0();
-------------------------------------------
Context: P:ForStatement{statements},L:,R:IfStatement{statements}
Number of change: 40
Change's id number: 36477
insert
Object var0 = var1.next();
Change's id number: 1034
insert
final Type0 var0 = var1.method0(var2);
Change's id number: 37375
insert
Type0 var0 = var1[var2].method0();
Change's id number: 6255
replace
char var0 = var1.charAt(var2);
with
byte var0 = var1[var2 + var3];
Change's id number: 39463
insert
String var0 = (String) var1.next();
-------------------------------------------
Context: P:ClassInstanceCreation{arguments},L:SimpleType{type},R:SimpleName{arguments}
Number of change: 70
Change's id number: 62
insert
var0
Change's id number: 17885
replace
var0.method0().method1()
with
var0.method0()
Change's id number: 17926
replace
var0
with
Type0.method0(var0)
Change's id number: 20959
replace
4
with
var0
Change's id number: 271
insert
var0.method0()
-------------------------------------------
Context: P:MethodDeclaration{statements},L:IfStatement{statements},R:TryStatement{statements}
Number of change: 53
Change's id number: 20
insert
method0()
Change's id number: 26654
insert
if (var0 == null) {
                throw new Type0(str0);
            }
Change's id number: 6809
insert
var0.method0(var1, var2)
Change's id number: 411
insert
Type0 var0;
Change's id number: 120
insert
var0 = null
-------------------------------------------
Context: P:SynchronizedStatement{statements},L:MethodInvocation{statements},R:
Number of change: 26
Change's id number: 20
insert
method0()
Change's id number: 120
insert
var0 = null
Change's id number: 930
insert
method0(var0)
Change's id number: 295
insert
var0.clear()
Change's id number: 1204
insert
assert var0 == var1;
-------------------------------------------
Context: P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:ReturnStatement{statements}
Number of change: 75
Change's id number: 6809
insert
var0.method0(var1, var2)
Change's id number: 37607
insert
var0.method0(method1(var0.method2(), var1))
Change's id number: 35516
insert
if (var0!=null) var1.method0(var2, var0);
Change's id number: 36413
insert
var0.method0().method1(str0)
Change's id number: 744
insert
Type0 var0 = (Type0) var1;
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:SimpleType{superclassType},R:MethodDeclaration{bodyDeclarations}
Number of change: 53
Change's id number: 362
insert
private final Type0 var0;
Change's id number: 30981
insert
private Random var0 = new Random();
Change's id number: 6922
insert
private final static String var0 = str0;
Change's id number: 9869
insert
private static final Type0 var0 = var1.method0(Type1.class);
Change's id number: 40863
insert
/**
     * Log instance.
     */
    private static final Type0 var0 = var1.method0(Type1.class);
-------------------------------------------
Context: P:SwitchCase{expression},L:,R:IfStatement{statements}
Number of change: 146
Change's id number: 19914
update
25
to
27
Change's id number: 19989
update
29
to
31
Change's id number: 18812
update
4
to
6
Change's id number: 19946
update
26
to
28
Change's id number: 19955
update
18
to
20
-------------------------------------------
Context: P:MethodDeclaration{statements},L:IfStatement{statements},R:ForStatement{statements}
Number of change: 51
Change's id number: 1798
insert
final Type0 var0 = var1.method0();
Change's id number: 35482
replace
Type0[] var0 = new Type0[var1];
with
Map<String, Type0> var0 = method0(var1, method1(var2, var3), var2, var2.method2());
Change's id number: 9337
replace
Type0 var0 = new Type0();
with
Type0 var0 = var1.method0();
Change's id number: 928
insert
Type0 var0 = new Type0(var1);
Change's id number: 43842
insert
if (var0[var1] != var2[var1]) {
      throw new Type0(var0[var1], var2[var1]);
    }
-------------------------------------------
Context: P:ParenthesizedExpression{expression},L:,R:
Number of change: 167
Change's id number: 31117
replace
var0 && var1
with
var0.method0() 
        && var1
Change's id number: 8969
update
var0.method0()+1
to
*
Change's id number: 12712
insert
var0[var1++] << 32
Change's id number: 26801
replace
(Type0) var0
with
(Type0)method0()
Change's id number: 12904
insert
var0[var1++] << 16
-------------------------------------------
Context: P:ForStatement{statements},L:,R:VariableDeclarationStatement{statements}
Number of change: 45
Change's id number: 36956
insert
File var0 = var1[var2];
Change's id number: 2333
insert
Type0 var0 = var1[var2];
Change's id number: 411
insert
Type0 var0;
Change's id number: 1786
insert
int var0 = var1.method0(var2);
Change's id number: 25680
replace
Entry var0 = (Entry) var1.next();
with
Object var0 = var1.get(var2);
-------------------------------------------
Context: P:CatchClause{statements},L:,R:MethodInvocation{statements}
Number of change: 26
Change's id number: 30029
replace
var0.method0(null, var1)
with
var0.method0(var1)
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 22747
replace
var0 = false
with
Type0.method0()
Change's id number: 26478
insert
Type0.method0(str0+var0+str1+var1+str2)
Change's id number: 2017
replace
var0.method0(var1)
with
var0.method0(var1)
-------------------------------------------
Context: P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
Number of change: 1116
Change's id number: 8918
replace
var0.method0(var1)
with
var0[var1]
Change's id number: 365
replace
var0
with
var0
Change's id number: 87
replace
var0
with
var0
Change's id number: 305
update
var0
to
var0
Change's id number: 24976
insert
var0.next()
-------------------------------------------
Context: P:InfixExpression{rightOperand},L:InfixExpression{leftOperand},R:
Number of change: 178
Change's id number: 14535
replace
var0.limit()
with
var0
Change's id number: 6062
replace
!var0.method0(var1)
with
!var0.method0(var1)
Change's id number: 305
update
var0
to
var0
Change's id number: 31022
replace
var0.method0(var1)
with
var0 <= var1.method0()
Change's id number: 2200
replace
var0.method0()
with
var0
-------------------------------------------
Context: P:EnhancedForStatement{body},L:MethodInvocation{expression},R:
Number of change: 41
Change's id number: 31178
replace
{
      Map<String, InetSocketAddress> var0 =
        method0(var1, var2, var3, var4);
      if (!var0.isEmpty()) {
        var5.put(var2, var0);
      }
    }
with
{
        String var0 = method0(null, var1, var2, var3);
        if (var0 == null) {
          return null;
        }
        var4.add(var5.method1(var0));
      }
Change's id number: 31084
replace
{
      var0.method0(var1, var2);
    }
with
{
      Type0 var0 = var1;
      try {
        var0.method0(var2, var3, var4);
      } catch(IOException var5) {
        var6.method1(str0, var5);
      }
    }
Change's id number: 28023
replace
{
        for(Type0 var0 : var1.method0()) {
          var0.method1();
        }
      }
with
{
        var0.method0();
      }
Change's id number: 9978
replace
{
            Type0 var0 = var1.method0(var2);
            Type3 var3 = var0.method1(var4, var5);
            Type3 var6 = var7.get(var1);
            if (var6 != null) {
              var3 = var0.method2(var6, var3);
            }
            var7.put(var1, var3);
          }
with
{
            // Handle and merge only facet requests which were not already handled.  
            if (var0.add(var1)) {
              Type1 var2 = var1.method0(var3);
              Type3 var4 = var2.method1(var5, var6);
              Type3 var7 = var8.get(var1);
              if (var7 != null) {
                var4 = var2.method2(var7, var4);
              }
              var8.put(var1, var4);
            } 
          }
Change's id number: 11796
replace
{
      for (Type0 var0 : var1.method0().values()) {
        Type2 var2 = new Type2(var0);
        String var3 = var2.method1();
        if (!var4.contains(var2.method1())
            || !var2.method2().equals(
                var5)) continue;
        if (var6.put(var3, var0) == null) {
          String var7 = var2.method3();
          var8.add(var7);
        }
      }
    }
with
{
        for (Type0 var0 : var1.method0().values()) {
          Type2 var2 = new Type2(var0);
          String var3 = var2.method1();
          if (!var4.contains(var2.method1())
              || !var2.method2().equals(var5)) continue;
          if (var6.put(var3, var0) == null) {
            if (!var7 || (var7 && var2.method3())) {
              String var8 = var2.method4();
              var9.add(var8);
            }
          }
        }
      }
-------------------------------------------
Context: P:ForStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
Number of change: 97
Change's id number: 4028
insert
final Type0 var0 = Type0.method0(var1, var2, var3, var4);
Change's id number: 4184
replace
int var0;
with
List<Type0> var0 = new ArrayList<>();
Change's id number: 358
insert
if (!var0) continue;
Change's id number: 10064
insert
int var0 = var1.codePointCount(0, var1.length());
Change's id number: 20012
replace
Type0 var0 = method0(var1, var2, var3, var4, var5, var6, var7, var8);
with
method0(var0, var1, var2, var3, var4, var5, var6, var7)
-------------------------------------------
Context: P:IfStatement{thenStatement},L:InfixExpression{expression},R:IfStatement{elseStatement}
Number of change: 84
Change's id number: 9790
replace
{
      return str0;
    }
with
return str0;
Change's id number: 31189
replace
{
      var0 = method0(var0.method1(), var0, false);
    }
with
var0 = method0(var0.method1(), var0)
Change's id number: 3303
insert
{
          // No docs in this segment indexed any points
          return null;
        }
Change's id number: 3172
insert
{
        var0 = var1;
      }
Change's id number: 33346
replace
var0 = str0 + var1.substring(3)
with
{
                var0 = str0 + var1.substring(3);
            }
-------------------------------------------
Context: P:IfStatement{thenStatement},L:PrefixExpression{expression},R:
Number of change: 91
Change's id number: 36462
replace
var0++
with
var0+=method0(var1[var2], var3)
Change's id number: 294
insert
return var0;
Change's id number: 19440
replace
var0.method0()
with
{
                  var0.method0();
                }
Change's id number: 3904
replace
return false;
with
return false;
Change's id number: 19250
replace
{
                  var0.method0();
                }
with
var0.method0()
-------------------------------------------
Context: P:MethodDeclaration{statements},L:AssertStatement{statements},R:IfStatement{statements}
Number of change: 30
Change's id number: 9282
replace
int var0 = var1.method0(var2);
with
int var0 = var1[var2];
Change's id number: 2017
replace
var0.method0(var1)
with
var0.method0(var1)
Change's id number: 18141
insert
if (!var0) {
      throw new IllegalArgumentException(str0);
    }
Change's id number: 7597
insert
assert method0(var0) >= 0;
Change's id number: 16
insert
this.var0 = var0
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:MethodDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
Number of change: 44
Change's id number: 9261
insert
private class Type0 extends Type1 {

    private final Type2 var0;
    private final Type1 var1;
    
    public OrdinalMappingDocValues(Type1 var1, Type2 var0) {
      this.var1 = var1;
      this.var0 = var0;
    }

    @Override
    protected Type3 method0() throws IOException {
      return new Type4(method1(), var0, var1.method2());
    }

    @Override
    protected Type3 method3() throws IOException {
      return new Type4(method1(), var0, var1.method4());
    }

    @Override
    public Type5 method1() {
      return var2;
    }
    
  }
Change's id number: 4202
insert
/** 
     * disjunction of postings ordered by docid.
     */
    static class Type0 extends Type1<Type2> {
      DocsQueue(int var0) {
        super(var0);
      }

      @Override
      public final boolean lessThan(Type2 var1, Type2 var2) {
        return var1.method0() < var2.method0();
      }
    }
Change's id number: 2392
insert
private static class Type0 {
    private String var0;
    private String var1;

    public TableSpec(String var2, String var3) {
      if(var2.contains(str0)) {
        String[] var4 = var2.split(str0);
        this.var0 = var4[0];
        this.var1 = var4[1];
      } else {
        this.var0 = var2;
        this.var1 = var3;
      }
    }
  }
Change's id number: 6077
insert
/** Long Parser that takes in String representations of dates and
   *  converts them into longs
   */
  public final static Type0 var0 = new Type0() {
    @SuppressWarnings(str0)
    @Override
    public long method0(Type1 var1) {
      try {
        return Type2.method1(var1.method2()).method3();
      } catch (ParseException var2) {
        var3.println(str1+var1.method2());
        return 0;
      }
    }
    @Override
    public String toString() { 
      return Type4.class.method4()+str2; 
    }
    @Override
    public Type5 method5(Type6 var4) throws IOException {
      return var4.method6(null);
    }
  };
Change's id number: 9008
replace
/** maps per-segment ordinals to/from global ordinal space */
  // TODO: use more efficient packed ints structures (these are all positive values!)
  static class Type0 {
    // globalOrd -> (globalOrd - segmentOrd)
    final Type1 var0;
    // globalOrd -> sub index
    final Type1 var1;
    // segmentOrd -> (globalOrd - segmentOrd)
    final Type1 var2[];
    
    OrdinalMap(Type2 var3[]) throws IOException {
      // create the ordinal mappings by pulling a termsenum over each sub's 
      // unique terms, and walking a multitermsenum over those
      var0 = new Type1();
      var1 = new Type1();
      var2 = new Type1[var4];
      for (int var5 = 0; var5 < var4; var5++) {
        var2[var5] = new Type1();
      }
      int var6[] = new int[var4];
      Type3 var7[] = new Type3[var4];
      Type4 var8[] = new Type4[var4];
      for (int var5 = 0; var5 < var4; var5++) {
        var7[var5] = new Type3(0, 0, var5);
        var8[var5] = new Type4(new Type5(var3[var5]), var5);
      }
      Type6 var9 = new Type6(var7);
      var9.method0(var8);
      int var10 = 0;
      while (var9.method1() != null) {        
        Type9 var11[] = var9.method2();
        for (int var5 = 0; var5 < var9.method3(); var5++) {
          int var12 = var11[var5].var13;
          int var14 = var10 - var6[var12];
          assert var14 >= 0;
          // for each unique term, just mark the first subindex/delta where it occurs
          if (var5 == 0) {
            var1.method4(var12);
            var0.method4(var14);
          }
          // for each per-segment ord, map it back to the global term.
          var2[var12].method4(var14);
          var6[var12]++;
        }
        var10++;
      }
    }
  }
with
private int[] var0;
-------------------------------------------
Context: P:MethodDeclaration{parameters},L:SimpleName{name},R:Block{body}
Number of change: 141
Change's id number: 193
insert
Type0 var0
Change's id number: 285
replace
Type0 var0
with
Type0 var0
Change's id number: 265
replace
final Type0 var0
with
final Type0 var0
Change's id number: 2670
insert
long var0
Change's id number: 578
insert
boolean var0
-------------------------------------------
Context: P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
Number of change: 38
Change's id number: 21
update
Type0
to
Type0
Change's id number: 17465
replace
Collection<Type0>
with
Type0
Change's id number: 901
update
Type0
to
AtomicInteger
Change's id number: 176
update
Object
to
Type0
Change's id number: 44179
replace
Integer
with
Integer[]
-------------------------------------------
Context: P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
Number of change: 187
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 744
insert
Type0 var0 = (Type0) var1;
Change's id number: 1333
insert
Type0 var0 = var1;
Change's id number: 1054
insert
var0 = false
Change's id number: 939
insert
var0.method0(str0)
-------------------------------------------
Context: P:CatchClause{statements},L:MethodInvocation{statements},R:
Number of change: 60
Change's id number: 529
insert
return;
Change's id number: 31592
insert
throw new IOException(var0, var1);
Change's id number: 643
insert
var0 = true
Change's id number: 502
insert
continue;
Change's id number: 22228
replace
throw var0;
with
throw method0(var0, var1);
-------------------------------------------
Context: P:ClassInstanceCreation{arguments},L:MethodInvocation{arguments},R:
Number of change: 64
Change's id number: 271
insert
var0.method0()
Change's id number: 9076
replace
-2
with
-1
Change's id number: 46
update
var0
to
var0
Change's id number: 20
insert
method0()
Change's id number: 448
replace
var0
with
var0.method0()
-------------------------------------------
Context: P:IfStatement{statements},L:MethodInvocation{statements},R:MethodInvocation{statements}
Number of change: 183
Change's id number: 29490
insert
var0.writeLong(0)
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 29912
insert
var0.print(str0)
Change's id number: 29461
insert
var0[var1 - 2].method0(var2)
Change's id number: 1244
insert
var0.method0(var1, var2)
-------------------------------------------
Context: P:CastExpression{expression},L:SimpleType{type},R:
Number of change: 31
Change's id number: 305
update
var0
to
var0
Change's id number: 42246
replace
var0.method0(Type2.method1(str0))
with
var0.method0(var1)
Change's id number: 909
insert
var0.get(var1)
Change's id number: 125
insert
var0.getValue()
Change's id number: 19224
replace
var0.getValue()
with
var0.next()
-------------------------------------------
Context: P:ForStatement{expression},L:VariableDeclarationExpression{initializers},R:PostfixExpression{updaters}
Number of change: 48
Change's id number: 2118
replace
var0 < var1
with
var0 < var1
Change's id number: 3193
replace
var0<var1
with
var0<var1
Change's id number: 11515
insert
var0.hasNext()
Change's id number: 27648
replace
var0 < var1.length()
with
var0 < 10
Change's id number: 4821
replace
var0 < var1
with
true
-------------------------------------------
Context: P:TryStatement{statements},L:IfStatement{statements},R:MethodInvocation{statements}
Number of change: 41
Change's id number: 11606
insert
var0.method0(str0 + var1.method1(var2))
Change's id number: 27660
insert
if (Type0.method0(var0, var1)) {
          Type2.method1(var2);
        }
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 2389
replace
var0 = new Type0(new Type1(var0))
with
var0.method0(var1)
Change's id number: 3528
insert
Set<String> var0 = new HashSet<>(1);
-------------------------------------------
Context: P:MethodDeclaration{statements},L:Assignment{statements},R:TryStatement{statements}
Number of change: 29
Change's id number: 31191
replace
this.var0 = method0()
with
this.var0 = var0
Change's id number: 648
insert
boolean var0 = false;
Change's id number: 35036
replace
if (var0.startsWith(str0)) var0 = var0.substring(1);
with
if (var0.startsWith(str0)) { var0 = var0.substring(15);//just for uniformity
        } else if (var0.startsWith(str1)) { var0 = var0.substring(1);}
Change's id number: 7557
replace
var0 = new ThreadPoolExecutor(var1, var1, 1,
        var2, new LinkedBlockingQueue<Runnable>(),
        new Type0(str0))
with
var0.method0(this, var1, var2)
Change's id number: 7564
insert
ExecutorService var0 = Executors.newFixedThreadPool(var1.method0(),
        new Type1(str0));
-------------------------------------------
Context: P:ForStatement{statements},L:VariableDeclarationStatement{statements},R:
Number of change: 552
Change's id number: 1244
insert
var0.method0(var1, var2)
Change's id number: 23226
insert
if (var0 != null && var0.method0()) {
                        var0 = var0.method1(false);
                    }
Change's id number: 37607
insert
var0.method0(method1(var0.method2(), var1))
Change's id number: 26217
insert
String var0 = (String) var1[var2].get(var3);
Change's id number: 10582
insert
var0[var1++] = ((var2 & 63L) << 4) | (var3 >>> 60)
-------------------------------------------
Context: P:ForStatement{statements},L:MethodInvocation{statements},R:MethodInvocation{statements}
Number of change: 903
Change's id number: 8936
replace
var0.method0(var1, var2)
with
var0.method0(var1.method1(), var2)
Change's id number: 27412
insert
assert this.method0() == var0.method0() :
        str0;
Change's id number: 19150
insert
for (final Type0 var0 : var1)
          var2.clear(var3);
Change's id number: 33829
replace
var0.method0(var1)
with
Type0.method0(var0, var1)
Change's id number: 717
replace
var0.add(var1)
with
if (var0 != null) {
        var1.put(var2, var0);
      }
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:SimpleType{superInterfaceTypes},R:FieldDeclaration{bodyDeclarations}
Number of change: 47
Change's id number: 9869
insert
private static final Type0 var0 = var1.method0(Type1.class);
Change's id number: 874
insert
public static final String var0 = str0;
Change's id number: 30086
replace
private final Type0 var0;
with
Socket var0;
Change's id number: 1165
insert
private static final String var0 = str0;
Change's id number: 8465
replace
Type0 var0;
with
Type0 var0;
-------------------------------------------
Context: P:MethodInvocation{arguments},L:SimpleName{arguments},R:
Number of change: 312
Change's id number: 62
insert
var0
Change's id number: 373
insert
true
Change's id number: 297
insert
var0
Change's id number: 11651
replace
false
with
0
Change's id number: 936
insert
null
-------------------------------------------
Context: P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
Number of change: 229
Change's id number: 9036
replace
Type0 var0 = var1.method0(var2, null);
with
int[] var0 = (int[]) var1;
Change's id number: 6792
insert
final Type0 var0 = Type1.method0(var1);
Change's id number: 37051
insert
if (var0) {
                    Type0 var1 = var2.method0();
                    for (Iterator var3 = var1.method1().method2().method3(); var3.hasNext();) {
                        final Entry var4 = (Entry) var3.next();
                        final String var5 = var4.getKey().toString();
                        final String var6 = method4().method5(var4.getValue().toString());
                        if (var5.contains(str0)) {
                            String var7 = str1;
                            if (var2.method6() != null) {
                                var7 = str2 + var2.method6();
                            }
                            var8.add(str3 + var7);
                        } else if (var5.contains(str4)) {
                            // ignore, taken care of in debug
                        } else if ((var5.contains(str5))
                                || (var5.contains(str6))
                                || (var5.contains(str7))) {
                            // false is default, so something to do only in true case
                            if (str8.equalsIgnoreCase(var6) || str9.equalsIgnoreCase(var6) || str10.equalsIgnoreCase(str11))
                                var8.add(str12 + var5);
                        } else if (var5.contains(str13)) {
                            var9.method7(var2.method8());
                        } else if ((var5.contains(str14))
                                || (var5.contains(str15))
                                || (var5.contains(str16))
                                || (var5.contains(str17))
                                || (var5.contains(str18))
                                || (var5.contains(str6))) { // TODO remove extra verbose?
                            var8.add(str19 + var5 + str20 + var6);
                        } else {
                            method9(str21 + var5 + str22, var10);
                        }
                        // includes? excludes?
                    }
                    // ant's <javac> supports nested <compilerarg value=""> elements (there can be multiple of them)
                    // for additional options to be passed to javac.
                    Enumeration var11 = var1.method10();
                    while (var11.hasMoreElements()) {
                        Type0 var12 = (Type0) var11.nextElement();
                        if (var12.method11().method12(str23)) {
                            for (Iterator var3 = var12.method1().method2().method3(); var3.hasNext();) {
                                final Entry var4 = (Entry) var3.next();
                                final String var5 = var4.getKey().toString();
                                if (var5.equals(str11)) {
                                    final String var6 = method4().method5(var4.getValue().toString());
                                    StringTokenizer var13 = new StringTokenizer(var6, str24);
                                    while (var13.hasMoreTokens()) {
                                        String var14 = var13.nextToken();
                                        String var15 = var14.replace(str25, str26);
                                        if(var14 == var15) {
                                            var15 = var14.replace(str27, str28); // GROOVY-5063
                                        }
                                        var8.add(var15);
                                    }
                                }
                            }
                        }
                    }
                }
Change's id number: 9457
insert
Comparator<Type0> var0 = var1.method0();
Change's id number: 36582
replace
Type0 var0 = var1.method0().method1()[0].method0();
with
Type0[] var0 = var1.method0().method1();
-------------------------------------------
Context: P:TryStatement{statements},L:IfStatement{statements},R:
Number of change: 87
Change's id number: 17542
insert
if (var0 != null) var0.method0();
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 895
insert
;
Change's id number: 643
insert
var0 = true
Change's id number: 20
insert
method0()
-------------------------------------------
Context: P:SwitchCase{expression},L:,R:Block{statements}
Number of change: 29
Change's id number: 46
update
var0
to
var0
Change's id number: 5003
update
52
to
53
Change's id number: 5006
update
27
to
28
Change's id number: 5013
update
31
to
32
Change's id number: 5018
update
35
to
36
-------------------------------------------
Context: P:IfStatement{statements},L:,R:
Number of change: 1101
Change's id number: 5494
replace
break var0;
with
break var0;
Change's id number: 294
insert
return var0;
Change's id number: 113
replace
return var0;
with
return var0;
Change's id number: 22476
replace
throw new Type0(var0, String.valueOf(var1));
with
throw new Type0(
                    var0, str0);
Change's id number: 30404
insert
throw new IOException(str0 +
                              str1 + var0);
-------------------------------------------
Context: P:MethodDeclaration{statements},L:EnhancedForStatement{statements},R:ReturnStatement{statements}
Number of change: 42
Change's id number: 8933
insert
if (var0 != null) {
      for(Type1 var1 : method0(var2)) {
        var3.method1(var4, var5);
      }
    }
Change's id number: 2944
insert
if (var0 != null) {
      for (final Type0 var1 : var0) {
        double var2 = var1.method0(var3, var4, var5, var6);
        if (var2 != 0.0 && var2 < var7) {
          var7 = var2;
        }
      }
    }
Change's id number: 120
insert
var0 = null
Change's id number: 29963
replace
var0.method0(var1).method1(var2, 1)
with
var0[2]++
Change's id number: 32228
replace
for(Type0 var0: var1) {
      Type1 var2 = var0.method0(var3, var4);
      if (var2 != null) {
        return var2;
      }
    }
with
synchronized (var0) {
      for(Type0 var1: var0) {
        Type1 var2 = var1.method0(var3, var4);
        if (var2 != null) {
          return var2;
        }
      } 
    }
-------------------------------------------
Context: P:MethodInvocation{name},L:SimpleName{expression},R:
Number of change: 58
Change's id number: 208
update
method0
to
method0
Change's id number: 21876
update
get
to
method0
Change's id number: 9556
update
toURL
to
toURI
Change's id number: 9997
update
method0
to
incrementAndGet
Change's id number: 23066
update
size
to
isEmpty
-------------------------------------------
Context: P:VariableDeclarationStatement{fragments},L:SimpleType{type},R:
Number of change: 527
Change's id number: 9321
replace
var0
with
var0 = var1 == 0 ? null : var2.method0(var3, new Type0())
Change's id number: 1545
replace
var0 = var1.method0()
with
var0 = var1.method0()
Change's id number: 8966
replace
var0
with
var0 = var1.method0(var2, var3)
Change's id number: 36440
insert
var0 = method0(var1, var2, var3)
Change's id number: 36202
replace
var0 = var1
with
var0 = var1.method0()
-------------------------------------------
Context: P:MethodDeclaration{body},L:SimpleName{name},R:
Number of change: 163
Change's id number: 2481
insert
{
        return var0;
      }
Change's id number: 21848
replace
{
        if ( System.getSecurityManager() == null )
        {
            return Type0.method0();
        }
        else
        {
            return AccessController.doPrivileged
                (
                 new PrivilegedAction<Type0>()
                 {
                     public Type0 run()
                     {
                         return Type0.method0();
                     }
                 }
                 );
        }
    }
with
{
        return AccessController.doPrivileged
            (
             new PrivilegedAction<Type0>()
             {
                 public Type0 run()
                 {
                     return Type0.method0();
                 }
             }
             );
    }
Change's id number: 9913
insert
{throw new UnsupportedOperationException();}
Change's id number: 29576
insert
{
    return this.var0;
  }
Change's id number: 31722
insert
{
    var0 = false;
    try {
      if (var1 != null) var1.method0();
      if (var2 != null) var2.method1();
      if (var3 != null) var3.method2();
      if (var4 != null) var4.method1();
    } catch (Exception var5) {
      var6.method3(str0, var5);
    } finally {
      // using finally to ensure we also wait for lease daemon
      try {
        if (var7 != null) {
          var7.method1();
          var7.method4(3000);
        }
        if (var8 != null) {
          var8.method0();
        }
      } catch (InterruptedException var9) {
      } catch (IOException var9) {
        var6.method5(str1, var9);
        var10.method6(var6, var8);
      }
    }
  }
-------------------------------------------
Context: P:TryStatement{statements},L:MethodInvocation{statements},R:Assignment{statements}
Number of change: 55
Change's id number: 30955
insert
this.var0 = new Type0(var1.new Type2())
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 20147
replace
method0()
with
method0(var0)
Change's id number: 6809
insert
var0.method0(var1, var2)
Change's id number: 20
insert
method0()
-------------------------------------------
Context: P:ThrowStatement{expression},L:,R:
Number of change: 52
Change's id number: 25234
replace
var0.method0()
with
Type0.method0 (str0)
Change's id number: 4921
replace
new IllegalStateException(str0)
with
new IllegalStateException(str0, var0)
Change's id number: 30461
replace
new IllegalStateException(
              str0 + var0 + str1 + var1 + str2
              + this)
with
new IllegalStateException(str0 + this)
Change's id number: 632
replace
new Type0()
with
new Type0()
Change's id number: 25080
replace
new Type0(var0, var1 + str0 +
                    str1 +
                    str2 + var1 + str3)
with
new Type0(var0, 
                new Type2(var1),
                var2, var2)
-------------------------------------------
Context: P:TryStatement{statements},L:Assignment{statements},R:MethodInvocation{statements}
Number of change: 58
Change's id number: 3196
insert
method0(var0, var1)
Change's id number: 5095
replace
var0 = var1
with
var0.method0(var1)
Change's id number: 19113
insert
var0 = var1.method0(Type0.class)
Change's id number: 930
insert
method0(var0)
Change's id number: 1757
replace
var0.method0((var1, var2) -> {
        if (var2) {
          String var3 = method1(var4);
          if (var3 == null) return;
          if (Long.parseLong(var3) == var5) return;
          Type4 var6 = var1.method2().method3();
          Type6 var7 = new Type7(var4,
              new Type8());
          Type9 var8 = new Type9(var7, false);
          var8.method4(Long.parseLong(var3));
          var6.method5(var8);
          var5 = Long.parseLong(var3);
        }
      })
with
if (var0) {
        var1.method0((var2, var3) -> {
          if (var3) {
            String var4 = method1(var5);
            if (var4 == null) return;
            if (Long.parseLong(var4) == var6) return;
            Type4 var7 = var2.method2().method3();
            Type6 var8 = new Type7(var5,
                new Type8());
            Type9 var9 = new Type9(var8, false);
            var9.method4(Long.parseLong(var4));
            var7.method5(var9);
            var6 = Long.parseLong(var4);
          }
        });
      }
-------------------------------------------
Context: P:TryStatement{statements},L:Assignment{statements},R:VariableDeclarationStatement{statements}
Number of change: 32
Change's id number: 30033
insert
var0.setTcpNoDelay(true)
Change's id number: 6172
insert
if (var0 >= var1) {
        if (var2 + Type0.method0() != var3.method1()) {
          throw new Type2(str0 + var2 + str1 + var3.method1());
        }
      } else {
        var2 = var3.method1();
      }
Change's id number: 9680
insert
if (var0 == 0) {
        var1 = false;
        return;
      }
Change's id number: 11649
insert
this.var0 = new Type0(var1, var2, var3)
Change's id number: 4024
insert
var0 = new Type1(var1, var2)
-------------------------------------------
Context: P:IfStatement{statements},L:IfStatement{statements},R:
Number of change: 314
Change's id number: 36209
replace
method0(str0 + var0.method1() + str1, var0)
with
if (!var0.method0(var1)) {
                method1(str0 + var1.method2() + str1, var1);
            }
Change's id number: 31130
insert
var0.add(var1.method0(var2))
Change's id number: 9239
replace
return -1;
with
return -1;
Change's id number: 294
insert
return var0;
Change's id number: 8889
replace
var0.method0(var1, var2.method1(var3))
with
var0.method0(var1, var2)
-------------------------------------------
Context: P:IfStatement{statements},L:Assignment{statements},R:VariableDeclarationStatement{statements}
Number of change: 33
Change's id number: 3469
insert
var0.method0(var1, var2[1], 0)
Change's id number: 11785
insert
final boolean var0 = var1.method0().compareTo(var2) >= 0;
Change's id number: 8263
replace
var0 = var1
with
System.arraycopy(var0, var1, var0, 0, var2 - var1)
Change's id number: 11561
insert
final boolean var0 = var1.method0() || var1.method1();
Change's id number: 37
replace
method0()
with
method0()
-------------------------------------------
Context: P:TryStatement{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
Number of change: 61
Change's id number: 27052
insert
var0 = Type0.method0(var0, var1, var2)
Change's id number: 2835
insert
method0(false, true)
Change's id number: 531
insert
var0.method0(str0, var1)
Change's id number: 28024
insert
if (str0.equals(var0.method0())) {
        // this data storage has never been registered
        // it is either empty or was created by pre-storageID version of DFS
        var0.method1(method2());
        if (var1.method3()) {
          var1.method4(
              str1
              + str2 + var0.method0() + str3);
        }
      }
Change's id number: 29147
insert
if (!method0(var0, var1)) {
        return new Type0(var2, new Type1(
            Type2.method1(var3), var3),
            var4);
      }
-------------------------------------------
Context: P:MethodDeclaration{statements},L:AssertStatement{statements},R:VariableDeclarationStatement{statements}
Number of change: 41
Change's id number: 1419
insert
var0 = method0(var0)
Change's id number: 17910
replace
final Type0 var0 = var1.method0();
with
final Type0 var0 = var0;
Change's id number: 4070
insert
int var0 = var1 >> 6;
Change's id number: 759
insert
var0 = var1
Change's id number: 8926
replace
int var0 = var1.method0().size();
with
Type0 var0 = var1.get(var2);
-------------------------------------------
Context: P:WhileStatement{statements},L:Assignment{statements},R:
Number of change: 49
Change's id number: 9231
insert
if (var0) {
              if (var1 == null) {
                // Lazy init
                var1 = new Type0(var2);
              }
              var1.method0(var3);
            }
Change's id number: 9373
insert
while (true) {
              final int var0 = var1.method0();
              if (var0 == var2) {
                break;
              }
              var3[var0] = var4;
              if (var5) {
                if (var6 == null) {
                  // Lazy init
                  var6 = new Type2(var7);
                }
                var6.method1(var0);
              }
            }
Change's id number: 37217
insert
for (Type0 var0 : var1) {
                var2.add(var0);
                List var3 = var0.method0();
                var4.addAll(var3);
            }
Change's id number: 44115
insert
var0[var1--] = var2
Change's id number: 20
insert
method0()
-------------------------------------------
Context: P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
Number of change: 232
Change's id number: 21
update
Type0
to
Type0
Change's id number: 6970
replace
int
with
String
Change's id number: 29338
update
DataInput
to
DataInputStream
Change's id number: 970
update
long
to
int
Change's id number: 5166
replace
Type0
with
byte[]
-------------------------------------------
Context: P:MethodDeclaration{statements},L:,R:IfStatement{statements}
Number of change: 428
Change's id number: 20
insert
method0()
Change's id number: 30912
replace
if(var0 != null) var0.method0();
with
if(var0 != null) var0.method0();
Change's id number: 296
insert
assert method0();
Change's id number: 9577
replace
final Type0 var0 = var1.method0(var2);
with
String var0 = var0;
Change's id number: 8986
insert
if (!var0) {
          return;
        }
-------------------------------------------
Context: P:MethodInvocation{arguments},L:MethodInvocation{arguments},R:SimpleName{arguments}
Number of change: 31
Change's id number: 1179
replace
str0
with
var0
Change's id number: 271
insert
var0.method0()
Change's id number: 29334
replace
var0
with
var0.method0(false)
Change's id number: 33906
replace
var0.toString()
with
Pattern.compile(var0.toString())
Change's id number: 936
insert
null
-------------------------------------------
Context: P:MethodDeclaration{returnType2},L:,R:SimpleName{name}
Number of change: 28
Change's id number: 21
update
Type0
to
Type0
Change's id number: 970
update
long
to
int
Change's id number: 634
update
void
to
boolean
Change's id number: 2795
update
long
to
void
Change's id number: 2794
update
long
to
boolean
-------------------------------------------
Context: P:Assignment{rightHandSide},L:QualifiedName{leftHandSide},R:
Number of change: 58
Change's id number: 8918
replace
var0.method0(var1)
with
var0[var1]
Change's id number: 365
replace
var0
with
var0
Change's id number: 8877
replace
method0(var0, var1, var2, var3)
with
method0(var0, var1, var2, var3)
Change's id number: 1019
replace
method0(var0)
with
var0.method0(var1)
Change's id number: 9192
replace
var0 != -1
with
var0 != 0
-------------------------------------------
Context: P:SwitchCase{statements},L:SimpleName{expression},R:
Number of change: 40
Change's id number: 9191
replace
return new Type0(var0, var1);
with
if (var0) {
        return new Type0(var1, var2);
      } else {
        return new Type1(var1, var2);
      }
Change's id number: 9190
replace
return new Type0(var0, var1, var2, (Float) var3);
with
if (var0) {
        return new Type0(var1, var2);
      } else {
        return new Type1(var1, var2, var3, (Float) var4);
      }
Change's id number: 24911
insert
return str0;
Change's id number: 833
replace
return method0(var0, var1, var2, var3, var4);
with
return var0;
Change's id number: 3196
insert
method0(var0, var1)
-------------------------------------------
Context: P:InfixExpression{leftOperand},L:,R:ParenthesizedExpression{rightOperand}
Number of change: 68
Change's id number: 10296
insert
var0[var1++]
Change's id number: 365
replace
var0
with
var0
Change's id number: 46
update
var0
to
var0
Change's id number: 333
replace
var0.method0()
with
var0
Change's id number: 37359
insert
var0.method0(var1)!=null
-------------------------------------------
Context: P:MethodInvocation{arguments},L:BooleanLiteral{arguments},R:
Number of change: 30
Change's id number: 655
insert
false
Change's id number: 373
insert
true
Change's id number: 6370
replace
true
with
var0
Change's id number: 18059
insert
0L
Change's id number: 297
insert
var0
-------------------------------------------
Context: P:ArrayCreation{dimensions},L:ArrayType{type},R:
Number of change: 82
Change's id number: 7482
replace
var0.method0() + 1
with
var0.method0()
Change's id number: 727
insert
var0.size()
Change's id number: 2122
update
2
to
1
Change's id number: 8572
replace
var0.method0()
with
var0.method0()+1
Change's id number: 18440
replace
(var0 >> 3) + 1
with
method0(var0)
-------------------------------------------
Context: P:VariableDeclarationStatement{fragments},L:ArrayType{type},R:
Number of change: 62
Change's id number: 2787
insert
var0 = var0
Change's id number: 32923
replace
var0 = this.method0(var1, var2)
with
var0 = var1.method0()
Change's id number: 18516
replace
var0 = Type0.method0(var1)
with
var0 = Type0.method0(var1)
Change's id number: 2529
insert
var0 = var1.method0()
Change's id number: 9201
replace
var0
with
var0 = new short[var1]
-------------------------------------------
Context: P:PrefixExpression{operand},L:,R:
Number of change: 51
Change's id number: 5225
replace
var0.method0(var1)
with
var0.method0()
Change's id number: 36475
replace
Type0.method0(var0.method1(var1))
with
var0.method0(var1)
Change's id number: 3837
insert
var0.isEmpty()
Change's id number: 20
insert
method0()
Change's id number: 36019
replace
var0.isEmpty()
with
var0.isEmpty()
-------------------------------------------
Context: P:TryStatement{statements},L:Assignment{statements},R:Assignment{statements}
Number of change: 80
Change's id number: 271
insert
var0.method0()
Change's id number: 5189
replace
var0 = var0
with
var0.method0(var1)
Change's id number: 18160
insert
for (Type0 var0 : var1) {
        // Clone unchanged norms to the cloned reader
        if (var2 || !var3.contains(var4)) {
          final String var5 = var6;
          Type2 var7 = this.var8.get(var5);
          if (var7 != null)
            var8.put(var5, (Type2) var7.method0());
        }
      }
Change's id number: 34695
insert
MethodHandle var0 = var1.findStatic(Collections.class, str0, 
                    MethodType.methodType(Map.class, Object.class, Object.class));
Change's id number: 33121
insert
var0 = MethodHandles.foldArguments(var0, var1)
-------------------------------------------
Context: P:ClassInstanceCreation{type},L:,R:
Number of change: 44
Change's id number: 25608
replace
ArrayList
with
ArrayList<Type0>
Change's id number: 19422
insert
HashMap<Type0,Type1>
Change's id number: 36551
replace
LinkedList<Type0>
with
LinkedList<Type0<String>>
Change's id number: 40892
replace
ArrayList
with
ArrayList<Object>
Change's id number: 719
replace
ArrayList<>
with
HashMap<>
-------------------------------------------
Context: P:EnhancedForStatement{statements},L:VariableDeclarationStatement{statements},R:
Number of change: 85
Change's id number: 31180
replace
if (!var0.isEmpty()) {
        var1.put(var2, var0);
      }
with
if (var0 == null) {
        return null;
      }
Change's id number: 8913
insert
if (var0.method0()) {
          Type1 var1 = var2.get(var3);
          var2.put(var3, method1(var1, var4.method2(var5))); 
        }
Change's id number: 9029
insert
if (var0 != null) {
        Type1 var1 = method0(var0,
            var2, var3);
        Type5 var4 = var1;
        if (var5 == null) {
          var4.method1(var6, var7);
          var5 = new Type6(var0,
              var4.method2());
        } else if (var5.method3(var0,
            Type8.method2(var0, var7.method4()))) {
          var4.method1(var6, var7);
        } else {
          var5.method3(var0,
              Type8.method2(var0, var7.method4()));
          Type6 var5 = var5;
          throw new IllegalArgumentException(str0
              + var0.name() + str1
              + Type8.method2(var0, var7.method4())
              + str2 + str3 + var5.method5()
              + str1 + var5.method6());
        }
      }
Change's id number: 34182
insert
Type0 var0 = method0(var1, method1(var2, method2(var3, str0)));
Change's id number: 19518
insert
var0.put(var1.getKey(), var2)
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:MethodDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
Number of change: 31
Change's id number: 1601
insert
private boolean var0;
Change's id number: 9371
insert
private static final class Type0 extends Type1 {
    private final Object var0;
    private final String var1;
    private final Class<?> var2;
    private final Object var3;
    private final Object var4;
    CacheEntryImpl(Object var0, String var1,
                   Class<?> var2,
                   Object var3,
                   Object var4) {
        this.var0 = var0;
        this.var1 = var1;
        this.var2 = var2;
        this.var3 = var3;
        this.var4 = var4;

        // :HACK: for testing.
//         if (null != locale || SortField.CUSTOM != sortFieldType) {
//           throw new RuntimeException("Locale/sortFieldType: " + this);
//         }

    }
    @Override
    public Object getReaderKey() { return var0; }
    @Override
    public String getFieldName() { return var1; }
    @Override
    public Class<?> getCacheType() { return var2; }
    @Override
    public Object getCustom() { return var3; }
    @Override
    public Object getValue() { return var4; }
  }
Change's id number: 29503
insert
/**
   * Used by
   * {@link INodeDirectory#getExistingPathINodes(byte[][], int, boolean)}.
   * Containing INodes information resolved from a given path.
   */
  static class Type0 {
    private Type1[] var0;
    
    public INodesInPath(int var1) {
      assert (var1 >= 0);
      this.var0 = new Type1[var1];
    }
    
    Type1[] getINodes() {
      return var0;
    }
    
    void setINode(int var2, Type1 var3) {
      var0[var2] = var3;
    }
  }
Change's id number: 19308
insert
/**
   * RAMFile buffer for DocWriters.
   */
  class Type0 extends Type1 {
    
    /**
     * Allocate bytes used from shared pool.
     */
    @Override
    protected byte[] newBuffer(int var0) {
      assert var0 == var1;
      return var2.method0();
    }
    
    /**
     * Recycle the bytes used.
     */
    synchronized void recycle() {
      if (var3.size() > 0) {
        method1(0);
        
        // Recycle the blocks
        var2.method2(var3);
        var3.clear();
        var4 = 0;
        
        assert method3() == 0;
      }
    }
  }
Change's id number: 28064
insert
/**
   * Head of the list of blocks on the datanode
   */
  private volatile Type0 var0 = null;
-------------------------------------------
Context: P:IfStatement{statements},L:MethodInvocation{statements},R:IfStatement{statements}
Number of change: 56
Change's id number: 31185
replace
if (var0.method0()) {
          var0.method1();
          throw new Type1(str0
              + var0);
        }
with
if (var0.method0()) {
        var0.method1();

        if (var0.method2()) {
          var0.method3();
          continue;
        }
        method4(var0.method5(), var0.method6());
      }
Change's id number: 6915
replace
var0 = var1
with
var0 = var1
Change's id number: 35376
insert
if (!method0(var0, var1)) {
                method1(var0, true, false, false, null, null);
                method2(var0, false, false, false, null, null);
            }
Change's id number: 36926
insert
Type0 var0 = new Type1(
                            var1,
							var1.method0(),
							var1.method1(),
							var1.method2(),
							var2,
							var3, null);
Change's id number: 37312
insert
if (method0(var0)) return var1;
-------------------------------------------
Context: P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
Number of change: 133
Change's id number: 483
insert
Type0 var0 = null;
Change's id number: 36065
insert
Type0 var0 = new Type0(var1, str0);
Change's id number: 1698
insert
int var0;
Change's id number: 34945
replace
if (var0 instanceof Type1) {
                var1.method0(this);
                Type4 var2 = method1(var1);
                if (var2 != null) {
                    // for expressions like foo = { ... }
                    // we know that the RHS type is a closure
                    // but we must check if the binary expression is an assignment
                    // because we need to check if a setter uses @DelegatesTo
                    Type6 var3 = new Type6(str0, var4);
                    Type8 var5 = new Type8(
                            var3,
                            var6.method2(),
                            var0
                    );
                    method3(var5);
                } else {
                    var0.method0(this);
                }
            } else {
                var0.method0(this);
                var1.method0(this);
            }
with
if (var0!=null && var1 instanceof Type2) {
                // for expressions like foo = { ... }
                // we know that the RHS type is a closure
                // but we must check if the binary expression is an assignment
                // because we need to check if a setter uses @DelegatesTo
                Type3 var2 = new Type3(str0, var3);
                Type5 var4 = new Type5(
                        var2,
                        var5.method0(),
                        var1
                );
                method1(var4);
            } else {
                var1.method2(this);
            }
Change's id number: 2410
replace
Properties var0 = new Properties();
with
Type0 var0 = Type1.method0(var1,
                                                           var2,
                                                           var3,
                                                           var4,
                                                           Type2.method1(var5),
                                                           var6,
                                                           var7);
-------------------------------------------
Context: P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
Number of change: 107
Change's id number: 843
insert
Type0.class
Change's id number: 1177
replace
Type0.class
with
Type0.class
Change's id number: 305
update
var0
to
var0
Change's id number: 306
insert
str0
Change's id number: 373
insert
true
-------------------------------------------
Context: P:InfixExpression{rightOperand},L:MethodInvocation{leftOperand},R:
Number of change: 110
Change's id number: 305
update
var0
to
var0
Change's id number: 333
replace
var0.method0()
with
var0
Change's id number: 8892
replace
-1
with
0
Change's id number: 27893
replace
!var0.method0()
with
var0.method0() > 0
Change's id number: 271
insert
var0.method0()
-------------------------------------------
Context: P:VariableDeclarationStatement{fragments},L:PrimitiveType{type},R:
Number of change: 253
Change's id number: 11969
insert
var0 = var1[var2++]
Change's id number: 9244
replace
var0 = var1.method0(var2)
with
var0 = (int) var1.method0(var2)
Change's id number: 3025
insert
var0=0
Change's id number: 2529
insert
var0 = var1.method0()
Change's id number: 31109
replace
var0 = var1.method0()
with
var0 = method0(var1, true, var2)
-------------------------------------------
Context: P:MethodDeclaration{statements},L:TryStatement{statements},R:
Number of change: 126
Change's id number: 294
insert
return var0;
Change's id number: 4416
insert
method0().method1()
Change's id number: 930
insert
method0(var0)
Change's id number: 36085
insert
try { var0.getInputStream().close(); } catch (IOException var1) {}
Change's id number: 135
insert
var0.method0(var1)
-------------------------------------------
Context: P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
Number of change: 48
Change's id number: 26784
insert
if (var0.method0()) {
      var0.method1(str0 + var1);
    }
Change's id number: 28050
replace
var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4()))
with
var0.method0(Type0.method1(var1.method2()))
Change's id number: 36618
replace
var0 += str0
with
var0.append(str0)
Change's id number: 6071
insert
Type0[] var0 = var1.method0(var2);
Change's id number: 2231
insert
Type0 var0 = method0();
-------------------------------------------
Context: P:ClassInstanceCreation{type},L:,R:SimpleName{arguments}
Number of change: 34
Change's id number: 21
update
Type0
to
Type0
Change's id number: 85
insert
Type0<Type1, Type2>
Change's id number: 1804
replace
Type0
with
Type0<Object>
Change's id number: 6785
update
StringBuffer
to
StringBuilder
Change's id number: 18373
update
HashSet
to
LinkedHashSet
-------------------------------------------
Context: P:TryStatement{statements},L:Assignment{statements},R:
Number of change: 143
Change's id number: 31065
insert
if(var0 != null && var1 != null) {
          int var2 = var3;
          // Add file->block mapping
          Type2 var4 = (Type2)var0;
          for (int var5 = 0; var5 < var2; var5++) {
            var4.method0(var5, method1().method2(var1[var5], var4));
          }
        }
Change's id number: 643
insert
var0 = true
Change's id number: 271
insert
var0.method0()
Change's id number: 120
insert
var0 = null
Change's id number: 759
insert
var0 = var1
-------------------------------------------
Context: P:MethodInvocation{arguments},L:SimpleName{name},R:NumberLiteral{arguments}
Number of change: 38
Change's id number: 46
update
var0
to
var0
Change's id number: 273
replace
var0
with
var0.method0()
Change's id number: 62
insert
var0
Change's id number: 21387
update
10
to
13
Change's id number: 87
replace
var0
with
var0
-------------------------------------------
Context: P:MethodDeclaration{statements},L:SuperConstructorInvocation{statements},R:
Number of change: 46
Change's id number: 16
insert
this.var0 = var0
Change's id number: 1351
insert
this.var0 = var1
Change's id number: 9033
insert
var0 = Double.valueOf(var1)
Change's id number: 5387
insert
var0 = Type0.method0(var1)
Change's id number: 640
insert
method0(true)
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:
Number of change: 95
Change's id number: 874
insert
public static final String var0 = str0;
Change's id number: 3585
insert
static final String var0 = str0;
Change's id number: 4705
insert
static final int var0 = var1;
Change's id number: 2203
insert
int var0;
Change's id number: 2604
insert
long var0;
-------------------------------------------
Context: P:CatchClause{exception},L:,R:Block{body}
Number of change: 44
Change's id number: 2506
insert
IOException var0
Change's id number: 1707
insert
Throwable var0
Change's id number: 3681
replace
OutOfMemoryError var0
with
VirtualMachineError var0
Change's id number: 18968
replace
IOException var0
with
Throwable var0
Change's id number: 285
replace
Type0 var0
with
Type0 var0
-------------------------------------------
Context: P:ArrayAccess{index},L:SimpleName{array},R:
Number of change: 38
Change's id number: 597
insert
var0++
Change's id number: 1148
replace
var0++
with
var0++
Change's id number: 46
update
var0
to
var0
Change's id number: 297
insert
var0
Change's id number: 511
replace
method0(var0)
with
var0
-------------------------------------------
Context: P:ForStatement{statements},L:IfStatement{statements},R:MethodInvocation{statements}
Number of change: 35
Change's id number: 8935
replace
var0.method0(var1+var2, var3)
with
var0.method0(var1.method1(var2+var3, var4), var5)
Change's id number: 23111
insert
if(var0.method0().method1())
		{
			var1.put(
                    str0, Boolean.toString(true));
		}
Change's id number: 37209
insert
var0 = (!var0 && var1.charAt(var1.length() - 1) == '\\')
Change's id number: 3300
insert
int var0 = var1 * var2;
Change's id number: 379
insert
Type0 var0 = var1.method0();
-------------------------------------------
Context: P:MethodInvocation{arguments},L:SimpleName{name},R:StringLiteral{arguments}
Number of change: 28
Change's id number: 46
update
var0
to
var0
Change's id number: 31004
replace
var0.method0().equals(method0())
with
var0
Change's id number: 271
insert
var0.method0()
Change's id number: 49
update
str0
to
str0
Change's id number: 297
insert
var0
-------------------------------------------
Context: P:CastExpression{type},L:,R:MethodInvocation{expression}
Number of change: 40
Change's id number: 21
update
Type0
to
Type0
Change's id number: 813
insert
int []
Change's id number: 1287
update
Integer
to
Number
Change's id number: 9177
replace
Type0
with
short[]
Change's id number: 8965
replace
Type0
with
double[]
-------------------------------------------
Context: P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
Number of change: 114
Change's id number: 46
update
var0
to
var0
Change's id number: 87
replace
var0
with
var0
Change's id number: 8963
replace
(byte)var0.method0(var1)
with
var0[var1]
Change's id number: 365
replace
var0
with
var0
Change's id number: 273
replace
var0
with
var0.method0()
-------------------------------------------
Context: P:ForStatement{statements},L:,R:
Number of change: 148
Change's id number: 10667
insert
final long var0 = var1[var2++];
Change's id number: 29507
insert
var0.get(var1).method0(var2, var3)
Change's id number: 23225
replace
var0.method0(var1, 
											 var2.method1(var3))
with
var0.method0(var1, var2)
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 5184
replace
var0[var1] = (int) var2.charAt(var1)
with
var0.method0(var1, (int) var2.charAt(var1))
-------------------------------------------
Context: P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
Number of change: 101
Change's id number: 46
update
var0
to
var0
Change's id number: 365
replace
var0
with
var0
Change's id number: 936
insert
null
Change's id number: 333
replace
var0.method0()
with
var0
Change's id number: 66
insert
var0 - 1
-------------------------------------------
Context: P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
Number of change: 103
Change's id number: 8994
replace
long var0 = var1.method0(var2);
with
var0.method0(var1, var2)
Change's id number: 9053
insert
System.arraycopy(var0, var1, var2, var3, var4)
Change's id number: 5541
replace
var0 = var1.method0()
with
var0.put(var1, method0(var2))
Change's id number: 1207
insert
var0 = 0
Change's id number: 27253
insert
if (var0) {
          var1 = var2[++var3];
        }
-------------------------------------------
Context: P:Assignment{rightHandSide},L:SimpleName{leftHandSide},R:
Number of change: 623
Change's id number: 305
update
var0
to
var0
Change's id number: 2200
replace
var0.method0()
with
var0
Change's id number: 30962
replace
Type0.method0(
          Type0.method1(var0))
with
Type0.method0(var0)
Change's id number: 1033
replace
var0.method0(var1)
with
var0.method0()
Change's id number: 37
replace
method0()
with
method0()
-------------------------------------------
Context: P:EnhancedForStatement{expression},L:SingleVariableDeclaration{parameter},R:Block{body}
Number of change: 56
Change's id number: 46
update
var0
to
var0
Change's id number: 365
replace
var0
with
var0
Change's id number: 31175
replace
var0.entrySet()
with
var0
Change's id number: 366
replace
var0
with
this.var0
Change's id number: 448
replace
var0
with
var0.method0()
-------------------------------------------
Context: P:ForStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
Number of change: 1522
Change's id number: 4200
insert
for (Type0 var0 : var1) {
          Type1 var2 = var3.get(var0).method0(var4);
          if (var2 != null) {
            var5.method1(var0.method2(), var2);
            var6.add(var5.method3(var7, null, var8));
          }
        }
Change's id number: 19453
insert
assert var0 == null || var0 == var0;
Change's id number: 19872
replace
Type0 var0 = var1.method0(var2, var3, var4,
                                            var5, var6,
                                            !var7.method1(var2), var8,
                                            var9);
with
var0.method0(var1, var2, var3,
              var4, var5,
              !var6.method1(var1), var7,
              var8)
Change's id number: 892
insert
if (var0 < var1) {
        var0++;
        var2 = var3;
      } else if (var4 < var5) {
        var4++;
        var2 = var6;
      } else {
        var7++;
        var2 = var8;
      }
Change's id number: 7508
insert
if (var0.method0() <= 0 && var1 != null && var2.compare(var1, str0) >= 0) {
        throw new RuntimeException(str1 + var0.method0());
      }
-------------------------------------------
Context: P:InfixExpression{rightOperand},L:StringLiteral{leftOperand},R:StringLiteral{extendedOperands}
Number of change: 72
Change's id number: 333
replace
var0.method0()
with
var0
Change's id number: 35829
replace
var0.method0()
with
var0.method0(false)
Change's id number: 271
insert
var0.method0()
Change's id number: 448
replace
var0
with
var0.method0()
Change's id number: 26361
replace
var0[var1].method0()
with
Type0.method0(var0[var1].method1())
-------------------------------------------
Context: P:MethodInvocation{arguments},L:SimpleName{name},R:InfixExpression{arguments}
Number of change: 28
Change's id number: 46
update
var0
to
var0
Change's id number: 720
update
0
to
1
Change's id number: 19646
replace
var0
with
var0.toString()
Change's id number: 3304
replace
var0
with
method0(var0)
Change's id number: 87
replace
var0
with
var0
-------------------------------------------
Context: P:CastExpression{expression},L:PrimitiveType{type},R:
Number of change: 30
Change's id number: 8918
replace
var0.method0(var1)
with
var0[var1]
Change's id number: 46
update
var0
to
var0
Change's id number: 42326
replace
(var0 + var1)
with
((var0 + var1) & 0xff)
Change's id number: 305
update
var0
to
var0
Change's id number: 4240
insert
((var0 - 1) >> 6)
-------------------------------------------
Context: P:IfStatement{thenStatement},L:SimpleName{expression},R:
Number of change: 53
Change's id number: 19017
replace
{
      var0.method0();
    }
with
var0.method0()
Change's id number: 6683
replace
var0.method0()
with
{
          var0.method0();
        }
Change's id number: 37467
insert
{
                    var0 = var1;
                    while (var0 != null) {
                        var0 = var0.method0();

                        String var2 = Type1.method1(var3);
                        List<Type2> var4 = var0.method2(str0 + var2);
                        if (var4.isEmpty()) var4 = var0.method2(str1 + var2);
                        if (!var4.isEmpty()) {
                            for (Type2 var5 : var4) {
                                Type3[] var6 = var5.method3();
                                if (var5.method4() != var7 && (var6 == null || var8 == 0)) {
                                    if (var9 != null) var9.method5(var5);
                                    method6(var10, var11);
                                    return true;
                                }
                            }
                        }
                        // if the property expression is an attribute expression (o.@attr), then
                        // we stop now, otherwise we must check the parent class
                        var0 = var12 ? null : var0.method7();
                    }
                }
Change's id number: 34363
insert
{
            var0 = var1;
            // if the provided closure uses an explicit parameter definition, we can
            // also check that the provided type is correct
            method0(var2, var1);
        }
Change's id number: 5993
insert
var0.put(var1.method0(), var2)
-------------------------------------------
Context: P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
Number of change: 720
Change's id number: 483
insert
Type0 var0 = null;
Change's id number: 857
insert
Type0 var0 = var1.method0(var2);
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 5828
insert
Type0 var0 = var1[var2-1];
Change's id number: 31077
replace
if (var0.method0()) {
      // We only want to recover streams if we're going into Active mode.
      var0.method1();
    }
with
var0.method0()
-------------------------------------------
Context: P:MethodDeclaration{statements},L:,R:MethodInvocation{statements}
Number of change: 317
Change's id number: 20
insert
method0()
Change's id number: 930
insert
method0(var0)
Change's id number: 8790
replace
if (var0[var1] == null) {
        var0[var1] = new Type0();
      }
with
if (var0[var1] == null) {
        var0[var1] = new Type0();
      }
Change's id number: 41831
insert
if( var0 )
        {
            throw new IOException( str0 );
        }
Change's id number: 29360
replace
var0.method0(method1())
with
var0.method0(var1, true)
-------------------------------------------
Context: P:MethodDeclaration{statements},L:Assignment{statements},R:VariableDeclarationStatement{statements}
Number of change: 150
Change's id number: 5287
insert
var0 = var0
Change's id number: 250
insert
var0 = var1
Change's id number: 30969
insert
this.var0 = var1.method0(var0)
Change's id number: 31069
replace
var0 = new Type0(var1)
with
var0 = var1.method0(var2, 
                                    var3)
Change's id number: 1911
insert
Type0.method0(var0)
-------------------------------------------
Context: P:EnhancedForStatement{statements},L:VariableDeclarationStatement{statements},R:MethodInvocation{statements}
Number of change: 49
Change's id number: 35097
insert
if (var0 != null && !var0.contains(str0)) {
                        try {
                            URL var1 = method0();
                            URL var2 = new URL(var1, var0);
                            var3.put(str1, var2.toExternalForm());
                        } catch (MalformedURLException var4) {
                            method1(str2 + var0 + str3 + method2().method3() + str4 + var5.method4().method5() + str5, var5);
                        }
                    }
Change's id number: 1026
insert
boolean var0 = var1.method0(var2) != null;
Change's id number: 1528
insert
Object var0 = var1.getValue();
Change's id number: 19348
replace
var0.put(var1.getKey(), var2)
with
var0.add(var1)
Change's id number: 7625
insert
int var0 = (int) var1.method0();
-------------------------------------------
Context: P:TryStatement{statements},L:,R:ReturnStatement{statements}
Number of change: 28
Change's id number: 29454
insert
Type0 var0 = var1.method0(var2,
          var3, false);
Change's id number: 38127
insert
String var0 = var1.method0() != null ?
                            Type1.method1(var2, var1.method0()) :
                            Type1.method1(var2);
Change's id number: 31707
insert
Type0 var0 = var1.method0(null, var2);
Change's id number: 1333
insert
Type0 var0 = var1;
Change's id number: 7370
replace
Type0 var0 = new Type0(var1, null, new Type2(var2), null, false);
with
String var0 = var1.method0(new ByteArrayInputStream(var2.toByteArray()), str0);
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:SimpleType{superclassType},R:FieldDeclaration{bodyDeclarations}
Number of change: 81
Change's id number: 362
insert
private final Type0 var0;
Change's id number: 8552
replace
protected final int var0;
with
protected final int var0;
Change's id number: 36399
replace
private final Type0 var0;
with
public Object getProperty(Object var0) {
            return var1.method0(var0, var2);
        }
Change's id number: 1165
insert
private static final String var0 = str0;
Change's id number: 274
insert
final Type0 var0;
-------------------------------------------
Context: P:IfStatement{thenStatement},L:InfixExpression{expression},R:Block{thenStatement}
Number of change: 39
Change's id number: 2481
insert
{
        return var0;
      }
Change's id number: 18138
insert
{
          // Just fallback to clone
          return method0(var0);
        }
Change's id number: 7437
insert
{
          var0.method0(str0, str1);
        }
Change's id number: 22659
insert
{
            Type0 var0 = method0(null);
            var1.method1(var0);
        }
Change's id number: 2324
insert
{
          Type0 var0 = (Type0) var1[var2];
          var0.method0();
          var3.add(new Type2(var0, var4[var2], var5[var2]));
        }
-------------------------------------------
Context: P:SwitchStatement{statements},L:SwitchCase{statements},R:
Number of change: 50
Change's id number: 22780
replace

throw new Type0(var0,
                str0 + var1[var2 -1], str1);
with

throw method0( str0, var0 );
Change's id number: 1570
insert

var0[19] = var1
method0
throw new Type2();
Change's id number: 25082
replace

throw new Type0(var0, str0 +
                    str1 + var1 + str2);
with

throw new Type0(var0, 
                new Type2(var1),
                new Integer(var2), str0, str1);
Change's id number: 1873
insert

var0[21] = var1
;
Change's id number: 19986
replace

break;
with
case 43:
-------------------------------------------
Context: P:WhileStatement{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
Number of change: 32
Change's id number: 6509
insert
if (var0 == var1) {
            break;
          }
Change's id number: 344
insert
if (var0 == null) break;
Change's id number: 4814
insert
if (var0.method0() != null) {
            var1 =  var0.method0();
          } else if (var0.method1() != null) {
            var1 = new Type0(var0.method1());
          } else {
            continue;
          }
Change's id number: 5546
insert
if (var0 == var1) {
        var2.put(var3, method0(var4));
      } else if (var0 == var5) {
        var6.put(var3, method1(var4));
      } else if (var0 == var7) {
        Type2 var8 = method2(var4);
        var9.put(var3, var8);
        var6.put(var3, var10);
      } else if (var0 == var11) {
        Type3 var8 = method3(var4, false);
        var12.put(var3, var8);
        var6.put(var3, var10);
      } else if (var0 == var13) {
        Type3 var8 = method3(var4, true);
        var12.put(var3, var8);
        var6.put(var3, var10);
      } else if (var0 == var14) {
        Type4 var8 = method4(var4, false);
        var15.put(var3, var8);
      } else if (var0 == var16) {
        Type4 var8 = method4(var4, true);
        var15.put(var3, var8);
      } else {
        throw new Type5(str0 + var0 + str1 + var4);
      }
Change's id number: 7517
insert
if (var0 < 0){//be defensive here, even though we checked before hand, something could have changed
            throw new EOFException(str0 + this + str1 + var1 + str2 + var2 + str3 + var3 + str4 + var4 + str5 + var5);
          }
-------------------------------------------
Context: P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
Number of change: 198
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 8937
insert
final Object var0;
Change's id number: 9042
replace
int var0;
with
int[] var0 = (int[]) var1;
Change's id number: 34992
replace
final Type0 var0 = var1.method0(str0);
with
String var0 = method0(var1, str0, str1);
Change's id number: 2231
insert
Type0 var0 = method0();
-------------------------------------------
Context: P:EnhancedForStatement{body},L:SimpleName{expression},R:
Number of change: 73
Change's id number: 8934
replace
{
      for(Type0 var0 : method0(var1)) {
        var2.method1(var3, var4, var0.method2());
      }
    }
with
{
      if (var0 == null || (var1.method0()-var1.method1()) > (var1.method0()-var0.method1())) {
        var0 = var1;
      }
    }
Change's id number: 32922
replace
{
            Class[] var0 = this.method0(var1, var2);

            this.method1(var0);

            if (!var2.method2()) {
                var3++;
            }
        }
with
{
            if (var0.method0().var1 > var2) {
                Class[] var3 = var0.method1();
                var2 = var1;
                var4 = var3;
            }
        }
Change's id number: 9349
replace
{
      if (var0 == null) {
        var1.method0(-1);
      } else {
        int var2 = var3.method1(var0);
        if (var2 >= 0) {
          var1.method0(var2);
        }
      }
    }
with
{
      int var0 = var1.method0(var2, var3);
      if (var0 >= 0) {
        var4.method1(var0);
      }
    }
Change's id number: 6393
replace
{
      var0 = new Type0(var1, false, false, var2.method0(0), var0);
    }
with
{
        if (var0.method0() != var1) {
          var2 = new Type2(var0, false, false, var3.method1(0), var2);
        }
      }
Change's id number: 899
replace
{
      for (Entry<String, Map<String, List<Type0>>> var0 : var1.entrySet()) {
        String var2 = var0.getKey();
        if (!var3.method0(var2)) continue;
        Map<String, Map<String, Type2>> var4 = var5.method1(var2, var6 -> new Type3<>());
        for (Entry<String, List<Type0>> var7 : var0.getValue().entrySet()) {
          String var8 = var7.getKey();
          if (var9.equals(var10)) var8 = var9;
          if (!var11.method0(var8)) break;
          Map<String, Type2> var12 = var4.method1(var8, var6 -> new Type3<>());
          Object var13 = var14.method2(var15);
          var12.method1(var16.method0(var13) ? String.valueOf(var13) : str0, var6 -> new Type5());
          if (var16.method0(var13)) {
            var12.get(String.valueOf(var13)).method3(var7.getValue());
          }
          }
        }
      }
with
for (Entry<String, Map<String, List<Type0>>> var0 : var1.entrySet()) {
        String var2 = var0.getKey();
        if (!var3.method0(var2)) continue;
        var4.method1(var2, new HashMap<>());
        Map<String, Map<String, AtomicInteger>> var5 = var4.get(var2);
        for (Entry<String, List<Type0>> var6 : var0.getValue().entrySet()) {
          String var7 = var6.getKey();
          if (var8.equals(var9)) var7 = var8;
          if (!var10.method0(var7)) break;
          var5.method1(var7, new HashMap<>());
          Map<String, AtomicInteger> var11 = var5.get(var7);
          Object var12 = var13.method2(var14);
          var11.method1(var15.method0(var12) ? String.valueOf(var12) : str0, new AtomicInteger());
          if (var15.method0(var12)) {
            var11.get(String.valueOf(var12)).addAndGet(var6.getValue().size());
          }
        }
      }
-------------------------------------------
Context: P:MethodDeclaration{statements},L:AssertStatement{statements},R:
Number of change: 218
Change's id number: 10522
insert
assert var0 + var1 * method0() <= var2;
Change's id number: 29527
insert
long[] var0 = new long[]{0,0,0,0};
Change's id number: 10757
insert
for (int var0 = 0; var0 < var1; ++var0) {
        var2[var3++] = (var4[var5++] << 12) | (var4[var5] >>> 40);
        var2[var3++] = (var4[var5++] << 24) | (var4[var5] >>> 28);
        var2[var3++] = (var4[var5++] << 36) | (var4[var5] >>> 16);
        var2[var3++] = (var4[var5++] << 48) | (var4[var5] >>> 4);
        var2[var3++] = (var4[var5++] << 60) | (var4[var5++] << 8) | (var4[var5] >>> 44);
        var2[var3++] = (var4[var5++] << 20) | (var4[var5] >>> 32);
        var2[var3++] = (var4[var5++] << 32) | (var4[var5] >>> 20);
        var2[var3++] = (var4[var5++] << 44) | (var4[var5] >>> 8);
        var2[var3++] = (var4[var5++] << 56) | (var4[var5++] << 4) | (var4[var5] >>> 48);
        var2[var3++] = (var4[var5++] << 16) | (var4[var5] >>> 36);
        var2[var3++] = (var4[var5++] << 28) | (var4[var5] >>> 24);
        var2[var3++] = (var4[var5++] << 40) | (var4[var5] >>> 12);
        var2[var3++] = (var4[var5++] << 52) | var4[var5++];
      }
Change's id number: 28856
insert
return (Type0)var0[var1*3];
Change's id number: 10463
insert
for (int var0 = 0; var0 < var1; ++var0) {
        var2[var3++] = (var4[var5++] << 23) | (var4[var5] >>> 18);
        var2[var3++] = (var4[var5++] << 46) | (var4[var5++] << 5) | (var4[var5] >>> 36);
        var2[var3++] = (var4[var5++] << 28) | (var4[var5] >>> 13);
        var2[var3++] = (var4[var5++] << 51) | (var4[var5++] << 10) | (var4[var5] >>> 31);
        var2[var3++] = (var4[var5++] << 33) | (var4[var5] >>> 8);
        var2[var3++] = (var4[var5++] << 56) | (var4[var5++] << 15) | (var4[var5] >>> 26);
        var2[var3++] = (var4[var5++] << 38) | (var4[var5] >>> 3);
        var2[var3++] = (var4[var5++] << 61) | (var4[var5++] << 20) | (var4[var5] >>> 21);
        var2[var3++] = (var4[var5++] << 43) | (var4[var5++] << 2) | (var4[var5] >>> 39);
        var2[var3++] = (var4[var5++] << 25) | (var4[var5] >>> 16);
        var2[var3++] = (var4[var5++] << 48) | (var4[var5++] << 7) | (var4[var5] >>> 34);
        var2[var3++] = (var4[var5++] << 30) | (var4[var5] >>> 11);
        var2[var3++] = (var4[var5++] << 53) | (var4[var5++] << 12) | (var4[var5] >>> 29);
        var2[var3++] = (var4[var5++] << 35) | (var4[var5] >>> 6);
        var2[var3++] = (var4[var5++] << 58) | (var4[var5++] << 17) | (var4[var5] >>> 24);
        var2[var3++] = (var4[var5++] << 40) | (var4[var5] >>> 1);
        var2[var3++] = (var4[var5++] << 63) | (var4[var5++] << 22) | (var4[var5] >>> 19);
        var2[var3++] = (var4[var5++] << 45) | (var4[var5++] << 4) | (var4[var5] >>> 37);
        var2[var3++] = (var4[var5++] << 27) | (var4[var5] >>> 14);
        var2[var3++] = (var4[var5++] << 50) | (var4[var5++] << 9) | (var4[var5] >>> 32);
        var2[var3++] = (var4[var5++] << 32) | (var4[var5] >>> 9);
        var2[var3++] = (var4[var5++] << 55) | (var4[var5++] << 14) | (var4[var5] >>> 27);
        var2[var3++] = (var4[var5++] << 37) | (var4[var5] >>> 4);
        var2[var3++] = (var4[var5++] << 60) | (var4[var5++] << 19) | (var4[var5] >>> 22);
        var2[var3++] = (var4[var5++] << 42) | (var4[var5++] << 1) | (var4[var5] >>> 40);
        var2[var3++] = (var4[var5++] << 24) | (var4[var5] >>> 17);
        var2[var3++] = (var4[var5++] << 47) | (var4[var5++] << 6) | (var4[var5] >>> 35);
        var2[var3++] = (var4[var5++] << 29) | (var4[var5] >>> 12);
        var2[var3++] = (var4[var5++] << 52) | (var4[var5++] << 11) | (var4[var5] >>> 30);
        var2[var3++] = (var4[var5++] << 34) | (var4[var5] >>> 7);
        var2[var3++] = (var4[var5++] << 57) | (var4[var5++] << 16) | (var4[var5] >>> 25);
        var2[var3++] = (var4[var5++] << 39) | (var4[var5] >>> 2);
        var2[var3++] = (var4[var5++] << 62) | (var4[var5++] << 21) | (var4[var5] >>> 20);
        var2[var3++] = (var4[var5++] << 44) | (var4[var5++] << 3) | (var4[var5] >>> 38);
        var2[var3++] = (var4[var5++] << 26) | (var4[var5] >>> 15);
        var2[var3++] = (var4[var5++] << 49) | (var4[var5++] << 8) | (var4[var5] >>> 33);
        var2[var3++] = (var4[var5++] << 31) | (var4[var5] >>> 10);
        var2[var3++] = (var4[var5++] << 54) | (var4[var5++] << 13) | (var4[var5] >>> 28);
        var2[var3++] = (var4[var5++] << 36) | (var4[var5] >>> 5);
        var2[var3++] = (var4[var5++] << 59) | (var4[var5++] << 18) | (var4[var5] >>> 23);
        var2[var3++] = (var4[var5++] << 41) | var4[var5++];
      }
-------------------------------------------
Context: P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:EnhancedForStatement{statements}
Number of change: 129
Change's id number: 928
insert
Type0 var0 = new Type0(var1);
Change's id number: 483
insert
Type0 var0 = null;
Change's id number: 36479
replace
Type0 var0 = Type1.method0(var1);
with
Type0 var0 = new Type0(str0);
Change's id number: 648
insert
boolean var0 = false;
Change's id number: 10170
insert
Type0<Type1> var0 = new Type2<Type1>();
-------------------------------------------
Context: P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
Number of change: 229
Change's id number: 305
update
var0
to
var0
Change's id number: 8892
replace
-1
with
0
Change's id number: 427
replace
var0.method0()
with
var0.method0()
Change's id number: 6072
replace
var0.method0()
with
var0.method0()
Change's id number: 87
replace
var0
with
var0
-------------------------------------------
Context: P:TryStatement{statements},L:MethodInvocation{statements},R:IfStatement{statements}
Number of change: 49
Change's id number: 37037
replace
String[] var0 = method0(var1);
with
int var0 = 0;
Change's id number: 31717
replace
method0(var0)
with
method0(var0, method1(var0))
Change's id number: 271
insert
var0.method0()
Change's id number: 20
insert
method0()
Change's id number: 19210
insert
method0(str0 + var0)
-------------------------------------------
Context: P:MethodDeclaration{parameters},L:SimpleName{name},R:SimpleType{thrownExceptionTypes}
Number of change: 84
Change's id number: 193
insert
Type0 var0
Change's id number: 1167
insert
String var0
Change's id number: 292
replace
String var0
with
String var0
Change's id number: 29254
replace
String[] var0
with
String[] var0
Change's id number: 595
replace
int var0
with
int var0
-------------------------------------------
Context: P:IfStatement{statements},L:,R:MethodInvocation{statements}
Number of change: 261
Change's id number: 597
insert
var0++
Change's id number: 31086
replace
var0.method0(var1)
with
var0.method0(new Type1[]{
          new Type1(var1, new Type3[] {
              new Type3(var2)})})
Change's id number: 8888
replace
if (var0 == null) {
        var1.method0(var2);
        var0 = new Type0(var1, var3);
      }
with
if (var0.method0() != null) {
        Type2 var1 = var0.method1();
        // some similarity might not compute any norms
        Type3 var2 = method2(var0.method0());
        var2.method3(var3, var1);
      }
Change's id number: 930
insert
method0(var0)
Change's id number: 267
replace
var0 = new Type0(var1.method0(var2))
with
try (InputStream var0 = var1.method0(var2)) {
        var3 = new Type0(var0);
      }
-------------------------------------------
Context: P:MethodDeclaration{statements},L:MethodInvocation{statements},R:TryStatement{statements}
Number of change: 48
Change's id number: 20
insert
method0()
Change's id number: 271
insert
var0.method0()
Change's id number: 7858
insert
Map<String, String> var0 = new HashMap<String, String>();
Change's id number: 2409
replace
Type0 var0 = null;
with
int var0 = var1.method0(str0, 1);
Change's id number: 9325
insert
if (var0 > 0) {
        var1.method0(var2, Long.toString(var0));
      }
-------------------------------------------
Context: P:WhileStatement{statements},L:VariableDeclarationStatement{statements},R:MethodInvocation{statements}
Number of change: 33
Change's id number: 9393
replace
if (var0 == var1) {
              break;
            }
with
if (var0 == var1) {
              break;
            }
Change's id number: 9915
replace
if (var0 && var1.method0(var2)) {
          // Make sure we only write del docs for a live segment:
          assert method1(var3);
          // Must checkpoint w/ deleter, because we just
          // created created new _X_N.del file.
          var4.method2(var5, false);
        }
with
try {
          if (var0 && var1.method0(var2)) {
            // Make sure we only write del docs for a live segment:
            assert method1(var3);
            // Must checkpoint w/ deleter, because we just
            // created created new _X_N.del file.
            var4.method2(var5, false);
          }
        } catch (Throwable var6) {
          if (var7 != null) {
            var7 = var6;
          }
        }
Change's id number: 1118
insert
if (var0) {
            var1.method0(var2, var3, var4);
          }
Change's id number: 5317
replace
if (var0 > 0) {
            var1[var2++] = var3;
            var0++;
          }
with
if (var0.method0() > 0) {
            var0.method1(var1++, var2);
            var0.method2(var0.method0() + 1);
          }
Change's id number: 5275
replace
var0 = 0
with
var0.method0(0)
-------------------------------------------
Context: P:MethodDeclaration{statements},L:IfStatement{statements},R:MethodInvocation{statements}
Number of change: 245
Change's id number: 650
insert
int var0 = var1.method0();
Change's id number: 29788
replace
var0.method0(var1)
with
var0.method0(var1.method1())
Change's id number: 36389
insert
int var0 = var1 ? -1 : Type0.method0(var2);
Change's id number: 36396
replace
if (var0==null) var0 = var1;
with
if (!var0 && var1 instanceof Type1) {
            Type1 var2 = (Type1) var1;
            Type2 var3 = var2.method0();
            if (method1(var3, var4, var5, method2(var6))) return;
        }
Change's id number: 3196
insert
method0(var0, var1)
-------------------------------------------
Context: P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
Number of change: 119
Change's id number: 49
update
str0
to
str0
Change's id number: 8968
replace
var0 * (var1.method0() + 1)
with
(var0 * (var1.method0() + 1))
Change's id number: 305
update
var0
to
var0
Change's id number: 271
insert
var0.method0()
Change's id number: 427
replace
var0.method0()
with
var0.method0()
-------------------------------------------
Context: P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:MethodInvocation{statements}
Number of change: 251
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 1333
insert
Type0 var0 = var1;
Change's id number: 8276
insert
String[] var0;
Change's id number: 33072
insert
var0.method0(Type2.class, var1)
Change's id number: 604
insert
Type0 var0 = new Type0();
-------------------------------------------
Context: P:InfixExpression{rightOperand},L:ParenthesizedExpression{leftOperand},R:
Number of change: 48
Change's id number: 46
update
var0
to
var0
Change's id number: 10308
update
3L
to
3
Change's id number: 87
replace
var0
with
var0
Change's id number: 29927
replace
(int)var0[var1]
with
var0[var1]
Change's id number: 3651
replace
StrictMath.tan(StrictMath.toRadians(var0))
with
var0.method0(var1 * var2)
-------------------------------------------
Context: P:EnhancedForStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
Number of change: 47
Change's id number: 32920
replace
this.method0(var0)
with
var0 = var1
Change's id number: 27398
insert
String var0 = var1.method0(
        var2.method1());
Change's id number: 8861
insert
if (var0 == null) {
          var1 = -1;
        } else {
          var1 = var2.method0(var0);
        }
Change's id number: 9921
insert
method0(var0.method1())
Change's id number: 35473
insert
if (var0==null) var0 = method0(var1, var2, var3);
-------------------------------------------
Context: P:InfixExpression{rightOperand},L:QualifiedName{leftOperand},R:
Number of change: 35
Change's id number: 305
update
var0
to
var0
Change's id number: 8892
replace
-1
with
0
Change's id number: 46
update
var0
to
var0
Change's id number: 55
replace
var0.size()
with
var0.size()
Change's id number: 2122
update
2
to
1
-------------------------------------------
Context: P:SwitchCase{statements},L:IfStatement{statements},R:BreakStatement{statements}
Number of change: 50
Change's id number: 19917
replace
method0(25, 26)
with
method0(27, 28)
Change's id number: 9079
replace
method0(27, 28)
with
method0(33, 34)
Change's id number: 21374
replace
method0(31, 32)
with
method0(33, 34)
Change's id number: 21277
replace
method0(33, 34)
with
method0(25, 26)
Change's id number: 9109
insert
if (var0 > 20)
                        var0 = 20;
-------------------------------------------
Context: P:MethodDeclaration{statements},L:IfStatement{statements},R:EnhancedForStatement{statements}
Number of change: 29
Change's id number: 36491
replace
final Type0 var0 = Type1.method0(var1);
with
Type0 var0 = new Type0(str0);
Change's id number: 6372
insert
List<Type0> var0 = new ArrayList<Type0>();
Change's id number: 31620
insert
Collection<Type0> var0 = this.var1.method0().method1();
Change's id number: 1591
insert
if (var0.contains(var1)) var2.method0(var1, str0);
Change's id number: 17563
insert
final Type0 var0 = new Type0((Type1)null);
-------------------------------------------
Context: P:MethodDeclaration{statements},L:ForStatement{statements},R:
Number of change: 156
Change's id number: 205
replace
return var0;
with
return var0;
Change's id number: 641
insert
return true;
Change's id number: 604
insert
Type0 var0 = new Type0();
Change's id number: 163
insert
return false;
Change's id number: 9336
insert
if (var0 == var1 || var0 == var2) {
      // check sorted bytes
      Type1 var3 = var4.method0();
      Comparator<Type3> var5 = var3.method1();
      int var6 = var3.method2() - 1;
      Type4 var7 = new Type4(var3.method2());
      int var8 = -1;
      Type3 var9 = new Type3();
      for (int var10 = 0; var10 < var11; var10++) {
        int var12 = var3.method3(var10);
        if (var12 < 0 || var12 > var6) {
          throw new RuntimeException(str0 + var13 + str1 + var12);
        }
        Type3 var14 = new Type3();
        var3.method4(var12, var14);
        if (var8 != -1) {
          int var15 = Integer.signum(new Integer(var12).compareTo(new Integer(var8)));
          int var16 = Integer.signum(var5.compare(var14, var9));
          if (var15 != var16) {
            throw new RuntimeException(str0 + var13 + str2 + var15 + str3 + var16);
          }
        }
        var8 = var12;
        var9 = var14;
        var7.method5(var12);
      }
      if (var7.method6() != var3.method2()) {
        // TODO: find the bug here and figure out a workaround (we can implement in LUCENE-4547's back compat layer maybe)
        // basically ord 0 is unused by any docs: so the sortedbytes ords are all off-by-one
        // does it always happen? e.g. maybe only if there are missing values? or a bug in its merge optimizations?
        // throw new RuntimeException("dv for field: " + fieldName + " has holes in its ords, valueCount=" + sortedValues.getValueCount() + " but only used: " + seenOrds.cardinality());
      }
    }
-------------------------------------------
Context: P:IfStatement{statements},L:Assignment{statements},R:MethodInvocation{statements}
Number of change: 68
Change's id number: 3196
insert
method0(var0, var1)
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 2167
insert
var0 -= var1
Change's id number: 6793
insert
var0.addAndGet(var1.method0())
Change's id number: 27662
replace
var0.method0(str0 + Arrays.toString(var1))
with
if (var0.method0()) {
          var0.method1(str0 + Arrays.toString(var1));
        }
-------------------------------------------
Context: P:IfStatement{statements},L:,R:Assignment{statements}
Number of change: 213
Change's id number: 4753
insert
assert var0 == null;
Change's id number: 29372
replace
var0 = var0.method0(var1, var2)
with
var0.method0(var1)
Change's id number: 29356
replace
var0[0] = var1
with
var0[0] = var1
Change's id number: 643
insert
var0 = true
Change's id number: 11495
replace
var0.method0(var1)
with
var0 = 0
-------------------------------------------
Context: P:MethodDeclaration{statements},L:Assignment{statements},R:IfStatement{statements}
Number of change: 165
Change's id number: 9283
replace
Type0 var0 = new Type1(var1);
with
final Type0 var0 = var1.method0();
Change's id number: 23101
replace
String var0 = var1.method0();
with
Type0 var0 = var1.method0();
Change's id number: 29287
insert
var0 = var1.readLong()
Change's id number: 36460
insert
var0 = new Type0(var1, var2, var3, var4, var5, var6)
Change's id number: 2946
insert
if (var0 != null) {
      for (final Type0 var1 : var0) {
        final Type1[] var2 = var1.method0();
        for (final Type1 var3 : var2) {
          var4[var5++] = var3;
        }
      }
    }
-------------------------------------------
Context: P:ParameterizedType{type},L:,R:SimpleType{typeArguments}
Number of change: 66
Change's id number: 21
update
Type0
to
Type0
Change's id number: 29419
update
Type0
to
List
Change's id number: 903
update
Collection
to
List
Change's id number: 3202
update
HashMap
to
Map
Change's id number: 2750
update
Map
to
Entry
-------------------------------------------
Context: P:ForStatement{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
Number of change: 57
Change's id number: 9428
replace
if (var0[var1] == null) {
              var2 = -1;
            } else {
              var2 = var3[var1].method0(var0[var1], var4);
            }
with
var0[var1] = var2[var1].method0(var3[var1], var4)
Change's id number: 10305
replace
final int var0 = var1[var2++] & 0xFF;
with
final long var0 = var1[var2++];
Change's id number: 37568
replace
if (var0.method0()) {
                    String var1 = var0.method1();
                    if (var2.containsKey(var1)) var0=new Type0(var2.get(var1));
                }
with
if (var0.method0()) {
                    for (Type1 var1 : var0.method1()) {
                        var2 = method2(var1, var3);
                        if (!var2) return false;
                    }
                } else if (var0.method3()) {
                    if (var4.method3()) {
                        var2 = var0.method4().equals(var4.method4());
                    } else {
                        String var5 = var0.method4();
                        if (var6.containsKey(var5)) var0=var6.get(var5);
                        var2 = var0.method5(var4.method6());
                    }
                } else {
                    if (var4.method3()) {
                        if (var0.method3()) {
                            var2 = var0.method4().equals(var4.method4());
                        } else {
                            String var5 = var4.method4();
                            if (var7.containsKey(var5)) {
                                var4 = var7.get(var5);
                                boolean var8 = var4.method0();
                                boolean var9 = var4.method3();
                                if (var9 || var8) {
                                    // placeholder aliases, like Map<U,V> -> Map<K,V>
//                                    redirectBoundType = classNodePlaceholders.get(name);
                                    if (var8) {
                                        // ex: Comparable<Integer> <=> Comparable<? super T>
                                        if (var10!=null) {
                                            Type0 var11 = new Type0(var10);
                                            if (var11.method3()) {
                                                // check for recursive generic typedef, like in
                                                // <T extends Comparable<? super T>>
                                                if (var6.containsKey(var11.method4())) {
                                                    var11 = var6.get(var11.method4());
                                                }
                                            }
                                            var2 = var11.method6().method7(var0.method6());
                                        }
                                        if (var2 && var12!=null) {
                                            for (Type1 var13 : var12) {
                                                Type0 var11 = new Type0(var13);
                                                if (var11.method3()) {
                                                    // check for recursive generic typedef, like in
                                                    // <T extends Comparable<? super T>>
                                                    if (var6.containsKey(var11.method4())) {
                                                        var11 = var6.get(var11.method4());
                                                    }
                                                }
                                                var2 = var2 && var0.method6().method7(var11.method6());
                                            }
                                        }
                                        return var2;
                                    } else {
                                        var4 = var6.get(var5);
                                    }

                                }
                            }
                            var2 = var4.method5(var0.method6());
                        }
                    } else {
                        var2 = var0.method5(var4.method6());
                    }
                }
Change's id number: 4192
replace
if (var0 > 1) {
          var1 = new Type1(var2, var3, var4, var5, var6);

          // coarse -- this overcounts since a given doc can
          // have more than one term:
          var7 = 0;
          for(int var8=0;var8<var0;var8++) {
            final Type4 var9 = var4[var8];
            Type7 var10 = var5.get(var9).method0(var11);
            if (var10 == null) {
              // Term not in reader
              continue;
            }
            var6.method1(var9.method2(), var10);
            var7 += var6.method3();
          }

          if (var7 == 0) {
            // None of the terms are in this reader
            return null;
          }
        } else {
          final Type4 var9 = var4[0];
          Type7 var10 = var5.get(var9).method0(var11);
          if (var10 == null) {
            // Term not in reader
            return null;
          }
          var6.method1(var9.method2(), var10);
          var1 = var6.method4(var2, null, var12);

          var7 = var6.method3();
        }
with
if (var0.isEmpty()) {
          return null;
        }
Change's id number: 10686
insert
var0[var1++] = var2 >>> 63
-------------------------------------------
Context: P:MethodDeclaration{returnType2},L:Javadoc{javadoc},R:SimpleName{name}
Number of change: 31
Change's id number: 4112
replace
Type0
with
Type0[]
Change's id number: 29562
update
Type0
to
Comparable
Change's id number: 28078
replace
Iterable<Type0>
with
Iterator<Type0>
Change's id number: 20494
update
Type0
to
FileNotFoundException
Change's id number: 1687
replace
void
with
Type0
-------------------------------------------
Context: P:ArrayInitializer{expressions},L:NumberLiteral{expressions},R:NumberLiteral{expressions}
Number of change: 50
Change's id number: 1578
update
0xc0
to
0xc8
Change's id number: 1870
update
0x0
to
0x20000000
Change's id number: 2074
update
0x10000000
to
0x90000000
Change's id number: 19940
update
16
to
25
Change's id number: 19974
update
23
to
25
-------------------------------------------
Context: P:ForStatement{statements},L:Assignment{statements},R:VariableDeclarationStatement{statements}
Number of change: 1018
Change's id number: 17355
insert
var0 |= var1 && var2 != var3
Change's id number: 10305
replace
final int var0 = var1[var2++] & 0xFF;
with
final long var0 = var1[var2++];
Change's id number: 7507
insert
final String var0 = var1.method0();
Change's id number: 11007
insert
var0[var1++] = (var2 >>> 16) & 16383L
Change's id number: 11189
insert
var0[var1++] = (var2 >>> 44) & 16383L
-------------------------------------------
Context: P:TryStatement{catchClauses},L:Block{body},R:CatchClause{catchClauses}
Number of change: 35
Change's id number: 30935
insert
catch (InterruptedException var0) {
      }
Change's id number: 31719
replace
catch (IOException var0) {
      this.method0();
      throw var0;
    }
with
catch (IOException var0) {
      this.method0();
      throw var0;
    }
Change's id number: 27666
insert
catch (ConnectException var0) {
        var1 = false;
        if (var2) {
          var3.method0(str0 +
              var4.method1().method2() +
              str1);
        }
      }
Change's id number: 39712
insert
catch (Type0 var0) {
      var0.method0();
    }
Change's id number: 1903
insert
catch (SSLPeerUnverifiedException var0) {
            throw var0;
        }
-------------------------------------------
Context: P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:MethodInvocation{statements}
Number of change: 598
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 645
insert
var0.method0()
Change's id number: 29365
insert
byte[] var0 = var1[var2-1];
Change's id number: 316
insert
int var0 = 0;
-------------------------------------------
Context: P:TryStatement{statements},L:MethodInvocation{statements},R:VariableDeclarationStatement{statements}
Number of change: 72
Change's id number: 36206
replace
var0.pop()
with
var0.method0()
Change's id number: 36174
replace
var0.method0()
with
var0.pop()
Change's id number: 37041
replace
method0()
with
var0.add(str0)
Change's id number: 29593
insert
if (var0) {
        method0(var1, var2, var3);
      }
Change's id number: 6425
insert
var0 = new BufferedInputStream(new FileInputStream(var1))
-------------------------------------------
Context: P:MethodDeclaration{statements},L:WhileStatement{statements},R:
Number of change: 80
Change's id number: 294
insert
return var0;
Change's id number: 2793
replace
return var0;
with
return method0(var0);
Change's id number: 44073
insert
if ((var0 = var1 - var2) > 0) {
      method0(var3, var3 + var0, var4, var5);
    }
Change's id number: 44138
insert
return var0 - 1;
Change's id number: 205
replace
return var0;
with
return var0;
-------------------------------------------
Context: P:InfixExpression{leftOperand},L:,R:MethodInvocation{rightOperand}
Number of change: 103
Change's id number: 49
update
str0
to
str0
Change's id number: 305
update
var0
to
var0
Change's id number: 26798
replace
var0
with
var0.method0(var1)
Change's id number: 62
insert
var0
Change's id number: 6612
replace
var0.equals(var1)
with
var0.equals(var1)
-------------------------------------------
Context: P:IfStatement{thenStatement},L:MethodInvocation{expression},R:IfStatement{elseStatement}
Number of change: 52
Change's id number: 27389
insert
{
      if (var0 != 1) {
        method0(var1);
        return var2;
      }
    }
Change's id number: 28956
insert
{
      var0.println(var1);
    }
Change's id number: 5654
insert
{
      return var0;
    }
Change's id number: 28912
replace
{ 
          var0 = new Integer(var1[0]).intValue();
        }
with
{
          var0 = var1[0];
        }
Change's id number: 1818
replace
{
        var0[var1] = new Type0() {
          public Object selectValue(ResultSet var2) throws SQLException {
            Short var3 = var2.getShort(var4);
            if(var2.wasNull()){ return null; }
            return var3.longValue();
          }
          public String getColumnName() {
            return var5;
          }
        };
      }
with
{
      var0 = new Type0() {
        @Override
        public Object selectValue(ResultSet var1) throws SQLException {
          Timestamp var2 = var1.getTimestamp(var3);
          return var1.wasNull() ? null : var2.method0().method1();
        }
        @Override
        public String getColumnName() {
          return var4;
        }
      };
    }
-------------------------------------------
Context: P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
Number of change: 269
Change's id number: 21
update
Type0
to
Type0
Change's id number: 1686
replace
int
with
Type0
Change's id number: 31136
replace
Map<String, Map<String, InetSocketAddress>>
with
List<InetSocketAddress>
Change's id number: 799
update
int
to
long
Change's id number: 18374
replace
List
with
List<Type0>
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
Number of change: 103
Change's id number: 9273
insert
private static final class Type0 extends Type1 {
    private final short[] var0;

    public ShortOrdComparator(short[] var0, Type2 var1) {
      super(var1);
      this.var0 = var0;
    }

    @Override
    public int compareBottom(int var2) {
      assert var3 != -1;
      int var4 = var0[var2]&0xFFFF;
      if (var4 == 0) var4 = var5;
      if (var6) {
        // ord is precisely comparable, even in the equal case
        return var7 - var4;
      } else {
        // ord is only approx comparable: if they are not
        // equal, we can use that; if they are equal, we
        // must fallback to compare by value
        final int var8 = var7 - var4;
        if (var8 != 0) {
          return var8;
        }

        // take care of the case where both vals are null
        if (var4 == var5) return 0;

        // and at this point we know that neither value is null, so safe to compare
        var9.method0(var4, var10);
        return var11.method1(var10);
      }
    }

    @Override
    public void copy(int var12, int var2) {
      int var13 = var0[var2]&0xFFFF;
      if (var13 == 0) {
        var14[var12] = var5;
        var15[var12] = null;
      } else {
        var14[var12] = var13;
        assert var13 > 0;
        if (var15[var12] == null) {
          var15[var12] = new Type3();
        }
        var9.method0(var13, var15[var12]);
      }
      var16[var12] = var17;
    }
  }
Change's id number: 9286
insert
private static final class Type0 extends Type1 {
    private final int[] var0;

    public IntOrdComparator(int[] var0, Type2 var1) {
      super(var1);
      this.var0 = var0;
    }

    @Override
    public int compareBottom(int var2) {
      assert var3 != -1;
      int var4 = var0[var2];
      if (var4 == 0) var4 = var5;
      if (var6) {
        // ord is precisely comparable, even in the equal case
        return var7 - var4;
      } else {
        // ord is only approx comparable: if they are not
        // equal, we can use that; if they are equal, we
        // must fallback to compare by value
        final int var8 = var7 - var4;
        if (var8 != 0) {
          return var8;
        }

        // take care of the case where both vals are null
        if (var4 == var5) return 0;

        // and at this point we know that neither value is null, so safe to compare
        var9.method0(var4, var10);
        return var11.method1(var10);
      }
    }

    @Override
    public void copy(int var12, int var2) {
      int var13 = var0[var2];
      if (var13 == 0) {
        var14[var12] = var5;
        var15[var12] = null;
      } else {
        var14[var12] = var13;
        assert var13 > 0;
        if (var15[var12] == null) {
          var15[var12] = new Type3();
        }
        var9.method0(var13, var15[var12]);
      }
      var16[var12] = var17;
    }
  }
Change's id number: 9247
insert
/** Sorts by field's natural Term sort order, using
   *  ordinals; this is just like {@link
   *  org.apache.lucene.search.FieldComparator.TermValComparator} except it uses DocValues to
   *  retrieve the sort ords saved during indexing. */
  public static final class Type0 extends Type1<Type2> {
    /* Ords for each slot.
       @lucene.internal */
    final int[] var0;

    /* Values for each slot.
       @lucene.internal */
    final Type2[] var1;

    /* Which reader last copied a value into the slot. When
       we compare two slots, we just compare-by-ord if the
       readerGen is the same; else we must compare the
       values (slower).
       @lucene.internal */
    final int[] var2;

    /* Gen of current reader we are on.
       @lucene.internal */
    int var3 = -1;

    /* Current reader's doc ord/values.
       @lucene.internal */
    Type3 var4;

    /* Comparator for comparing by value.
       @lucene.internal */
    Comparator<Type2> var5;

    private final String var6;

    /* Bottom slot, or -1 if queue isn't full yet
       @lucene.internal */
    int var7 = -1;

    /* Bottom ord (same as ords[bottomSlot] once bottomSlot
       is set).  Cached for faster compares.
       @lucene.internal */
    int var8;

    /* True if current bottom slot matches the current
       reader.
       @lucene.internal */
    boolean var9;

    /* Bottom value (same as values[bottomSlot] once
       bottomSlot is set).  Cached for faster compares.
      @lucene.internal */
    Type2 var10;

    /** @lucene.internal */
    final Type2 var11 = new Type2();

    public TermOrdValDocValuesComparator(int var12, String var6) {
      var0 = new int[var12];
      var1 = new Type2[var12];
      var2 = new int[var12];
      this.var6 = var6;
    }

    @Override
    public int compare(int var13, int var14) {
      if (var2[var13] == var2[var14]) {
        return var0[var13] - var0[var14];
      }

      final Type2 var15 = var1[var13];
      final Type2 var16 = var1[var14];
      if (var15 == null) {
        if (var16 == null) {
          return 0;
        }
        return -1;
      } else if (var16 == null) {
        return 1;
      }
      return var5.compare(var15, var16);
    }

    @Override
    public int compareBottom(int var17) {
      throw new UnsupportedOperationException();
    }

    @Override
    public void copy(int var18, int var17) {
      throw new UnsupportedOperationException();
    }

    @Override
    public int compareDocToValue(int var17, Type2 var19) {
      return var4.method0(var17, var11).method1(var19);
    }

    // TODO: would be nice to share these specialized impls
    // w/ TermOrdValComparator

    /** Base class for specialized (per bit width of the
     * ords) per-segment comparator.  NOTE: this is messy;
     * we do this only because hotspot can't reliably inline
     * the underlying array access when looking up doc->ord
     * @lucene.internal
     */
    abstract class Type4 extends Type1<Type2> {
      
      @Override
      public Type1<Type2> setNextReader(Type5 var20) throws IOException {
        return Type0.this.method2(var20);
      }

      @Override
      public int compare(int var13, int var14) {
        return Type0.this.method3(var13, var14);
      }

      @Override
      public void setBottom(final int var21) {
        Type0.this.method4(var21);
      }

      @Override
      public Type2 value(int var18) {
        return Type0.this.method5(var18);
      }

      @Override
      public int compareValues(Type2 var15, Type2 var16) {
        assert var15 != null;
        assert var16 != null;
        return var5.compare(var15, var16);
      }

      @Override
      public int compareDocToValue(int var17, Type2 var19) {
        return Type0.this.method6(var17, var19);
      }
    }

    // Used per-segment when bit width of doc->ord is 8:
    private final class Type6 extends Type4 {
      private final byte[] var22;
      private final Type3 var4;
      private final int var23;

      public ByteOrdComparator(byte[] var22, Type3 var4, int var23) {
        this.var22 = var22;
        this.var4 = var4;
        this.var23 = var23;
      }

      @Override
      public int compareBottom(int var17) {
        assert var7 != -1;
        final int var24 = var22[var17]&0xFF;
        if (var9) {
          // ord is precisely comparable, even in the equal case
          return var8 - var24;
        } else if (var8 >= var24) {
          // the equals case always means bottom is > doc
          // (because we set bottomOrd to the lower bound in
          // setBottom):
          return 1;
        } else {
          return -1;
        }
      }

      @Override
      public void copy(int var18, int var17) {
        final int var25 = var22[var17]&0xFF;
        var0[var18] = var25;
        if (var1[var18] == null) {
          var1[var18] = new Type2();
        }
        var4.method7(var25, var1[var18]);
        var2[var18] = var3;
      }
    }

    // Used per-segment when bit width of doc->ord is 16:
    private final class Type7 extends Type4 {
      private final short[] var22;
      private final Type3 var4;
      private final int var23;

      public ShortOrdComparator(short[] var22, Type3 var4, int var23) {
        this.var22 = var22;
        this.var4 = var4;
        this.var23 = var23;
      }

      @Override
      public int compareBottom(int var17) {
        assert var7 != -1;
        final int var24 = var22[var17]&0xFFFF;
        if (var9) {
          // ord is precisely comparable, even in the equal case
          return var8 - var24;
        } else if (var8 >= var24) {
          // the equals case always means bottom is > doc
          // (because we set bottomOrd to the lower bound in
          // setBottom):
          return 1;
        } else {
          return -1;
        }
      }

      @Override
      public void copy(int var18, int var17) {
        final int var25 = var22[var17]&0xFFFF;
        var0[var18] = var25;
        if (var1[var18] == null) {
          var1[var18] = new Type2();
        }
        var4.method7(var25, var1[var18]);
        var2[var18] = var3;
      }
    }

    // Used per-segment when bit width of doc->ord is 32:
    private final class Type8 extends Type4 {
      private final int[] var22;
      private final Type3 var4;
      private final int var23;

      public IntOrdComparator(int[] var22, Type3 var4, int var23) {
        this.var22 = var22;
        this.var4 = var4;
        this.var23 = var23;
      }

      @Override
      public int compareBottom(int var17) {
        assert var7 != -1;
        final int var24 = var22[var17];
        if (var9) {
          // ord is precisely comparable, even in the equal case
          return var8 - var24;
        } else if (var8 >= var24) {
          // the equals case always means bottom is > doc
          // (because we set bottomOrd to the lower bound in
          // setBottom):
          return 1;
        } else {
          return -1;
        }
      }

      @Override
      public void copy(int var18, int var17) {
        final int var25 = var22[var17];
        var0[var18] = var25;
        if (var1[var18] == null) {
          var1[var18] = new Type2();
        }
        var4.method7(var25, var1[var18]);
        var2[var18] = var3;
      }
    }

    // Used per-segment when bit width is not a native array
    // size (8, 16, 32):
    private final class Type9 extends Type4 {
      private final Type10 var22;
      private final int var23;

      public AnyPackedDocToOrdComparator(Type10 var22, int var23) {
        this.var22 = var22;
        this.var23 = var23;
      }

      @Override
      public int compareBottom(int var17) {
        assert var7 != -1;
        final int var24 = (int) var22.method8(var17);
        if (var9) {
          // ord is precisely comparable, even in the equal case
          return var8 - var24;
        } else if (var8 >= var24) {
          // the equals case always means bottom is > doc
          // (because we set bottomOrd to the lower bound in
          // setBottom):
          return 1;
        } else {
          return -1;
        }
      }

      @Override
      public void copy(int var18, int var17) {
        final int var25 = (int) var22.method8(var17);
        var0[var18] = var25;
        if (var1[var18] == null) {
          var1[var18] = new Type2();
        }
        var4.method7(var25, var1[var18]);
        var2[var18] = var3;
      }
    }

    // Used per-segment when DV doesn't use packed ints for
    // docToOrds:
    private final class Type11 extends Type4 {
      private final int var23;

      public AnyOrdComparator(int var23) {
        this.var23 = var23;
      }

      @Override
      public int compareBottom(int var17) {
        final int var24 = var4.method9(var17);
        if (var9) {
          // ord is precisely comparable, even in the equal case
          return var8 - var24;
        } else if (var8 >= var24) {
          // the equals case always means bottom is > doc
          // (because we set bottomOrd to the lower bound in
          // setBottom):
          return 1;
        } else {
          return -1;
        }
      }

      @Override
      public void copy(int var18, int var17) {
        final int var25 = var4.method9(var17);
        var0[var18] = var25;
        if (var1[var18] == null) {
          var1[var18] = new Type2();
        }
        var4.method7(var25, var1[var18]);
        var2[var18] = var3;
      }
    }

    @Override
    public Type1<Type2> setNextReader(Type5 var20) throws IOException {
      final int var23 = var23;

      final Type12 var26 = var20.method10().method11(var6);
      if (var26 == null) {
        // This may mean entire segment had no docs with
        // this DV field; use default field value (empty
        // byte[]) in this case:
        var4 = Type12.method12(var27, var20.method10().method13());
      } else {
        var4 = var26.method14().method15();
        if (var4 == null) {
          // This means segment has doc values, but they are
          // not able to provide a sorted source; consider
          // this a hard error:
          throw new IllegalStateException(str0 + var6 + str1 + var26.method14().method16() + str2 + var20.method10());
        }
      }

      var5 = var4.method17();

      Type1<Type2> var28 = null;
      if (var4.method18()) {
        final Type10 var29 = var4.method19();
        if (var29.method20()) {
          final Object var30 = var29.method21();
          assert var30 != null;
          if (var30 instanceof byte[]) {
            // 8 bit packed
            var28 = new Type6((byte[]) var30, var4, var23);
          } else if (var30 instanceof short[]) {
            // 16 bit packed
            var28 = new Type7((short[]) var30, var4, var23);
          } else if (var30 instanceof int[]) {
            // 32 bit packed
            var28 = new Type8((int[]) var30, var4, var23);
          }
        }

        if (var28 == null) {
          var28 = new Type9(var29, var23);
        }
      } else {
        if (var28 == null) {
          var28 = new Type11(var23);
        }
      }
        
      var3++;
      if (var7 != -1) {
        var28.method4(var7);
      }

      return var28;
    }
    
    @Override
    public void setBottom(final int var21) {
      var7 = var21;

      var10 = var1[var7];
      if (var3 == var2[var7]) {
        var8 = var0[var7];
        var9 = true;
      } else {
        if (var10 == null) {
          // 0 ord is null for all segments
          assert var0[var7] == 0;
          var8 = 0;
          var9 = true;
          var2[var7] = var3;
        } else {
          final int var31 = var4.method22(var10, var11);
          if (var31 < 0) {
            var8 = -var31 - 2;
            var9 = false;
          } else {
            var8 = var31;
            // exact value match
            var9 = true;
            var2[var7] = var3;            
            var0[var7] = var8;
          }
        }
      }
    }

    @Override
    public Type2 value(int var18) {
      return var1[var18];
    }
  }
Change's id number: 9256
insert
/** Loads int index values and sorts by ascending value. */
  public static final class Type0 extends Type1<Long> {
    private final long[] var0;
    private Type2 var1;
    private final String var2;
    private long var3;

    IntDocValuesComparator(int var4, String var2) {
      var0 = new long[var4];
      this.var2 = var2;
    }

    @Override
    public int compare(int var5, int var6) {
      // TODO: there are sneaky non-branch ways to compute
      // -1/+1/0 sign
      final long var7 = var0[var5];
      final long var8 = var0[var6];
      if (var7 > var8) {
        return 1;
      } else if (var7 < var8) {
        return -1;
      } else {
        return 0;
      }
    }

    @Override
    public int compareBottom(int var9) {
      // TODO: there are sneaky non-branch ways to compute
      // -1/+1/0 sign
      final long var8 = var1.method0(var9);
      if (var3 > var8) {
        return 1;
      } else if (var3 < var8) {
        return -1;
      } else {
        return 0;
      }
    }

    @Override
    public void copy(int var10, int var9) {
      var0[var10] = var1.method0(var9); 
    }

    @Override
    public Type1<Long> setNextReader(Type3 var11) throws IOException {
      Type4 var12 = var11.method1().method2(var2);
      if (var12 != null) {
        var1 = var12.method3();
      } else {
        var1 = Type4.method4(var13);
      }
      return this;
    }
    
    @Override
    public void setBottom(final int var3) {
      this.var3 = var0[var3];
    }

    @Override
    public Long value(int var10) {
      return Long.valueOf(var0[var10]);
    }

    @Override
    public int compareDocToValue(int var9, Long var14) {
      final long var15 = var14.longValue();
      final long var16 = var1.method0(var9);
      if (var16 < var15) {
        return -1;
      } else if (var16 > var15) {
        return 1;
      } else {
        return 0;
      }
    }
  }
Change's id number: 9259
insert
/** Uses float index values to sort by ascending value */
  public static final class Type0 extends Type1<Double> {
    private final double[] var0;
    private final String var1;
    private Type2 var2;
    private double var3;

    FloatDocValuesComparator(int var4, String var1) {
      var0 = new double[var4];
      this.var1 = var1;
    }

    @Override
    public int compare(int var5, int var6) {
      final double var7 = var0[var5];
      final double var8 = var0[var6];
      if (var7 > var8) {
        return 1;
      } else if (var7 < var8) {
        return -1;
      } else {
        return 0;
      }
    }

    @Override
    public int compareBottom(int var9) {
      final double var8 = var2.method0(var9);
      if (var3 > var8) {
        return 1;
      } else if (var3 < var8) {
        return -1;
      } else {
        return 0;
      }
    }

    @Override
    public void copy(int var10, int var9) {
      var0[var10] = var2.method0(var9); 
    }

    @Override
    public Type1<Double> setNextReader(Type3 var11) throws IOException {
      final Type4 var12 = var11.method1().method2(var1);
      if (var12 != null) {
        var2 = var12.method3(); 
      } else {
        var2 = Type4.method4(var13);
      }
      return this;
    }
    
    @Override
    public void setBottom(final int var3) {
      this.var3 = var0[var3];
    }

    @Override
    public Double value(int var10) {
      return Double.valueOf(var0[var10]);
    }

    @Override
    public int compareDocToValue(int var9, Double var14) {
      final double var15 = var14.doubleValue();
      final double var16 = var2.method0(var9);
      if (var16 < var15) {
        return -1;
      } else if (var16 > var15) {
        return 1;
      } else {
        return 0;
      }
    }
  }
-------------------------------------------
Context: P:MethodInvocation{arguments},L:NumberLiteral{arguments},R:
Number of change: 52
Change's id number: 46
update
var0
to
var0
Change's id number: 21733
update
17
to
11
Change's id number: 41647
replace
(Float)var0.get(var1.method0(str0))
with
var0.get(var1.method0(str0))
Change's id number: 62
insert
var0
Change's id number: 87
replace
var0
with
var0
-------------------------------------------
Context: P:EnhancedForStatement{statements},L:MethodInvocation{statements},R:MethodInvocation{statements}
Number of change: 27
Change's id number: 29917
replace
var0.append(str0)
with
var0.print(str0)
Change's id number: 620
replace
var0.method0(var1)
with
var0.method0(var1)
Change's id number: 28811
insert
Type0 var0 =
            new Type0(var1 + str0 + var2.method0());
Change's id number: 19090
insert
var0.put(str0, var1.method0())
Change's id number: 864
insert
var0.method0(var1.method1())
-------------------------------------------
Context: P:EnhancedForStatement{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
Number of change: 69
Change's id number: 34169
replace
Type0 var0 = method0(var1, str0);
with
Type0 var0 = var1.method0();
Change's id number: 9024
insert
if (var0.method0()) {
        var1.method1(var2, var3);
      }
Change's id number: 36496
insert
if (var0) return true;
Change's id number: 3752
replace
Type0 var0 = var1.method0();
with
Type0 var0 = new Type0(var1);
Change's id number: 35006
insert
try {
                    var0 = method0(var1);
                } catch (Type1 var2) {
                    var0 = var3;
                }
-------------------------------------------
Context: P:IfStatement{statements},L:,R:ReturnStatement{statements}
Number of change: 111
Change's id number: 36204
replace
method0(str0 + var0.method1() + str1, var0)
with
method0(var0)
Change's id number: 8911
replace
var0.method0(var1, var2)
with
final Type0 var0 = var1.method0(var2, var3);
Change's id number: 31047
insert
assert var0.method0(var1) < 0 : str0 + var2
        + str1 + var1;
Change's id number: 35247
insert
for (Object var0 : keySet()) {
                if (!Type0.method0(get(var0), var1.get(var0))) {
                    return false;
                }
            }
Change's id number: 36341
insert
String var0 = var1.substring(1);
-------------------------------------------
Context: P:MethodDeclaration{statements},L:MethodInvocation{statements},R:IfStatement{statements}
Number of change: 208
Change's id number: 20
insert
method0()
Change's id number: 271
insert
var0.method0()
Change's id number: 31586
replace
for(Type0 var0: var1.method0()) {
      var0.method1(var2, var3);
    }
with
for(Type0 var0: var1.method0()) {
      Type2 var2 = var3;
      try {
        var2.method1(var4, var5, var6);
      } catch(IOException var7) {
        var8.method2(str0, var7);
      }
    }
Change's id number: 36154
replace
Type0 var0 = var1.method0();
with
Type0 var0 = var1;
Change's id number: 37
replace
method0()
with
method0()
-------------------------------------------
Context: P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
Number of change: 231
Change's id number: 6061
insert
if (var0 != null && var1 == 0 && !var0.method0(var2)) {
        var1 = var3;
      }
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 31164
replace
if (null != var0) {
      this.var1 = var0;
    } else {
      this.var1 = Type2.method0(var2);
    }
with
this.var0 = Type2.method0(var1)
Change's id number: 36380
replace
if (var0) {
            var1.method0().method1(var2.method2(), true);
            var3 += method3(Object[].class);
        } else {
            for (Type4 var4 : var2.method2()) {
                var4.method4(var1.method0());
                if (var4 instanceof Type8) {
                    var5.method5();
                    var1.method0().method6(var4);
                    var3 += method3(Type11.class);
                } else {
                    var3 += method3(var5.method7());
                }
                var6++;
            }
        }
with
var0.method0(var1.method1())
Change's id number: 29413
replace
if (var0 > var1) {
      long var2 = (var0 - var1)*(var3.method0()/var1);
      method1(var4, 0, var2, true);
    }
with
long var0 = (var1 - var2) * (var3.method0()/var2);
-------------------------------------------
Context: P:MethodInvocation{arguments},L:SimpleName{name},R:SimpleName{arguments}
Number of change: 205
Change's id number: 46
update
var0
to
var0
Change's id number: 62
insert
var0
Change's id number: 271
insert
var0.method0()
Change's id number: 2200
replace
var0.method0()
with
var0
Change's id number: 333
replace
var0.method0()
with
var0
-------------------------------------------
Context: P:ForStatement{statements},L:IfStatement{statements},R:IfStatement{statements}
Number of change: 27
Change's id number: 1034
insert
final Type0 var0 = var1.method0(var2);
Change's id number: 4234
insert
if (var0 > var1) {
                throw new RuntimeException(str0 + var2 + str1 + var3 + str2 + var0 + str3 + var1);
              }
Change's id number: 3451
replace
if (var0[var1]) {
        var2.append('[');
      } else {
        var2.append('{');
      }
with
var0.append('[')
Change's id number: 10065
replace
var0 += var1[var2].method0().var3
with
var0 += var1
Change's id number: 11638
insert
if (var0 && var1 == null) {
            if (var2.method0() == -1) {
              var0 = false;
            } else {
              var1 = new Type0<Number>();
              var3.method1(str0, var1);
            }
          }
-------------------------------------------
Context: P:MethodDeclaration{thrownExceptionTypes},L:SingleVariableDeclaration{parameters},R:Block{body}
Number of change: 30
Change's id number: 387
insert
IOException
Change's id number: 19065
update
IOException
to
Type0
Change's id number: 25038
insert
UnsupportedEncodingException
Change's id number: 22548
update
SQLException
to
Type0
Change's id number: 2663
update
Exception
to
Type0
-------------------------------------------
Context: P:ArrayCreation{initializer},L:ArrayType{type},R:
Number of change: 41
Change's id number: 5448
replace
{0x0000032308002050L}
with
{0x00008886100040A0L}
Change's id number: 3742
replace
{var0.method0(var1, var2)}
with
{var0}
Change's id number: 4026
replace
{var0, var1, var2}
with
{var0, var1, var2}
Change's id number: 5441
replace
{0x0000000000000022L}
with
{0x0000000000000042L}
Change's id number: 5443
replace
{0x0000000000780002L}
with
{0x0000000000F00002L}
-------------------------------------------
Context: P:ClassInstanceCreation{arguments},L:SimpleType{type},R:MethodInvocation{arguments}
Number of change: 37
Change's id number: 305
update
var0
to
var0
Change's id number: 62
insert
var0
Change's id number: 46
update
var0
to
var0
Change's id number: 6246
replace
var0.toString()
with
var0.method0(var1)
Change's id number: 65
replace
var0
with
method0()
-------------------------------------------
Context: P:MethodInvocation{arguments},L:SimpleName{arguments},R:MethodInvocation{arguments}
Number of change: 45
Change's id number: 373
insert
true
Change's id number: 62
insert
var0
Change's id number: 5225
replace
var0.method0(var1)
with
var0.method0()
Change's id number: 271
insert
var0.method0()
Change's id number: 365
replace
var0
with
var0
-------------------------------------------
Context: P:FieldDeclaration{fragments},L:PrimitiveType{type},R:
Number of change: 55
Change's id number: 384
replace
var0
with
var0
Change's id number: 27350
replace
var0
      = var1
with
var0 = Type0
      .method0()
Change's id number: 4706
replace
var0 = var1
with
var0 = 1
Change's id number: 7140
replace
var0 = 2
with
var0 = var1
Change's id number: 698
replace
var0 = 5
with
var0 = 5000
-------------------------------------------
Context: P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
Number of change: 455
Change's id number: 36212
insert
if (var0.method0(var1)) {
            var0.method1(var1);
            return;
        }
Change's id number: 271
insert
var0.method0()
Change's id number: 379
insert
Type0 var0 = var1.method0();
Change's id number: 29292
insert
long var0 = -1L;
Change's id number: 29287
insert
var0 = var1.readLong()
-------------------------------------------
Context: P:MethodDeclaration{statements},L:Assignment{statements},R:ReturnStatement{statements}
Number of change: 77
Change's id number: 120
insert
var0 = null
Change's id number: 2994
insert
var0 = true
Change's id number: 1768
insert
var0 = 31 * var0 + Objects.hashCode(var1)
Change's id number: 2803
insert
if (var0 == null)
          return false;
Change's id number: 4454
insert
var0 = -1
-------------------------------------------
Context: P:MethodInvocation{arguments},L:InfixExpression{arguments},R:
Number of change: 39
Change's id number: 62
insert
var0
Change's id number: 297
insert
var0
Change's id number: 46
update
var0
to
var0
Change's id number: 271
insert
var0.method0()
Change's id number: 17228
insert
var0.method0() + var1.method0()
-------------------------------------------
Context: P:IfStatement{expression},L:,R:ReturnStatement{thenStatement}
Number of change: 114
Change's id number: 30896
replace
var0.method0().method1() && !var0.method2()
with
var0.method0().method1()
Change's id number: 580
insert
var0 != null
Change's id number: 36422
insert
var0 == null
                || (var1[3] != var0.getClass()
                && (!(var0 instanceof Type0)
                || var1[3] != ((Type0) var0).method0()))
Change's id number: 36429
insert
var0 == null
                || (var1[2] != var0.getClass()
                && (!(var0 instanceof Type0)
                || var1[2] != ((Type0) var0).method0()))
Change's id number: 36434
replace
var0[var1] != var2
with
var0[var1] != var2.getClass()
                        && (!(var2 instanceof Type0) || var0[var1] != ((Type0) var2).method0())
-------------------------------------------
Context: P:MethodDeclaration{statements},L:,R:
Number of change: 1531
Change's id number: 10522
insert
assert var0 + var1 * method0() <= var2;
Change's id number: 28880
replace
return method0().method1().method2(str0, str1).method2(str2, str3);
with
return var0.method0(method1());
Change's id number: 294
insert
return var0;
Change's id number: 26809
replace
return method0().method1();
with
return ((Type0) var0).method0();
Change's id number: 3859
insert
super(var0);
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:SimpleName{name},R:MethodDeclaration{bodyDeclarations}
Number of change: 38
Change's id number: 1106
insert
Type0 var0;
Change's id number: 31302
replace
/**
   * Returned by {@link RetryPolicy#shouldRetry(Exception, int, int, boolean)}.
   */
  @InterfaceStability.Evolving
  public static class Type0 {
    
    // A few common retry policies, with no delays.
    public static final Type0 var0 =
        new Type0(var0);
    public static final Type0 var1 =
        new Type0(var1);
    public static final Type0 var2 =
        new Type0(var2);
    
    public final Type1 var3;
    public final long var4;
    
    public RetryAction(Type1 var3) {
      this(var3, 0);
    }
    
    public RetryAction(Type1 var3, long var5) {
      this.var3 = var3;
      this.var4 = var5;
    }
    
    public enum Type1 {
      var0,
      var1,
      var2
    }
  }
with
/**
   * Returned by {@link RetryPolicy#shouldRetry(Exception, int, int, boolean)}.
   */
  @InterfaceStability.Evolving
  public enum Type0 {
    var0,
    var1,
    var2
  }
Change's id number: 8905
insert
/** Spare {@link BytesRef} that subclasses can reuse. */
  protected final Type0 var0 = new Type0();
Change's id number: 3323
insert
private Type0[] var0;
Change's id number: 1165
insert
private static final String var0 = str0;
-------------------------------------------
Context: P:MethodDeclaration{statements},L:MethodInvocation{statements},R:ReturnStatement{statements}
Number of change: 166
Change's id number: 7203
insert
final Type0 var0 = var1;
Change's id number: 31107
replace
try {
      long var0 = method0();
      var1 = method1(var2, var3, false, 
                                 var4);
      var5.method2(str0 + var3.method3() 
          + str1 + var3.method4() + str2 + var1 
          + str3 + (method0()-var0)/1000 + str4);
    } finally {
      var3.method5();
      var6.method6();
    }
with
try {
      var0 = method0(var1, var2, false, 
                                 var3);
    } finally {
      if(var4) {
        var2.method1();
      }
    }
Change's id number: 31591
replace
try {
      long var0 = method0();
      var1 = method1(var2, var3, false, 
                                 var4);
      var5.method2(str0 + var3.method3() 
          + str1 + var3.method4() + str2 + var1 
          + str3 + (method0()-var0)/1000 + str4);
    } finally {
      var6.method5();
      
      // Delay the notification of genstamp updates until after
      // setBlockTotal() above. Otherwise, we will mark blocks
      // as "safe" before they've been incorporated in the expected
      // totalBlocks and threshold for SafeMode -- triggering an
      // assertion failure and/or exiting safemode too early!
      var6.method6(var7);
      
      var3.method7();
      var6.method8();
    }
with
try {
      var0 = method0(var1, var2, false, 
                                 var3);
    } finally {
      if(var4) {
        var2.method1();
      }
    }
Change's id number: 21990
insert
var0.append(str0 +
                       var1)
Change's id number: 7541
insert
var0.append(str0).append(var1).append(str1)
-------------------------------------------
Context: P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ReturnStatement{statements}
Number of change: 421
Change's id number: 2007
insert
if (var0 == null) {
        return null;
      }
Change's id number: 650
insert
int var0 = var1.method0();
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 237
insert
var0.addAll(var1)
Change's id number: 36352
replace
if (var0.equals(var1.method0())) {
                var2 = var1.ordinal();
            } else if (var0.equals(var3.method0())) {
                var2 = var3.ordinal();
            } else if (var0.equals(var4.method0())) {
                var2 = var4.ordinal();
            } else if (var0.equals(var5.method0())) {
                var2 = var5.ordinal();
            } else {
                throw new Type1(str0+var0);
            }
with
if (var0 instanceof Type1) {
                throw (Type0)var0.getCause();
            } else if (var1.getClass() == var0.method0() && var0.method1().equals(var2)) {
                //TODO: we should consider calling this one directly for MetaClassImpl,
                //      then we save the new method selection
                
                // in case there's nothing else, invoke the object's own invokeMethod()
                return ((Type2)var1).method2(var2, var3);
            } else {
                throw var0;
            }
-------------------------------------------
Context: P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
Number of change: 53
Change's id number: 29592
insert
if(var0[0] != null) {
        // This is a retry. Just return the last block.
        return var0[0];
      }
Change's id number: 36511
insert
String var0 = Type0.method0(var1.getInputStream(), var2);
Change's id number: 34698
insert
var0 = var1.findVirtual(Type0.class, str0,
                    MethodType.methodType(Type1.class, Map.class, Class.class))
Change's id number: 5330
replace
var0 = Type0.method0(var0, var1)
with
var0.method0(var1)
Change's id number: 27037
insert
Type0 var0 = Type1.method0(var1, var2);
-------------------------------------------
Context: P:MethodDeclaration{statements},L:MethodInvocation{statements},R:MethodInvocation{statements}
Number of change: 504
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 271
insert
var0.method0()
Change's id number: 36206
replace
var0.pop()
with
var0.method0()
Change's id number: 30893
insert
if(!var0.method0(var1))
      throw new IOException(str0);
Change's id number: 5414
insert
var0.add(var1)
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:MethodDeclaration{bodyDeclarations},R:
Number of change: 128
Change's id number: 9027
insert
private static class Type0 {
    // Only used to enforce that same DV field name is never
    // added more than once per doc:
    int var0;
    final Type1 var1;
    Type2 var2;

    public DocValuesConsumerHolder(Type1 var1) {
      this.var1 = var1;
    }
  }
Change's id number: 37168
insert
private static class Type0 extends Type1 {

        private Type2 var0;

        public SwapInitStatement() {
            super(new Type3());
            ((Type3)method0().get(0)).var1 = this;
        }

        @Override
        public void visit(final Type4 var2) {
            if (var2 instanceof Type5) {
                Type5 var3 = (Type5) var2;
                var0 = var3.method1();
            }
            super.method2(var2);
        }

        private static class Type3 extends Type6 {
            Type0 var1;

            @Override
            public void method2(final Type7 var4) {
                var0.method3().method4();
            }
        }
    }
Change's id number: 9361
insert
public static class Type0 extends Type1 {
    final int var0;
    final Type2 var1;

    public EmptyDocValues(int var0, Type3 var2) {
      this.var0 = var0;
      this.var1 = new Type4(var2);
    }

    @Override
    protected Type2 loadSource() throws IOException {
      return var1;
    }

    @Override
    public Type3 getType() {
      return var1.method0();
    }

    @Override
    protected Type2 loadDirectSource() throws IOException {
      return var1;
    }
  }
Change's id number: 3966
insert
/** Which Lucene version wrote this commit, or null if this commit is pre-5.3. */
  private Type0 var0;
Change's id number: 32273
insert
@InterfaceAudience.Private
  public static class Type0 extends Type1 {
    @Override
    protected Type2 method0() {
      return var0;
    }
  }
-------------------------------------------
Context: P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
Number of change: 29
Change's id number: 306
insert
str0
Change's id number: 37
replace
method0()
with
method0()
Change's id number: 2003
insert
!var0
Change's id number: 1977
insert
var0 instanceof Type1
Change's id number: 62
insert
var0
-------------------------------------------
Context: P:MethodDeclaration{statements},L:SuperMethodInvocation{statements},R:
Number of change: 29
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 6301
replace
var0.method0(var1)
with
super.method0(var0)
Change's id number: 2614
insert
int var0 = var1.method0(var2,var3);
Change's id number: 32894
insert
switch (var0.method0().method1()) {
            case var1: // = assignment
            case var2:
            case var3:
            case var4:
            case var5:
            case var6:
            case var7:
            case var8:
            case var9:
            case var10:
            case var11:
            case var12:
            case var13:
            case var14:
                method2(var0.method3());
                break;
            default:
                break;
        }
Change's id number: 9676
replace
var0.method0()
with
if (var0) {
      var1.method0();
    }
-------------------------------------------
Context: P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
Number of change: 38
Change's id number: 9187
replace
private static final byte[] var0 = new byte[0];
with
/**
     * Reads length as 1 or 2 byte vInt prefix, starting at <i>start</i>. *
     * <p>
     * <b>Note:</b> this method does not support slices spanning across block
     * borders.
     * </p>
     * 
     * @return the internal block number of the slice.
     * @lucene.internal
     **/
    public int fillAndGetIndex(Type1 var0, long var1) {
      final int var2 = (int) (var1 >> var3);
      final int var4 = (int) (var1 & var5);
      final byte[] var6 = var7 = var8[var2];

      if ((var6[var4] & 128) == 0) {
        var9 = var6[var4];
        var4 = var4+1;
      } else {
        var9 = ((var6[var4] & 0x7f) << 8) | (var6[1+var4] & 0xff);
        var4 = var4+2;
        assert var9 > 0;
      }
      return var2;
    }
Change's id number: 9593
insert
protected final Set<String> var0 = new HashSet<String>();
Change's id number: 856
insert
private Type0 var0;
Change's id number: 4627
insert
private long var0;
Change's id number: 1692
insert
private final Semaphore var0;
-------------------------------------------
Context: P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:EnhancedForStatement{statements}
Number of change: 36
Change's id number: 21145
replace
var0 = var1.method0()
with
var0.method0(var1.method1())
Change's id number: 35096
insert
try {
                var0 = var1.getDeclaredMethods();
            } catch (SecurityException var2) {
                var0 = new Method[0];
            }
Change's id number: 35101
replace
for (String var0 : var1) {
                var2.method0(new Type2(var0),var3.method1(var0));
            }
with
for (Map<String, Object> var0 : var1) {
            // add Grape.grab(excludeArgs, [group:group, module:module, version:version, classifier:classifier])
            // or Grape.grab([group:group, module:module, version:version, classifier:classifier])
            Type0 var2 = new Type0();
            for (String var3 : var4) {
                var2.method0(new Type2(var3), new Type2(var0.get(var3)));
            }
            for (String var3 : var5) {
                if (var0.containsKey(var3))
                    var2.method0(new Type2(var3), new Type2(var0.get(var3)));
            }
            var6.add(var2);
        }
Change's id number: 3141
insert
double var0 = 0d;
Change's id number: 28282
insert
if (var0 == 1) {
              // If we get back only one result, this could be either a listing
              // of a directory with one entry, or it could reflect the fact
              // that what we listed resolved to a file.
              //
              // Unfortunately, we can't just compare the returned paths to
              // figure this out.  Consider the case where you have /a/b, where
              // b is a symlink to "..".  In that case, listing /a/b will give
              // back "/a/b" again.  If we just went by returned pathname, we'd
              // incorrectly conclude that /a/b was a file and should not match
              // /a/*/*.  So we use getFileStatus of the path we just listed to
              // disambiguate.
              if (!method0(var1.method1()).method2()) {
                continue;
              }
            }
-------------------------------------------
Context: P:MethodInvocation{arguments},L:MethodInvocation{arguments},R:MethodInvocation{arguments}
Number of change: 31
Change's id number: 8918
replace
var0.method0(var1)
with
var0[var1]
Change's id number: 271
insert
var0.method0()
Change's id number: 930
insert
method0(var0)
Change's id number: 6023
replace
Double.longBitsToDouble(var0.method0(var1))
with
var0.method0(var1)
Change's id number: 306
insert
str0
-------------------------------------------
Context: P:EnhancedForStatement{statements},L:,R:
Number of change: 96
Change's id number: 31103
replace
var0.method0(var1, var2)
with
var0.method0(var1, var2, var3)
Change's id number: 29524
replace
var0.method0(this)
with
var0 = this
Change's id number: 26795
replace
if (var0.method0() == var1) {
        var2.add(var0);
      } else if (var0.method0() == var3 && 
          var4) {
        var2.add(var0);
      } else if (var0.method0() == var5 &&
          var4 && var6) {
        var2.add(var0);
      }
with
if (var0.method0() == var1) {
        var2.add(var0);
      } else if (var0.method0() == var3 && 
          var4.method1()) {
        var2.add(var0);
      }
Change's id number: 19057
replace
if (var0 == var1) {
        var2.add(var3);
      }
      else if (!var4 && var0 == var5) {
        var2.add(var3);
      }
      else if (var6 && var0 == var7) {
        var2.add(var3);
      }
      else if (var8 && var0 == var9) {
        var2.add(var3);
      }
      else if (var4 && var0 == var10) {
        var2.add(var3);
      }
      else if (var4 && var11 == false && var0 == var12) {
        var2.add(var3);
      }
      else if (var11 == true &&
               var13 == false &&
               var14 == false &&
               var0 == var15) {
        var2.add(var3);
      }
      else if (var4 && var11 && var0 == var16) {
        var2.add(var3);
      }
      else if (var13 && var14 == false && var0 == var17) {
        var2.add(var3);
      }
      else if (var14 && var13 == false && var0 == var18) {
        var2.add(var3);
      }
      else if ((var14 && var13) &&
                var0 == var19) {
        var2.add(var3);
      }
      else if (var20 != null && var0 == var21) {
        var2.add(var3);
      }
with
if (var0 == var1) {
        var2.add(var3);
      }
      else if (!var4 && var0 == var5) {
        var2.add(var3);
      }
      else if (var6 && var0 == var7) {
        var2.add(var3);
      }
      else if (var8 && var0 == var9) {
        var2.add(var3);
      }
      else if (var4 && var0 == var10) {
        var2.add(var3);
      }
      else if (var4 && var11 == false && var0 == var12) {
        var2.add(var3);
      }
      else if (var11 == true &&
               var13 == false &&
               var14 == false &&
               var0 == var15) {
        var2.add(var3);
      }
      else if (var4 && var11 && var0 == var16) {
        var2.add(var3);
      }
      else if (var13 && var14 == false && var0 == var17) {
        var2.add(var3);
      }
      else if (var14 && var13 == false && var0 == var18) {
        var2.add(var3);
      }
      else if ((var14 && var13) &&
                var0 == var19) {
        var2.add(var3);
      }
Change's id number: 37498
replace
var0.addAll(method0(var1))
with
method0(var0, var1, var2)
-------------------------------------------
Context: P:ForStatement{statements},L:,R:MethodInvocation{statements}
Number of change: 52
Change's id number: 29288
insert
byte[] var0 = new byte[var1.readShort()];
Change's id number: 1893
insert
String var0 = var1[var2];
Change's id number: 3027
insert
final Type0 var0 = var1[var2];
Change's id number: 25272
replace
Type0 var0 = (Type0) var1.next();
with
Type0 var0 = (Type0) var1.next();
Change's id number: 236
insert
int var0 = method0();
-------------------------------------------
Context: P:SwitchStatement{statements},L:SwitchCase{statements},R:SwitchCase{statements}
Number of change: 231
Change's id number: 1956
insert
case var0:
Change's id number: 32917
replace
case var0
method0(var1, var2
break;
with
case var0:
Change's id number: 32918
replace
case var0
method0(var1
break;
with
case var0:
Change's id number: 24674
insert
case var0
return str0;
Change's id number: 22127
insert
case var0:
-------------------------------------------
Context: P:MethodDeclaration{statements},L:Assignment{statements},R:
Number of change: 545
Change's id number: 16
insert
this.var0 = var0
Change's id number: 120
insert
var0 = null
Change's id number: 2702
insert
this.var0 = var1.method0()
Change's id number: 101
replace
this.var0 = var0
with
this.var0 = var0
Change's id number: 1351
insert
this.var0 = var1
-------------------------------------------
Context: P:WhileStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
Number of change: 59
Change's id number: 9480
replace
if (var0 == null) {
            break;
          }
with
if (var0 == null) {
            break;
          }
Change's id number: 9389
insert
if (var0 == null) {
              break;
            }
Change's id number: 489
insert
var0 = method0(var0, var1)
Change's id number: 4293
insert
if (var0) {
                    assert var1 != null;
                    var2 = var1;
                  } else {
                    assert var3 != null;
                    var2 = var3;
                  }
Change's id number: 2896
insert
int[] var0 = var1.method0();
-------------------------------------------
Context: P:CatchClause{body},L:SingleVariableDeclaration{exception},R:
Number of change: 47
Change's id number: 30816
replace
{
      throw var0.method0(var1);
    }
with
{
      if (var0.method0() instanceof Type0) {
        throw (Type0)var0.method0();
      } else if (var0.method0() instanceof UndeclaredThrowableException) {
        throw (UndeclaredThrowableException)var0.method0();
      } else {
        throw new UndeclaredThrowableException(var0);
      }
    }
Change's id number: 30839
insert
{
      throw new Type0(var0);
    }
Change's id number: 24684
insert
{
            throw var0.method0();
        }
Change's id number: 27663
replace
{
      var0.method0(str0 + var1);
      throw new Type0(str1
          + var2 + str2, var1);
    }
with
{
        if (method0(var0)) {
          var1 = false;
          if (var2) {
            var3.method1(str0 +
                var4.method2().method3() +
                str1);
          }
        } else {
          throw new Type1(
              str2
              + var4 + str3, var0);
        }
      }
Change's id number: 28450
replace
{
      throw new IOException(str0, var0);
    }
with
{
      if (var0) {
        // Unlike URI, PathData knows how to parse Windows drive-letter paths.
        var1 = new Type0(var2, method0());
      } else {
        throw new IOException(str0, var3);
      }
    }
-------------------------------------------
Context: P:IfStatement{statements},L:IfStatement{statements},R:Assignment{statements}
Number of change: 54
Change's id number: 5338
replace
var0.method0(var1, var2+var3, var4-var3, var5)
with
var0.method0(var1.method1(), var2, var1.method2()-var2)
Change's id number: 18979
insert
if (var0 == null) {
            var0 = var1;
          }
Change's id number: 28917
insert
if (var0) {
        // Now that there's a FINISHING state for application on RM to give AMs
        // plenty of time to clean up after unregister it's safe to clean staging
        // directory after unregistering with RM. So, we start the staging-dir
        // cleaner BEFORE the ContainerAllocator so that on shut-down,
        // ContainerAllocator unregisters first and then the staging-dir cleaner
        // deletes staging directory.
        method0(method1());
      }
Change's id number: 1088
insert
if (var0.method0() && var1 <= 0) { // default is mincount=0.  See SOLR-10033 & SOLR-11174.
              String var2 
                  = str0 + var1 + str1 + var3 + str2;
              var4.method1(var2);
              List<String> var5 = (List<String>)var6.method2().method3(str3);
              if (null == var5) {
                var5 = new ArrayList<>();
                var6.method2().method4(str3, var5);
              }
              var5.add(var2);

              var1 = 1;
            }
Change's id number: 3321
insert
if (var0 != null) {
          assert var0[0].var1.var2 == var0[0].var2 : str0;

          final int var3 = var4.method0();
          final int var5 = var4.method1();
          var6 = var0[0].var1.method2();
          var7 = var0[0].var1.method2();

          for (int var8 = 0; var8 < var9; var8++) {
            Type0 var10 = var0[var8];
            assert var11 == var12 : str0;

            for (int var13 = 0; var13 < var3; ++var13) {
              int var14 = var13 * var5;
              if (var15.method3(var5, var16, var14, var6, var14) < 0) {
                System.arraycopy(var16, var14, var6, var14, var5);
              }
              if (var15.method3(var5, var16, var14, var7, var14) > 0) {
                System.arraycopy(var16, var14, var7, var14, var5);
              }
            }
          }
        }
-------------------------------------------
Context: P:ForStatement{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
Number of change: 30
Change's id number: 36524
insert
if (var0 == null && var1.method0(var2)!=null) {
                    var0 = (Type0) var1.method0(var2);
                }
Change's id number: 18289
insert
assert var0 < var1: var0 + str0 + var1 + str1 + var1;
Change's id number: 2457
insert
if (var0.method0() == 0) {
                       // This segment saw this field, but the field did not index points in it:
                       continue;
                     }
Change's id number: 3347
insert
double var0 = Type0.method0(var1);
Change's id number: 4478
replace
if (var0 != -1 && var1 != -1 && var0 != var1) {
                          throw new RuntimeException(str0 + var2 + str1 + var3 + str2 + var4 + str3 + var0 + str4 + var1);
                        }
with
if (var0 != null) {
                          final int var1 = var0.method0();
                          
                          final int var2 = var0.method1();
                          if (var3 != -1 && var1 != -1 && var3 != var1) {
                            throw new RuntimeException(str0 + var4 + str1 + var5 + str2 + var6 + str3 + var3 + str4 + var1);
                          }
                          if (var7 != -1 && var2 != -1 && var7 != var2) {
                            throw new RuntimeException(str0 + var4 + str1 + var5 + str2 + var6 + str5 + var7 + str6 + var2);
                          }
                        }
-------------------------------------------
Context: P:MethodDeclaration{statements},L:IfStatement{statements},R:Assignment{statements}
Number of change: 158
Change's id number: 31018
insert
InetSocketAddress var0 = Type0.method0(var1.getAuthority());
Change's id number: 16
insert
this.var0 = var0
Change's id number: 9170
replace
long[] var0 = null;
with
byte var0 = var1.method0();
Change's id number: 31192
replace
this.var0 = Type1.method0(var1)
with
this.var0 = var0
Change's id number: 2734
insert
if (var0 > 1) {
        throw new IllegalArgumentException(str0);
      }
-------------------------------------------
Context: P:InfixExpression{leftOperand},L:,R:QualifiedName{rightOperand}
Number of change: 54
Change's id number: 2200
replace
var0.method0()
with
var0
Change's id number: 36465
insert
256
Change's id number: 273
replace
var0
with
var0.method0()
Change's id number: 2581
replace
var0.method0()
with
var0
Change's id number: 427
replace
var0.method0()
with
var0.method0()
-------------------------------------------
Context: P:EnhancedForStatement{statements},L:,R:MethodInvocation{statements}
Number of change: 26
Change's id number: 36150
insert
var0.method0(var1, var0.method1())
Change's id number: 34748
replace
Type0 var0 = method0(var1.method1(), var1.method2(), var1.method3(), var1.method4(), var1.method5(), var1.method6());
with
method0(var0.method1(), var0.method2(), var0.method3(), var0.method4(), var0.method5(), var0.method6())
Change's id number: 17971
insert
assert !Type0.method0(var0, var1) 
                  : str0 + var0;
Change's id number: 19122
insert
var0.put(var1, Long.valueOf(var2))
Change's id number: 5290
replace
Type0.method0(var0, var1)
with
var0 = Type0.method0(var0, var1)
-------------------------------------------
Context: P:MethodDeclaration{statements},L:IfStatement{statements},R:
Number of change: 899
Change's id number: 294
insert
return var0;
Change's id number: 1118
insert
if (var0) {
            var1.method0(var2, var3, var4);
          }
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 329
insert
var0 = var1.method0()
Change's id number: 2728
replace
return new Type0(var0 );
with
return var0;
-------------------------------------------
Context: P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:
Number of change: 1185
Change's id number: 8891
insert
return var0==0 ? null  : Type0.method0(var1.method1(var0, var2));
Change's id number: 857
insert
Type0 var0 = var1.method0(var2);
Change's id number: 6126
insert
try {
      var0.method0(var1);
      var2 = true;
    } finally {
      if (var2) {
        Type2.method1(var0);
      } else {
        Type2.method2(var0);
      }
    }
Change's id number: 135
insert
var0.method0(var1)
Change's id number: 31123
insert
if (var0 == null || var0.isEmpty()) {
      String var1 = method0(var2, null, var3, var4);
      if (var1 == null) {
        return null;
      }
      var5.add(var6.method1(var1));
    } else {
      // Get the namenodes for all the configured nameServiceIds
      for (String var7 : var0) {
        String var1 = method0(null, var7, var3, var4);
        if (var1 == null) {
          return null;
        }
        var5.add(var6.method1(var1));
      }
    }
-------------------------------------------
Context: P:TryStatement{statements},L:,R:MethodInvocation{statements}
Number of change: 115
Change's id number: 7386
insert
method0(var0)
Change's id number: 20
insert
method0()
Change's id number: 19115
insert
var0 = method0().method1(var1, new StringReader(var2))
Change's id number: 31716
replace
method0(var0, var1)
with
method0(var0, method1(var0))
Change's id number: 930
insert
method0(var0)
-------------------------------------------
Context: P:MethodDeclaration{statements},L:,R:Assignment{statements}
Number of change: 265
Change's id number: 16
insert
this.var0 = var0
Change's id number: 101
replace
this.var0 = var0
with
this.var0 = var0
Change's id number: 1054
insert
var0 = false
Change's id number: 20
insert
method0()
Change's id number: 29481
insert
super(var0, var1.method0(var2), var3,
        var4, var5, var5, var6);
-------------------------------------------
Context: P:EnhancedForStatement{statements},L:,R:IfStatement{statements}
Number of change: 36
Change's id number: 31023
insert
if (var0 > var1.method0()
          && var0 <= var1.method1()) {
        throw new IOException(str0 + var0
            + str1 + var2);
      }
Change's id number: 36578
replace
boolean var0 = var1.method0() instanceof Type2 && method1(var2, var1.method0().method2());
with
List<Type0> var0 = method0(var1, str0 + var2, var3);
Change's id number: 2905
insert
Type0 var0 = var1.method0().method1().method2(var2);
Change's id number: 5733
insert
final int var0 = var1;
Change's id number: 34619
replace
String var0 = Type0.method0(var1, var2).method1();
with
String var0 = var1.method0();
-------------------------------------------
Context: P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
Number of change: 140
Change's id number: 20
insert
method0()
Change's id number: 6283
replace
var0 = var1
with
var0.method0(var1)
Change's id number: 37
replace
method0()
with
method0()
Change's id number: 29478
replace
if (str0.equals(var0)) {
      if (var1 != 2) {
        method0(var0);
        return var2;
      }
    } else if (str1.equalsIgnoreCase(var0)) {
      if (var1 != 2) {
        method0(var0);
        return var2;
      }
    } else if (str2.equalsIgnoreCase(var0)) {
      if (var1 != 2) {
        method0(var0);
        return var2;
      }
    } else if (str3.equals(var0)) {
      if (var1 != 1) {
        method0(var0);
        return var2;
      }
    } else if (str4.equals(var0)) {
      if (var1 != 1) {
        method0(var0);
        return var2;
      }
    } else if (str5.equals(var0)) {
      if (var1 != 1) {
        method0(var0);
        return var2;
      }      
    } else if (str6.equals(var0)) {
      if (var1 != 2) {
        method0(var0);
        return var2;
      }
    } else if (str7.equals(var0)) {
      if (var1 != 1) {
        method0(var0);
        return var2;
      }
    } else if (str8.equals(var0)) {
      if (var1 != 1) {
        method0(var0);
        return var2;
      }
    } else if (str9.equals(var0)) {
      if (var1 != 2) {
        method0(var0);
        return var2;
      }
    } else if (str10.equals(var0)) {
      if (var1 != 1) {
        method0(var0);
        return var2;
      }
    } else if (str11.equals(var0)) {
      if (var1 != 1) {
        method0(var0);
        return var2;
      }
    } else if (str12.equals(var0)) {
      if(var1 != 1) {
        method0(var0);
        return var2;
      }
    } else if (str13.equals(var0)) {
      if (var1 != 2) {
        method0(var0);
        return var2;
      }
    } else if (str14.equals(var0)) {
      if ((var1 != 3) && (var1 != 4)) {
        method0(var0);
        return var2;
      }
    } else if (str15.equals(var0)) {
      if (var1 != 2) {
        method0(var0);
        return var2;
      }
    } else if (str16.equals(var0)) {
      if (var1 != 2) {
        method0(var0);
        return var2;
      }
    }
with
if (str0.equals(var0)) {
      if (var1 != 2) {
        method0(var0);
        return var2;
      }
    } else if (str1.equals(var0)) {
      if (var1 != 1) {
        method0(var0);
        return var2;
      }
    } else if (str2.equals(var0)) {
      if (var1 != 1) {
        method0(var0);
        return var2;
      }
    } else if (str3.equals(var0)) {
      if (var1 != 1) {
        method0(var0);
        return var2;
      }      
    } else if (str4.equals(var0)) {
      if (var1 != 2) {
        method0(var0);
        return var2;
      }
    } else if (str5.equals(var0)) {
      if (var1 != 1) {
        method0(var0);
        return var2;
      }
    } else if (str6.equals(var0)) {
      if (var1 != 1) {
        method0(var0);
        return var2;
      }
    } else if (str7.equals(var0)) {
      if (var1 != 2) {
        method0(var0);
        return var2;
      }
    } else if (str8.equals(var0)) {
      if (var1 != 1) {
        method0(var0);
        return var2;
      }
    } else if (str9.equals(var0)) {
      if (var1 != 1) {
        method0(var0);
        return var2;
      }
    } else if (str10.equals(var0)) {
      if(var1 != 1) {
        method0(var0);
        return var2;
      }
    } else if (str11.equals(var0)) {
      if (var1 != 2) {
        method0(var0);
        return var2;
      }
    } else if (str12.equals(var0)) {
      if ((var1 != 3) && (var1 != 4)) {
        method0(var0);
        return var2;
      }
    } else if (str13.equals(var0)) {
      if (var1 != 2) {
        method0(var0);
        return var2;
      }
    } else if (str14.equals(var0)) {
      if (var1 != 2) {
        method0(var0);
        return var2;
      }
    }
Change's id number: 31490
replace
var0.method0(var1)
with
var0 = var1
-------------------------------------------
Context: P:TryStatement{statements},L:IfStatement{statements},R:Assignment{statements}
Number of change: 30
Change's id number: 30954
replace
if (!var0) {
        var1.method0();
      }
with
var0.method0()
Change's id number: 10180
insert
var0.method0(var1, false)
Change's id number: 1911
insert
Type0.method0(var0)
Change's id number: 28607
replace
var0 = Type0.method0(var0, var1, var2)
with
method0(str0 + var0)
Change's id number: 271
insert
var0.method0()
